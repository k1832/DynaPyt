-1:  Execution started
0:  Literal    value: Helvetica
0:      String value: Helvetica
1:  Accessing
1:      Writing
2:  Literal    value: 12
2:      Integer value: 12
3:  Accessing
3:      Writing
4:  Literal    value: 0
4:      Integer value: 0
5:  Literal    value: 0
5:      Integer value: 0
6:  Literal    value: 0
6:      Integer value: 0
7:  Literal    value: (0, 0, 0)
7:  Tuple items: [0, 0, 0]
8:  Accessing
8:      Writing
9:  Accessing
9:   Reading
9:  Slice [<class 'PyPDFForm.middleware.text.Text'>, <class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>]
10:  Accessing
10:      Writing
0:  Literal    value: /Annots
0:      String value: /Annots
1:  Accessing
1:      Writing
2:  Literal    value: /T
2:      String value: /T
3:  Accessing
3:      Writing
4:  Literal    value: /Rect
4:      String value: /Rect
5:  Accessing
5:      Writing
6:  Literal    value: /Subtype
6:      String value: /Subtype
7:  Accessing
7:      Writing
8:  Literal    value: /Widget
8:      String value: /Widget
9:  Accessing
9:      Writing
10:  Literal    value: /FT
10:      String value: /FT
11:  Accessing
11:      Writing
12:  Literal    value: /Parent
12:      String value: /Parent
13:  Accessing
13:      Writing
14:  Literal    value: /Ff
14:      String value: /Ff
15:  Accessing
15:      Writing
16:  Literal    value: /Tx
16:      String value: /Tx
17:  Accessing
17:      Writing
18:  Literal    value: /DA
18:      String value: /DA
19:  Accessing
19:      Writing
20:  Literal    value: /Btn
20:      String value: /Btn
21:  Accessing
21:      Writing
22:  Literal    value: /MaxLen
22:      String value: /MaxLen
23:  Accessing
23:      Writing
24:  Literal    value: /Q
24:      String value: /Q
25:  Accessing
25:      Writing
26:  Literal    value: /Ch
26:      String value: /Ch
27:  Accessing
27:      Writing
28:  Literal    value: /Opt
28:      String value: /Opt
29:  Accessing
29:      Writing
30:  Literal    value: ✓
30:      String value: ✓
31:  Accessing
31:      Writing
32:  Literal    value: ●
32:      String value: ●
33:  Accessing
33:      Writing
0:  Accessing
0:   Reading
0:  Attribute:  ELEMENT_TYPE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /FT
1:  Accessing
1:   Reading
1:  Attribute:  TEXT_FIELD_IDENTIFIER of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Tx
2:  Literal    value: {'/FT': '/Tx'}
2:  Dictionary items: [('/FT', '/Tx')]
3:  Literal    value: ({'/FT': '/Tx'},)
3:  Tuple items: [{'/FT': '/Tx'}]
4:  Literal    value: (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
4:  Tuple items: [({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>]
5:  Accessing
5:   Reading
5:  Attribute:  ELEMENT_TYPE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /FT
6:  Accessing
6:   Reading
6:  Attribute:  SELECTABLE_IDENTIFIER of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Btn
7:  Literal    value: {'/FT': '/Btn'}
7:  Dictionary items: [('/FT', '/Btn')]
8:  Literal    value: ({'/FT': '/Btn'},)
8:  Tuple items: [{'/FT': '/Btn'}]
9:  Literal    value: (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
9:  Tuple items: [({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>]
10:  Accessing
10:   Reading
10:  Attribute:  ELEMENT_TYPE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /FT
11:  Accessing
11:   Reading
11:  Attribute:  CHOICE_FIELD_IDENTIFIER of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Ch
12:  Literal    value: {'/FT': '/Ch'}
12:  Dictionary items: [('/FT', '/Ch')]
13:  Literal    value: ({'/FT': '/Ch'},)
13:  Tuple items: [{'/FT': '/Ch'}]
14:  Literal    value: (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
14:  Tuple items: [({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>]
15:  Accessing
15:   Reading
15:  Attribute:  PARENT_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Parent
16:  Accessing
16:   Reading
16:  Attribute:  ELEMENT_TYPE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /FT
17:  Accessing
17:   Reading
17:  Attribute:  CHOICE_FIELD_IDENTIFIER of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Ch
18:  Literal    value: {'/FT': '/Ch'}
18:  Dictionary items: [('/FT', '/Ch')]
19:  Literal    value: {'/Parent': {'/FT': '/Ch'}}
19:  Dictionary items: [('/Parent', {'/FT': '/Ch'})]
20:  Literal    value: ({'/Parent': {'/FT': '/Ch'}},)
20:  Tuple items: [{'/Parent': {'/FT': '/Ch'}}]
21:  Literal    value: (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
21:  Tuple items: [({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>]
22:  Accessing
22:   Reading
22:  Attribute:  PARENT_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Parent
23:  Accessing
23:   Reading
23:  Attribute:  ELEMENT_TYPE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /FT
24:  Accessing
24:   Reading
24:  Attribute:  TEXT_FIELD_IDENTIFIER of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Tx
25:  Literal    value: {'/FT': '/Tx'}
25:  Dictionary items: [('/FT', '/Tx')]
26:  Literal    value: {'/Parent': {'/FT': '/Tx'}}
26:  Dictionary items: [('/Parent', {'/FT': '/Tx'})]
27:  Literal    value: ({'/Parent': {'/FT': '/Tx'}},)
27:  Tuple items: [{'/Parent': {'/FT': '/Tx'}}]
28:  Literal    value: (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
28:  Tuple items: [({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>]
29:  Accessing
29:   Reading
29:  Attribute:  PARENT_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Parent
30:  Accessing
30:   Reading
30:  Attribute:  ELEMENT_TYPE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /FT
31:  Accessing
31:   Reading
31:  Attribute:  SELECTABLE_IDENTIFIER of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Btn
32:  Literal    value: {'/FT': '/Btn'}
32:  Dictionary items: [('/FT', '/Btn')]
33:  Literal    value: {'/Parent': {'/FT': '/Btn'}}
33:  Dictionary items: [('/Parent', {'/FT': '/Btn'})]
34:  Accessing
34:   Reading
34:  Attribute:  PARENT_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Parent
35:  Accessing
35:   Reading
35:  Attribute:  SUBTYPE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Subtype
36:  Accessing
36:   Reading
36:  Attribute:  WIDGET_SUBTYPE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Widget
37:  Literal    value: {'/Subtype': '/Widget'}
37:  Dictionary items: [('/Subtype', '/Widget')]
38:  Literal    value: {'/Parent': {'/Subtype': '/Widget'}}
38:  Dictionary items: [('/Parent', {'/Subtype': '/Widget'})]
39:  Literal    value: ({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}})
39:  Tuple items: [{'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}]
40:  Literal    value: (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
40:  Tuple items: [({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>]
41:  Accessing
41:   Reading
41:  Attribute:  PARENT_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Parent
42:  Accessing
42:   Reading
42:  Attribute:  ELEMENT_TYPE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /FT
43:  Accessing
43:   Reading
43:  Attribute:  SELECTABLE_IDENTIFIER of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Btn
44:  Literal    value: {'/FT': '/Btn'}
44:  Dictionary items: [('/FT', '/Btn')]
45:  Literal    value: {'/Parent': {'/FT': '/Btn'}}
45:  Dictionary items: [('/Parent', {'/FT': '/Btn'})]
46:  Literal    value: ({'/Parent': {'/FT': '/Btn'}},)
46:  Tuple items: [{'/Parent': {'/FT': '/Btn'}}]
47:  Literal    value: (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
47:  Tuple items: [({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>]
48:  Literal    value: [(({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>), (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>), (({'/FT': '/Ch'},), <class 'PyPDFForm.middlew
48:  List [(({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>), (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>), (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.
49:  Accessing
49:      Writing
50:  Accessing
50:   Reading
50:  Attribute:  ANNOTATION_FIELD_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /T
51:  Literal    value: True
51:      Boolean value: True
52:  Literal    value: {'/T': True}
52:  Dictionary items: [('/T', True)]
53:  Accessing
53:   Reading
53:  Attribute:  PARENT_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Parent
54:  Accessing
54:   Reading
54:  Attribute:  ANNOTATION_FIELD_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /T
55:  Literal    value: True
55:      Boolean value: True
56:  Literal    value: {'/T': True}
56:  Dictionary items: [('/T', True)]
57:  Literal    value: {'/Parent': {'/T': True}}
57:  Dictionary items: [('/Parent', {'/T': True})]
58:  Literal    value: [{'/T': True}, {'/Parent': {'/T': True}}]
58:  List [{'/T': True}, {'/Parent': {'/T': True}}]
59:  Accessing
59:      Writing
60:  Accessing
60:   Reading
60:  Attribute:  CHOICES_IDENTIFIER of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Opt
61:  Literal    value: True
61:      Boolean value: True
62:  Literal    value: {'/Opt': True}
62:  Dictionary items: [('/Opt', True)]
63:  Accessing
63:   Reading
63:  Attribute:  PARENT_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Parent
64:  Accessing
64:   Reading
64:  Attribute:  CHOICES_IDENTIFIER of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Opt
65:  Literal    value: True
65:      Boolean value: True
66:  Literal    value: {'/Opt': True}
66:  Dictionary items: [('/Opt', True)]
67:  Literal    value: {'/Parent': {'/Opt': True}}
67:  Dictionary items: [('/Parent', {'/Opt': True})]
68:  Literal    value: [{'/Opt': True}, {'/Parent': {'/Opt': True}}]
68:  List [{'/Opt': True}, {'/Parent': {'/Opt': True}}]
69:  Accessing
69:      Writing
70:  Accessing
70:   Reading
70:  Attribute:  TEXT_FIELD_ALIGNMENT_IDENTIFIER of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Q
71:  Literal    value: True
71:      Boolean value: True
72:  Literal    value: {'/Q': True}
72:  Dictionary items: [('/Q', True)]
73:  Accessing
73:   Reading
73:  Attribute:  PARENT_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Parent
74:  Accessing
74:   Reading
74:  Attribute:  TEXT_FIELD_ALIGNMENT_IDENTIFIER of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Q
75:  Literal    value: True
75:      Boolean value: True
76:  Literal    value: {'/Q': True}
76:  Dictionary items: [('/Q', True)]
77:  Literal    value: {'/Parent': {'/Q': True}}
77:  Dictionary items: [('/Parent', {'/Q': True})]
78:  Literal    value: [{'/Q': True}, {'/Parent': {'/Q': True}}]
78:  List [{'/Q': True}, {'/Parent': {'/Q': True}}]
79:  Accessing
79:      Writing
80:  Accessing
80:   Reading
80:  Attribute:  FIELD_FLAG_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Ff
81:  Literal    value: True
81:      Boolean value: True
82:  Literal    value: {'/Ff': True}
82:  Dictionary items: [('/Ff', True)]
83:  Accessing
83:   Reading
83:  Attribute:  PARENT_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Parent
84:  Accessing
84:   Reading
84:  Attribute:  FIELD_FLAG_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Ff
85:  Literal    value: True
85:      Boolean value: True
86:  Literal    value: {'/Ff': True}
86:  Dictionary items: [('/Ff', True)]
87:  Literal    value: {'/Parent': {'/Ff': True}}
87:  Dictionary items: [('/Parent', {'/Ff': True})]
88:  Literal    value: [{'/Ff': True}, {'/Parent': {'/Ff': True}}]
88:  List [{'/Ff': True}, {'/Parent': {'/Ff': True}}]
89:  Accessing
89:      Writing
90:  Accessing
90:   Reading
90:  Attribute:  TEXT_FIELD_APPEARANCE_IDENTIFIER of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /DA
91:  Literal    value: True
91:      Boolean value: True
92:  Literal    value: {'/DA': True}
92:  Dictionary items: [('/DA', True)]
93:  Accessing
93:   Reading
93:  Attribute:  PARENT_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Parent
94:  Accessing
94:   Reading
94:  Attribute:  TEXT_FIELD_APPEARANCE_IDENTIFIER of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /DA
95:  Literal    value: True
95:      Boolean value: True
96:  Literal    value: {'/DA': True}
96:  Dictionary items: [('/DA', True)]
97:  Literal    value: {'/Parent': {'/DA': True}}
97:  Dictionary items: [('/Parent', {'/DA': True})]
98:  Literal    value: [{'/DA': True}, {'/Parent': {'/DA': True}}]
98:  List [{'/DA': True}, {'/Parent': {'/DA': True}}]
99:  Accessing
99:      Writing
161:  Literal    value: 0
161:      Integer value: 0
0:  Accessing
0:      Writing
1:  Literal    value: 1.3.0
1:      String value: 1.3.0
2:  Accessing
2:      Writing
23:  Comparison Equal __main__ __main__ -> True
23:  Comparison __main__ __main__ -> True
27:  Control flow event
27:  Control-flow enter with condition True
27:     If True
24:  Accessing
24:   Reading
24:  Attribute:  main of <module 'pytest' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pytest/__init__.py'> is <function main at 0x1019fa520>
25:  Literal    value: ['/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/tests/test_dropdown.py']
25:  List ['/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/tests/test_dropdown.py']
26:  Control flow event
26:  Before function call: main (['/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/tests/test_dropdown.py'],) {}
3:  Control flow event
4:  Accessing
4:   Reading
4:      Reading
5:  Accessing
5:   Reading
5:  Attribute:  addoption of <_pytest.config.argparsing.Parser object at 0x102a88d50> is <bound method Parser.addoption of <_pytest.config.argparsing.Parser object at 0x102a88d50>>
6:  Literal    value: --regenerate
6:      String value: --regenerate
7:  Literal    value: store
7:      String value: store
8:  Literal    value: 0
8:      String value: 0
9:  Control flow event
9:  Before function call: addoption ('--regenerate',) {'action': 'store', 'default': '0'}
9:  After function call, result:  None
3:  Control flow event
3:  Exiting function
0:  Control flow event
1:  Literal    value: {}
1:  Dictionary items: []
2:  Accessing
2:      Writing
0:  Control flow event
0:  Exiting function
23:  Comparison Equal test_dropdown __main__ -> False
23:  Comparison test_dropdown __main__ -> False
27:  Control flow event
27:  Control-flow enter with condition False
27:     If False
27:  Control flow event
27:  Control-flow exit
27:  If exit
10:  Control flow event
11:  Literal    value: {}
11:  Dictionary items: []
12:  Accessing
12:      Writing
39:  Control flow event
40:  Accessing
40:   Reading
40:  Attribute:  path of <module 'os' (frozen)> is <module 'posixpath' (frozen)>
41:  Accessing
41:   Reading
41:  Attribute:  join of <module 'posixpath' (frozen)> is <function join at 0x1005505e0>
42:  Accessing
42:   Reading
42:  Attribute:  path of <module 'os' (frozen)> is <module 'posixpath' (frozen)>
43:  Accessing
43:   Reading
43:  Attribute:  dirname of <module 'posixpath' (frozen)> is <function dirname at 0x100550900>
44:  Control flow event
44:  Before function call: dirname ('/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/tests/conftest.py',) {}
44:  After function call, result:  /Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/tests
45:  Literal    value: ..
45:      String value: ..
46:  Literal    value: pdf_samples
46:      String value: pdf_samples
47:  Control flow event
47:  Before function call: join ('/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/tests', '..', 'pdf_samples') {}
47:  After function call, result:  /Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/tests/../pdf_samples
208:  Control flow event
209:  Accessing
209:   Reading
209:  Attribute:  path of <module 'os' (frozen)> is <module 'posixpath' (frozen)>
210:  Accessing
210:   Reading
210:  Attribute:  join of <module 'posixpath' (frozen)> is <function join at 0x1005505e0>
211:  Accessing
211:   Reading
211:      Reading
212:  Literal    value: dropdown
212:      String value: dropdown
213:  Literal    value: sample_template_with_dropdown.pdf
213:      String value: sample_template_with_dropdown.pdf
214:  Control flow event
214:  Before function call: join ('/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/tests/../pdf_samples', 'dropdown', 'sample_template_with_dropdown.pdf') {}
214:  After function call, result:  /Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/tests/../pdf_samples/dropdown/sample_template_with_dropdown.pdf
215:  Literal    value: rb+
215:      String value: rb+
216:  Control flow event
216:  Before function call: open ('/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/tests/../pdf_samples/dropdown/sample_template_with_dropdown.pdf', 'rb+') {}
216:  After function call, result:  <_io.BufferedRandom name='/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/tests/../pdf_samples/dropdown/sample_template_with_dropdown.pdf'>
217:  Accessing
217:   Reading
217:      Reading
218:  Accessing
218:   Reading
218:  Attribute:  read of <_io.BufferedRandom name='/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/tests/../pdf_samples/dropdown/sample_template_with_dropdown.pdf'> is <built-in method 
219:  Control flow event
219:  Before function call: read () {}
219:  After function call, result:  b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Type/XObject/Subt
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Control flow event
2:  Before function call: Wrapper (b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Type/XObject/Sub
0:  Control flow event
1:  Accessing
1:   Reading
1:  Attribute:  fp_or_f_obj_or_stream_to_stream of <module 'PyPDFForm.middleware.adapter' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/middleware/adapter.py'> is <fu
2:  Accessing
2:   Reading
2:      Reading
3:  Control flow event
3:  Before function call: fp_or_f_obj_or_stream_to_stream (b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 
5:  Control flow event
6:  Accessing
6:      Writing
7:  Accessing
7:   Reading
7:      Reading
8:  Control flow event
8:  Before function call: isinstance (b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Type/XObject/
8:  After function call, result:  True
36:  Control flow event
36:  Control-flow enter with condition True
36:     If True
9:  Accessing
9:   Reading
9:      Reading
10:  Accessing
10:      Writing
36:  Control flow event
36:  Control-flow exit
36:  If exit
37:  Accessing
37:   Reading
37:      Reading
3:  After function call, result:  b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Type/XObject/Subt
4:  Accessing
4:      Writing
9:  Accessing
9:   Reading
9:      Reading
10:  Accessing
10:   Reading
10:  Attribute:  stream of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendst
12:  Control flow event
12:  Control-flow enter with condition b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Type/XObject/
12:     If b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12
5:  Accessing
5:   Reading
5:  Attribute:  build_elements of <module 'PyPDFForm.middleware.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/middleware/template.py'> is <function build_el
6:  Accessing
6:   Reading
6:      Reading
7:  Accessing
7:   Reading
7:  Attribute:  stream of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendst
8:  Control flow event
8:  Before function call: build_elements (b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Type/XObj
30:  Control flow event
31:  Literal    value: {}
31:  Dictionary items: []
32:  Accessing
32:      Writing
33:  Accessing
33:   Reading
33:  Attribute:  get_elements_by_page of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_elements_b
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: get_elements_by_page (b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Typ
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Control flow event
2:  Before function call: isinstance (b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Type/XObject/
2:  After function call, result:  True
7:  Control flow event
7:  Control-flow enter with condition True
7:     If True
3:  Accessing
3:   Reading
3:  Attribute:  PdfReader of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.pdfreader.PdfReader'>
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: PdfReader () {'fdata': b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Ty
5:  After function call, result:  {'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0
6:  Accessing
6:      Writing
7:  Control flow event
7:  Control-flow exit
7:  If exit
8:  Literal    value: {}
8:  Dictionary items: []
9:  Accessing
9:      Writing
11:  Accessing
11:   Reading
11:      Reading
12:  Accessing
12:   Reading
12:  Attribute:  pages of {'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612',
13:  Control flow event
13:  Before function call: enumerate ([{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25
13:  After function call, result:  <enumerate object at 0x102fa6390>
53:  Control flow event
53:  Control-flow enter with condition True
53:     For (0, {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25, 0), (30, 0), (35, 0),
14:  Accessing
14:   Reading
14:      Reading
15:  Accessing
15:   Reading
15:  Attribute:  ANNOTATION_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Annots
16:  Accessing
16:   Reading
16:  Slice ['/Annots']
17:  Accessing
17:      Writing
20:  Literal    value: []
20:  List []
21:  Accessing
21:      Writing
18:  Literal    value: 1
18:      Integer value: 1
19:  Binary Operation 0 Add 1 -> 1
19:  Binary Operation 0 1 -> 1
22:  Accessing
22:   Reading
22:      Reading
52:  Control flow event
52:  Control-flow enter with condition [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25, 0), (30, 0), (35, 0), (40, 0)]
52:     If [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25, 0), (30, 0), (35, 0), (40, 0)]
23:  Accessing
23:   Reading
23:      Reading
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '617.707', '238.453', '666.667']), ('/AP', {'/N': (3, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['97.333', '617.707', '238.453', '666.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (3, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '4194304')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Tx')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x102d47c40> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x102d47c40> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Tx -> True
83:  Comparison /Tx /Tx -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [] is <built-in method append of list object at 0x102fd7fc0>
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '500.373', '238.453', '549.333']), ('/AP', {'/N': (5, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['97.333', '500.373', '238.453', '549.333'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (5, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '4194304')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Tx')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1034dc180> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1034dc180> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Tx -> True
83:  Comparison /Tx /Tx -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '387.707', '238.453', '436.667']), ('/AP', {'/N': (7, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['97.333', '387.707', '238.453', '436.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (7, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '4194304')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Tx')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1034dc400> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1034dc400> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Tx -> True
83:  Comparison /Tx /Tx -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', 
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12,
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaD
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '637.253', '306.8', '665.333']), ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '637.253', '306.8', '665.333'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1034dcae0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1034dcae0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(4)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_3_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(check_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/V', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaD
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '637.253', '306.8', '665.333']), ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '637.253', '306.8', '665.333'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1034dc040> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1034dc040> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)',
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/Za
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '520.587', '306.8', '548.667']), ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '520.587', '306.8', '548.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1034dd120> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1034dd120> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(4)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_4_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(check_2)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/V', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (1
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/Za
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '520.587', '306.8', '548.667']), ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '520.587', '306.8', '548.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1034dd6c0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1034dd6c0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/D
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', '/F'
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0),
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '407.92', '306.8', '436']), ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}), ('
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '407.92', '306.8', '436'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1034dda80> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1034dda80> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(4)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_5_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(check_3)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/V', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0)
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '407.92', '306.8', '436']), ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}), ('
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '407.92', '306.8', '436'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1034dde40> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1034dde40> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Ch'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Ch'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Ch'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1034de660> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1034de660> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Btn -> False
83:  Comparison /Ch /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Tx'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Tx'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Tx'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1034dea20> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1034dea20> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1034df240> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1034df240> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/Subtype': '/Widget'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/Subtype': '/Widget'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/Subtype': '/Widget'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/Subtype': '/Widget'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1034df880> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1034df880> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0)
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Ch'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Ch'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Ch'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x103998220> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x103998220> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Btn -> False
83:  Comparison /Ch /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Tx'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Tx'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Tx'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x103998720> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x103998720> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x103998b80> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x103998b80> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/Subtype': '/Widget'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/Subtype': '/Widget'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/Subtype': '/Widget'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/Subtype': '/Widget'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x103999580> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x103999580> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0)
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Ch'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Ch'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Ch'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x103999c60> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x103999c60> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Btn -> False
83:  Comparison /Ch /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Tx'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Tx'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Tx'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x103999e40> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x103999e40> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x10399a840> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x10399a840> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/Subtype': '/Widget'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/Subtype': '/Widget'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/Subtype': '/Widget'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/Subtype': '/Widget'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x10399ae80> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x10399ae80> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0)
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '/MK': {}, '/P'
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['120.667', '301', '314.667', '326'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (41, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 14 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '131072')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Ch')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x10399b380> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x10399b380> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Ch -> False
83:  Comparison /Tx /Ch -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(glgg_oM95)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(dropdown_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Q', '0')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff':
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['120.667', '301', '314.667', '326'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (41, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 14 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '131072')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Ch')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x10399b880> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x10399b880> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Ch -> False
83:  Comparison /Btn /Ch -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(glgg_oM95)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(dropdown_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Q', '0')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['120.667', '301', '314.667', '326'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (41, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 14 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '131072')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Ch')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x10399bd80> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x10399bd80> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Ch -> True
83:  Comparison /Ch /Ch -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H'
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition False
51:     For 
51:  Control flow event
51:  Control-flow exit
51:  For exit
52:  Control flow event
52:  Control-flow exit
52:  If exit
53:  Control flow event
53:  Control-flow enter with condition False
53:     For 
53:  Control flow event
53:  Control-flow exit
53:  For exit
54:  Accessing
54:   Reading
54:      Reading
35:  After function call, result:  {1: [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT
36:  Accessing
36:   Reading
36:  Attribute:  values of {1: [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx'
37:  Control flow event
37:  Before function call: values () {}
37:  After function call, result:  dict_values([[{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '41943
94:  Control flow event
94:  Control-flow enter with condition True
94:     For [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': 
38:  Accessing
38:   Reading
38:      Reading
93:  Control flow event
93:  Control-flow enter with condition True
93:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
39:  Accessing
39:   Reading
39:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
40:  Accessing
40:   Reading
40:      Reading
41:  Control flow event
41:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/F
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '617.707', '238.453', '666.667']), ('/AP', {'/N': (3, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '617.707', '238.453', '666.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (3, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Tx')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_0_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(test_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x10399b6a0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x10399b6a0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (test_1) -> (test_1)
120:  Binary Operation True (test_1) -> (test_1)
122:  Control flow event
122:  Control-flow enter with condition (test_1)
122:     If (test_1)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (test_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (test_1)
144:     If (test_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
41:  After function call, result:  test_1
42:  Accessing
42:      Writing
43:  Accessing
43:   Reading
43:  Attribute:  construct_element of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function construct_element
44:  Accessing
44:   Reading
44:      Reading
45:  Accessing
45:   Reading
45:      Reading
46:  Control flow event
46:  Before function call: construct_element ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304'
161:  Control flow event
162:  Accessing
162:      Writing
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Tx'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '617.707', '238.453', '666.667']), ('/AP', {'/N': (3, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['97.333', '617.707', '238.453', '666.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (3, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '4194304')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Tx')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1041a4540> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1041a4540> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Tx -> True
83:  Comparison /Tx /Tx -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
172:  After function call, result:  True
173:  Binary Operation True And True -> True
173:  Binary Operation True True -> True
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition True
182:     If True
177:  Accessing
177:   Reading
177:      Reading
178:  Accessing
178:   Reading
178:      Reading
179:  Control flow event
179:  Before function call: Text ('test_1',) {}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Text'>, <Text object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Text'>, <Text object>> is <bound method Element.__init__ of <PyPDFForm.middleware.text.Text object at 0x104046910>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('test_1', None) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
6:  Accessing
6:      Writing
7:  Accessing
7:      Writing
8:  Accessing
8:      Writing
9:  Accessing
9:      Writing
10:  Accessing
10:      Writing
11:  Accessing
11:      Writing
12:  Accessing
12:      Writing
13:  Accessing
13:      Writing
14:  Accessing
14:      Writing
0:  Control flow event
0:  Exiting function
179:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x104046910>
180:  Accessing
180:      Writing
181:  Control flow event
181:  Break
184:  Accessing
184:   Reading
184:      Reading
46:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x104046910>
47:  Accessing
47:      Writing
48:  Accessing
48:   Reading
48:      Reading
49:  Comparison IsNot <PyPDFForm.middleware.text.Text object at 0x104046910> None -> True
49:  Comparison <PyPDFForm.middleware.text.Text object at 0x104046910> None -> True
92:  Control flow event
92:  Control-flow enter with condition True
92:     If True
50:  Accessing
50:   Reading
50:      Reading
51:  Control flow event
51:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x104046910>, <class 'PyPDFForm.middleware.text.Text'>) {}
51:  After function call, result:  True
66:  Control flow event
66:  Control-flow enter with condition True
66:     If True
52:  Accessing
52:   Reading
52:  Attribute:  get_text_field_max_length of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_text_
53:  Accessing
53:   Reading
53:      Reading
54:  Control flow event
54:  Before function call: get_text_field_max_length ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '
275:  Control flow event
280:  Accessing
280:   Reading
280:  Attribute:  TEXT_FIELD_MAX_LENGTH_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /MaxLen
281:  Accessing
281:   Reading
281:      Reading
282:  Control flow event
282:  Control-flow enter with condition False
282:     If False
282:  Control flow event
282:  Control-flow exit
282:  If exit
54:  After function call, result:  None
55:  Accessing
55:      Writing
56:  Accessing
56:   Reading
56:      Reading
57:  Accessing
57:   Reading
57:  Attribute:  max_length of <PyPDFForm.middleware.text.Text object at 0x104046910> is None
58:  Comparison IsNot None None -> False
58:  Comparison None None -> False
62:  Binary Operation False And <function build_elements.<locals>.<lambda> at 0x10399ac00> -> False
62:  Binary Operation False <function build_elements.<locals>.<lambda> at 0x10399ac00> -> False
65:  Control flow event
65:  Control-flow enter with condition False
65:     If False
65:  Control flow event
65:  Control-flow exit
65:  If exit
66:  Control flow event
66:  Control-flow exit
66:  If exit
67:  Accessing
67:   Reading
67:      Reading
68:  Control flow event
68:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x104046910>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
68:  After function call, result:  False
73:  Control flow event
73:  Control-flow enter with condition False
73:     If False
73:  Control flow event
73:  Control-flow exit
73:  If exit
74:  Accessing
74:   Reading
74:      Reading
75:  Control flow event
75:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x104046910>, <class 'PyPDFForm.middleware.radio.Radio'>) {}
75:  After function call, result:  False
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Accessing
90:   Reading
90:      Reading
91:  Accessing
91:      Writing
92:  Control flow event
92:  Control-flow exit
92:  If exit
93:  Control flow event
93:  Control-flow enter with condition True
93:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
39:  Accessing
39:   Reading
39:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
40:  Accessing
40:   Reading
40:      Reading
41:  Control flow event
41:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/F
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '500.373', '238.453', '549.333']), ('/AP', {'/N': (5, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '500.373', '238.453', '549.333'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (5, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Tx')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_1_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(test_2)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1041a4a40> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1041a4a40> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (test_2) -> (test_2)
120:  Binary Operation True (test_2) -> (test_2)
122:  Control flow event
122:  Control-flow enter with condition (test_2)
122:     If (test_2)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (test_2)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (test_2)
144:     If (test_2)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
41:  After function call, result:  test_2
42:  Accessing
42:      Writing
43:  Accessing
43:   Reading
43:  Attribute:  construct_element of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function construct_element
44:  Accessing
44:   Reading
44:      Reading
45:  Accessing
45:   Reading
45:      Reading
46:  Control flow event
46:  Before function call: construct_element ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304'
161:  Control flow event
162:  Accessing
162:      Writing
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Tx'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '500.373', '238.453', '549.333']), ('/AP', {'/N': (5, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['97.333', '500.373', '238.453', '549.333'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (5, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '4194304')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Tx')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1041a4cc0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1041a4cc0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Tx -> True
83:  Comparison /Tx /Tx -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
172:  After function call, result:  True
173:  Binary Operation True And True -> True
173:  Binary Operation True True -> True
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition True
182:     If True
177:  Accessing
177:   Reading
177:      Reading
178:  Accessing
178:   Reading
178:      Reading
179:  Control flow event
179:  Before function call: Text ('test_2',) {}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Text'>, <Text object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Text'>, <Text object>> is <bound method Element.__init__ of <PyPDFForm.middleware.text.Text object at 0x103f00390>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('test_2', None) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
6:  Accessing
6:      Writing
7:  Accessing
7:      Writing
8:  Accessing
8:      Writing
9:  Accessing
9:      Writing
10:  Accessing
10:      Writing
11:  Accessing
11:      Writing
12:  Accessing
12:      Writing
13:  Accessing
13:      Writing
14:  Accessing
14:      Writing
0:  Control flow event
0:  Exiting function
179:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x103f00390>
180:  Accessing
180:      Writing
181:  Control flow event
181:  Break
184:  Accessing
184:   Reading
184:      Reading
46:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x103f00390>
47:  Accessing
47:      Writing
48:  Accessing
48:   Reading
48:      Reading
49:  Comparison IsNot <PyPDFForm.middleware.text.Text object at 0x103f00390> None -> True
49:  Comparison <PyPDFForm.middleware.text.Text object at 0x103f00390> None -> True
92:  Control flow event
92:  Control-flow enter with condition True
92:     If True
50:  Accessing
50:   Reading
50:      Reading
51:  Control flow event
51:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x103f00390>, <class 'PyPDFForm.middleware.text.Text'>) {}
51:  After function call, result:  True
66:  Control flow event
66:  Control-flow enter with condition True
66:     If True
52:  Accessing
52:   Reading
52:  Attribute:  get_text_field_max_length of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_text_
53:  Accessing
53:   Reading
53:      Reading
54:  Control flow event
54:  Before function call: get_text_field_max_length ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '
275:  Control flow event
280:  Accessing
280:   Reading
280:  Attribute:  TEXT_FIELD_MAX_LENGTH_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /MaxLen
281:  Accessing
281:   Reading
281:      Reading
282:  Control flow event
282:  Control-flow enter with condition False
282:     If False
282:  Control flow event
282:  Control-flow exit
282:  If exit
54:  After function call, result:  None
55:  Accessing
55:      Writing
56:  Accessing
56:   Reading
56:      Reading
57:  Accessing
57:   Reading
57:  Attribute:  max_length of <PyPDFForm.middleware.text.Text object at 0x103f00390> is None
58:  Comparison IsNot None None -> False
58:  Comparison None None -> False
62:  Binary Operation False And <function build_elements.<locals>.<lambda> at 0x1041a4a40> -> False
62:  Binary Operation False <function build_elements.<locals>.<lambda> at 0x1041a4a40> -> False
65:  Control flow event
65:  Control-flow enter with condition False
65:     If False
65:  Control flow event
65:  Control-flow exit
65:  If exit
66:  Control flow event
66:  Control-flow exit
66:  If exit
67:  Accessing
67:   Reading
67:      Reading
68:  Control flow event
68:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x103f00390>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
68:  After function call, result:  False
73:  Control flow event
73:  Control-flow enter with condition False
73:     If False
73:  Control flow event
73:  Control-flow exit
73:  If exit
74:  Accessing
74:   Reading
74:      Reading
75:  Control flow event
75:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x103f00390>, <class 'PyPDFForm.middleware.radio.Radio'>) {}
75:  After function call, result:  False
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Accessing
90:   Reading
90:      Reading
91:  Accessing
91:      Writing
92:  Control flow event
92:  Control-flow exit
92:  If exit
93:  Control flow event
93:  Control-flow enter with condition True
93:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
39:  Accessing
39:   Reading
39:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
40:  Accessing
40:   Reading
40:      Reading
41:  Control flow event
41:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/F
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '387.707', '238.453', '436.667']), ('/AP', {'/N': (7, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '387.707', '238.453', '436.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (7, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Tx')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_2_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(test_3)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1041a4400> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1041a4400> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (test_3) -> (test_3)
120:  Binary Operation True (test_3) -> (test_3)
122:  Control flow event
122:  Control-flow enter with condition (test_3)
122:     If (test_3)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (test_3)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (test_3)
144:     If (test_3)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
41:  After function call, result:  test_3
42:  Accessing
42:      Writing
43:  Accessing
43:   Reading
43:  Attribute:  construct_element of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function construct_element
44:  Accessing
44:   Reading
44:      Reading
45:  Accessing
45:   Reading
45:      Reading
46:  Control flow event
46:  Before function call: construct_element ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304'
161:  Control flow event
162:  Accessing
162:      Writing
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Tx'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '387.707', '238.453', '436.667']), ('/AP', {'/N': (7, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['97.333', '387.707', '238.453', '436.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (7, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '4194304')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Tx')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1041a5800> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1041a5800> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Tx -> True
83:  Comparison /Tx /Tx -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
172:  After function call, result:  True
173:  Binary Operation True And True -> True
173:  Binary Operation True True -> True
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition True
182:     If True
177:  Accessing
177:   Reading
177:      Reading
178:  Accessing
178:   Reading
178:      Reading
179:  Control flow event
179:  Before function call: Text ('test_3',) {}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Text'>, <Text object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Text'>, <Text object>> is <bound method Element.__init__ of <PyPDFForm.middleware.text.Text object at 0x10426e610>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('test_3', None) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
6:  Accessing
6:      Writing
7:  Accessing
7:      Writing
8:  Accessing
8:      Writing
9:  Accessing
9:      Writing
10:  Accessing
10:      Writing
11:  Accessing
11:      Writing
12:  Accessing
12:      Writing
13:  Accessing
13:      Writing
14:  Accessing
14:      Writing
0:  Control flow event
0:  Exiting function
179:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x10426e610>
180:  Accessing
180:      Writing
181:  Control flow event
181:  Break
184:  Accessing
184:   Reading
184:      Reading
46:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x10426e610>
47:  Accessing
47:      Writing
48:  Accessing
48:   Reading
48:      Reading
49:  Comparison IsNot <PyPDFForm.middleware.text.Text object at 0x10426e610> None -> True
49:  Comparison <PyPDFForm.middleware.text.Text object at 0x10426e610> None -> True
92:  Control flow event
92:  Control-flow enter with condition True
92:     If True
50:  Accessing
50:   Reading
50:      Reading
51:  Control flow event
51:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x10426e610>, <class 'PyPDFForm.middleware.text.Text'>) {}
51:  After function call, result:  True
66:  Control flow event
66:  Control-flow enter with condition True
66:     If True
52:  Accessing
52:   Reading
52:  Attribute:  get_text_field_max_length of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_text_
53:  Accessing
53:   Reading
53:      Reading
54:  Control flow event
54:  Before function call: get_text_field_max_length ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '
275:  Control flow event
280:  Accessing
280:   Reading
280:  Attribute:  TEXT_FIELD_MAX_LENGTH_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /MaxLen
281:  Accessing
281:   Reading
281:      Reading
282:  Control flow event
282:  Control-flow enter with condition False
282:     If False
282:  Control flow event
282:  Control-flow exit
282:  If exit
54:  After function call, result:  None
55:  Accessing
55:      Writing
56:  Accessing
56:   Reading
56:      Reading
57:  Accessing
57:   Reading
57:  Attribute:  max_length of <PyPDFForm.middleware.text.Text object at 0x10426e610> is None
58:  Comparison IsNot None None -> False
58:  Comparison None None -> False
62:  Binary Operation False And <function build_elements.<locals>.<lambda> at 0x1041a4400> -> False
62:  Binary Operation False <function build_elements.<locals>.<lambda> at 0x1041a4400> -> False
65:  Control flow event
65:  Control-flow enter with condition False
65:     If False
65:  Control flow event
65:  Control-flow exit
65:  If exit
66:  Control flow event
66:  Control-flow exit
66:  If exit
67:  Accessing
67:   Reading
67:      Reading
68:  Control flow event
68:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x10426e610>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
68:  After function call, result:  False
73:  Control flow event
73:  Control-flow enter with condition False
73:     If False
73:  Control flow event
73:  Control-flow exit
73:  If exit
74:  Accessing
74:   Reading
74:      Reading
75:  Control flow event
75:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x10426e610>, <class 'PyPDFForm.middleware.radio.Radio'>) {}
75:  After function call, result:  False
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Accessing
90:   Reading
90:      Reading
91:  Accessing
91:      Writing
92:  Control flow event
92:  Control-flow exit
92:  If exit
93:  Control flow event
93:  Control-flow enter with condition True
93:     For {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', 
39:  Accessing
39:   Reading
39:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
40:  Accessing
40:   Reading
40:      Reading
41:  Control flow event
41:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0),
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaD
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '637.253', '306.8', '665.333']), ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['278', '637.253', '306.8', '665.333'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(4)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_3_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(check_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1041a56c0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1041a56c0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (check_1) -> (check_1)
120:  Binary Operation True (check_1) -> (check_1)
122:  Control flow event
122:  Control-flow enter with condition (check_1)
122:     If (check_1)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (check_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (check_1)
144:     If (check_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
41:  After function call, result:  check_1
42:  Accessing
42:      Writing
43:  Accessing
43:   Reading
43:  Attribute:  construct_element of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function construct_element
44:  Accessing
44:   Reading
44:      Reading
45:  Accessing
45:   Reading
45:      Reading
46:  Control flow event
46:  Before function call: construct_element ({'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13,
161:  Control flow event
162:  Accessing
162:      Writing
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Tx'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12,
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaD
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '637.253', '306.8', '665.333']), ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '637.253', '306.8', '665.333'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1041a62a0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1041a62a0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(4)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_3_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(check_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/V', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Btn'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaD
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '637.253', '306.8', '665.333']), ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '637.253', '306.8', '665.333'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1041a6840> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1041a6840> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
172:  After function call, result:  True
173:  Binary Operation True And True -> True
173:  Binary Operation True True -> True
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition True
182:     If True
177:  Accessing
177:   Reading
177:      Reading
178:  Accessing
178:   Reading
178:      Reading
179:  Control flow event
179:  Before function call: Checkbox ('check_1',) {}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Checkbox'>, <Checkbox object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Checkbox'>, <Checkbox object>> is <bound method Element.__init__ of <PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('check_1', None) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
0:  Control flow event
0:  Exiting function
179:  After function call, result:  <PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>
180:  Accessing
180:      Writing
181:  Control flow event
181:  Break
184:  Accessing
184:   Reading
184:      Reading
46:  After function call, result:  <PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>
47:  Accessing
47:      Writing
48:  Accessing
48:   Reading
48:      Reading
49:  Comparison IsNot <PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90> None -> True
49:  Comparison <PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90> None -> True
92:  Control flow event
92:  Control-flow enter with condition True
92:     If True
50:  Accessing
50:   Reading
50:      Reading
51:  Control flow event
51:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>, <class 'PyPDFForm.middleware.text.Text'>) {}
51:  After function call, result:  False
66:  Control flow event
66:  Control-flow enter with condition False
66:     If False
66:  Control flow event
66:  Control-flow exit
66:  If exit
67:  Accessing
67:   Reading
67:      Reading
68:  Control flow event
68:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
68:  After function call, result:  False
73:  Control flow event
73:  Control-flow enter with condition False
73:     If False
73:  Control flow event
73:  Control-flow exit
73:  If exit
74:  Accessing
74:   Reading
74:      Reading
75:  Control flow event
75:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>, <class 'PyPDFForm.middleware.radio.Radio'>) {}
75:  After function call, result:  False
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Accessing
90:   Reading
90:      Reading
91:  Accessing
91:      Writing
92:  Control flow event
92:  Control-flow exit
92:  If exit
93:  Control flow event
93:  Control-flow enter with condition True
93:     For {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)',
39:  Accessing
39:   Reading
39:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
40:  Accessing
40:   Reading
40:      Reading
41:  Control flow event
41:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0)
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/Za
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '520.587', '306.8', '548.667']), ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['278', '520.587', '306.8', '548.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(4)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_4_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(check_2)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1041a6c00> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1041a6c00> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (check_2) -> (check_2)
120:  Binary Operation True (check_2) -> (check_2)
122:  Control flow event
122:  Control-flow enter with condition (check_2)
122:     If (check_2)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (check_2)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (check_2)
144:     If (check_2)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
41:  After function call, result:  check_2
42:  Accessing
42:      Writing
43:  Accessing
43:   Reading
43:  Attribute:  construct_element of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function construct_element
44:  Accessing
44:   Reading
44:      Reading
45:  Accessing
45:   Reading
45:      Reading
46:  Control flow event
46:  Before function call: construct_element ({'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18
161:  Control flow event
162:  Accessing
162:      Writing
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Tx'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/Za
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '520.587', '306.8', '548.667']), ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '520.587', '306.8', '548.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1041a67a0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1041a67a0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(4)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_4_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(check_2)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/V', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Btn'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (1
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/Za
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '520.587', '306.8', '548.667']), ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '520.587', '306.8', '548.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1041a7420> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1041a7420> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
172:  After function call, result:  True
173:  Binary Operation True And True -> True
173:  Binary Operation True True -> True
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition True
182:     If True
177:  Accessing
177:   Reading
177:      Reading
178:  Accessing
178:   Reading
178:      Reading
179:  Control flow event
179:  Before function call: Checkbox ('check_2',) {}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Checkbox'>, <Checkbox object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Checkbox'>, <Checkbox object>> is <bound method Element.__init__ of <PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('check_2', None) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
0:  Control flow event
0:  Exiting function
179:  After function call, result:  <PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>
180:  Accessing
180:      Writing
181:  Control flow event
181:  Break
184:  Accessing
184:   Reading
184:      Reading
46:  After function call, result:  <PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>
47:  Accessing
47:      Writing
48:  Accessing
48:   Reading
48:      Reading
49:  Comparison IsNot <PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10> None -> True
49:  Comparison <PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10> None -> True
92:  Control flow event
92:  Control-flow enter with condition True
92:     If True
50:  Accessing
50:   Reading
50:      Reading
51:  Control flow event
51:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>, <class 'PyPDFForm.middleware.text.Text'>) {}
51:  After function call, result:  False
66:  Control flow event
66:  Control-flow enter with condition False
66:     If False
66:  Control flow event
66:  Control-flow exit
66:  If exit
67:  Accessing
67:   Reading
67:      Reading
68:  Control flow event
68:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
68:  After function call, result:  False
73:  Control flow event
73:  Control-flow enter with condition False
73:     If False
73:  Control flow event
73:  Control-flow exit
73:  If exit
74:  Accessing
74:   Reading
74:      Reading
75:  Control flow event
75:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>, <class 'PyPDFForm.middleware.radio.Radio'>) {}
75:  After function call, result:  False
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Accessing
90:   Reading
90:      Reading
91:  Accessing
91:      Writing
92:  Control flow event
92:  Control-flow exit
92:  If exit
93:  Control flow event
93:  Control-flow enter with condition True
93:     For {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', '/F'
39:  Accessing
39:   Reading
39:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
40:  Accessing
40:   Reading
40:      Reading
41:  Control flow event
41:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}},
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/O
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '407.92', '306.8', '436']), ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}), ('
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['278', '407.92', '306.8', '436'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(4)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_5_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(check_3)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1041a71a0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1041a71a0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (check_3) -> (check_3)
120:  Binary Operation True (check_3) -> (check_3)
122:  Control flow event
122:  Control-flow enter with condition (check_3)
122:     If (check_3)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (check_3)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (check_3)
144:     If (check_3)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
41:  After function call, result:  check_3
42:  Accessing
42:      Writing
43:  Accessing
43:   Reading
43:  Attribute:  construct_element of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function construct_element
44:  Accessing
44:   Reading
44:      Reading
45:  Accessing
45:   Reading
45:      Reading
46:  Control flow event
46:  Before function call: construct_element ({'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}
161:  Control flow event
162:  Accessing
162:      Writing
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Tx'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0),
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '407.92', '306.8', '436']), ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}), ('
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '407.92', '306.8', '436'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1041a7ec0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1041a7ec0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(4)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_5_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(check_3)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/V', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Btn'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0)
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '407.92', '306.8', '436']), ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}), ('
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '407.92', '306.8', '436'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x10455c2c0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x10455c2c0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
172:  After function call, result:  True
173:  Binary Operation True And True -> True
173:  Binary Operation True True -> True
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition True
182:     If True
177:  Accessing
177:   Reading
177:      Reading
178:  Accessing
178:   Reading
178:      Reading
179:  Control flow event
179:  Before function call: Checkbox ('check_3',) {}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Checkbox'>, <Checkbox object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Checkbox'>, <Checkbox object>> is <bound method Element.__init__ of <PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('check_3', None) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
0:  Control flow event
0:  Exiting function
179:  After function call, result:  <PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>
180:  Accessing
180:      Writing
181:  Control flow event
181:  Break
184:  Accessing
184:   Reading
184:      Reading
46:  After function call, result:  <PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>
47:  Accessing
47:      Writing
48:  Accessing
48:   Reading
48:      Reading
49:  Comparison IsNot <PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010> None -> True
49:  Comparison <PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010> None -> True
92:  Control flow event
92:  Control-flow enter with condition True
92:     If True
50:  Accessing
50:   Reading
50:      Reading
51:  Control flow event
51:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>, <class 'PyPDFForm.middleware.text.Text'>) {}
51:  After function call, result:  False
66:  Control flow event
66:  Control-flow enter with condition False
66:     If False
66:  Control flow event
66:  Control-flow exit
66:  If exit
67:  Accessing
67:   Reading
67:      Reading
68:  Control flow event
68:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
68:  After function call, result:  False
73:  Control flow event
73:  Control-flow enter with condition False
73:     If False
73:  Control flow event
73:  Control-flow exit
73:  If exit
74:  Accessing
74:   Reading
74:      Reading
75:  Control flow event
75:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>, <class 'PyPDFForm.middleware.radio.Radio'>) {}
75:  After function call, result:  False
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Accessing
90:   Reading
90:      Reading
91:  Accessing
91:      Writing
92:  Control flow event
92:  Control-flow exit
92:  If exit
93:  Control flow event
93:  Control-flow enter with condition True
93:     For {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
39:  Accessing
39:   Reading
39:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
40:  Accessing
40:   Reading
40:      Reading
41:  Control flow event
41:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0)
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(l)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_6_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AS', '/Off')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition False
128:     For 
128:  Control flow event
128:  Control-flow exit
128:  For exit
134:  After function call, result:  None
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition None
144:     If None
144:  Control flow event
144:  Control-flow exit
144:  If exit
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/Parent': {'/T': True}}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/Parent': {'/T': True}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Parent']
103:  Control flow event
103:  Before function call: isinstance ({'/T': True}, <class 'dict'>) {}
103:  After function call, result:  True
104:  Accessing
104:   Reading
104:      Reading
105:  Accessing
105:   Reading
105:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
106:  Control flow event
106:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
106:  After function call, result:  True
107:  Binary Operation True And True -> True
107:  Binary Operation True True -> True
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
108:  Accessing
108:   Reading
108:      Reading
109:  Accessing
109:   Reading
109:      Reading
110:  Accessing
110:   Reading
110:      Reading
111:  Accessing
111:   Reading
111:  Slice ['/Parent']
112:  Accessing
112:   Reading
112:      Reading
113:  Control flow event
113:  Before function call: traverse_pattern ({'/T': True}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': 
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '49152')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_7_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(radio_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x10455ca40> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x10455ca40> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (radio_1) -> (radio_1)
120:  Binary Operation True (radio_1) -> (radio_1)
122:  Control flow event
122:  Control-flow enter with condition (radio_1)
122:     If (radio_1)
121:  Accessing
121:   Reading
121:      Reading
113:  After function call, result:  (radio_1)
114:  Accessing
114:      Writing
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition (radio_1)
127:     If (radio_1)
126:  Accessing
126:   Reading
126:      Reading
134:  After function call, result:  (radio_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (radio_1)
144:     If (radio_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
41:  After function call, result:  radio_1
42:  Accessing
42:      Writing
43:  Accessing
43:   Reading
43:  Attribute:  construct_element of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function construct_element
44:  Accessing
44:   Reading
44:      Reading
45:  Accessing
45:   Reading
45:      Reading
46:  Control flow event
46:  Before function call: construct_element ({'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 
161:  Control flow event
162:  Accessing
162:      Writing
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Tx'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Btn'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Ch'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/Parent': {'/FT': '/Ch'}}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Ch'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Ch'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x10455c900> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x10455c900> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Btn -> False
83:  Comparison /Ch /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/Parent': {'/FT': '/Tx'}}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Tx'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Tx'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x10455db20> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x10455db20> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/Parent': {'/FT': '/Btn'}}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x10455e020> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x10455e020> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
172:  After function call, result:  True
173:  Binary Operation True And True -> True
173:  Binary Operation True True -> True
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/Parent': {'/Subtype': '/Widget'}}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/Parent': {'/Subtype': '/Widget'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/Subtype': '/Widget'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/Subtype': '/Widget'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/Parent': {'/FT': '/Btn'}}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x10455e660> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x10455e660> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
172:  After function call, result:  True
173:  Binary Operation True And True -> True
173:  Binary Operation True True -> True
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition True
182:     If True
177:  Accessing
177:   Reading
177:      Reading
178:  Accessing
178:   Reading
178:      Reading
179:  Control flow event
179:  Before function call: Radio ('radio_1',) {}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Radio'>, <Radio object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Radio'>, <Radio object>> is <bound method Element.__init__ of <PyPDFForm.middleware.radio.Radio object at 0x1047c1790>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('radio_1', None) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
6:  Literal    value: 0
6:      Integer value: 0
7:  Accessing
7:      Writing
0:  Control flow event
0:  Exiting function
179:  After function call, result:  <PyPDFForm.middleware.radio.Radio object at 0x1047c1790>
180:  Accessing
180:      Writing
181:  Control flow event
181:  Break
184:  Accessing
184:   Reading
184:      Reading
46:  After function call, result:  <PyPDFForm.middleware.radio.Radio object at 0x1047c1790>
47:  Accessing
47:      Writing
48:  Accessing
48:   Reading
48:      Reading
49:  Comparison IsNot <PyPDFForm.middleware.radio.Radio object at 0x1047c1790> None -> True
49:  Comparison <PyPDFForm.middleware.radio.Radio object at 0x1047c1790> None -> True
92:  Control flow event
92:  Control-flow enter with condition True
92:     If True
50:  Accessing
50:   Reading
50:      Reading
51:  Control flow event
51:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.text.Text'>) {}
51:  After function call, result:  False
66:  Control flow event
66:  Control-flow enter with condition False
66:     If False
66:  Control flow event
66:  Control-flow exit
66:  If exit
67:  Accessing
67:   Reading
67:      Reading
68:  Control flow event
68:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
68:  After function call, result:  False
73:  Control flow event
73:  Control-flow enter with condition False
73:     If False
73:  Control flow event
73:  Control-flow exit
73:  If exit
74:  Accessing
74:   Reading
74:      Reading
75:  Control flow event
75:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.radio.Radio'>) {}
75:  After function call, result:  True
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
76:  Accessing
76:   Reading
76:      Reading
77:  Accessing
77:   Reading
77:      Reading
78:  Comparison NotIn radio_1 {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x103f00390>, 'test_3': <PyPDFForm.middleware.text.Text
78:  Comparison radio_1 {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x103f00390>, 'test_3': <PyPDFForm.middleware.text.Text objec
81:  Control flow event
81:  Control-flow enter with condition True
81:     If True
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:      Writing
81:  Control flow event
81:  Control-flow exit
81:  If exit
86:  Literal    value: 1
86:      Integer value: 1
87:  Binary Operation <function build_elements.<locals>.<lambda> at 0x10455e700> Add 1 -> None
87:  Binary Operation <function build_elements.<locals>.<lambda> at 0x10455e700> 1 -> None
87:  Accessing
87:      Writing
87:  Augmented assignment <function build_elements.<locals>.<lambda> at 0x10455e700> AddAssign 1
87:  Augmented assignment <function build_elements.<locals>.<lambda> at 0x10455e700> 1
88:  Control flow event
88:  Continue
93:  Control flow event
93:  Control-flow enter with condition True
93:     For {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
39:  Accessing
39:   Reading
39:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
40:  Accessing
40:   Reading
40:      Reading
41:  Control flow event
41:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0)
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(l)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_8_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AS', '/Off')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition False
128:     For 
128:  Control flow event
128:  Control-flow exit
128:  For exit
134:  After function call, result:  None
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition None
144:     If None
144:  Control flow event
144:  Control-flow exit
144:  If exit
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/Parent': {'/T': True}}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/Parent': {'/T': True}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Parent']
103:  Control flow event
103:  Before function call: isinstance ({'/T': True}, <class 'dict'>) {}
103:  After function call, result:  True
104:  Accessing
104:   Reading
104:      Reading
105:  Accessing
105:   Reading
105:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
106:  Control flow event
106:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
106:  After function call, result:  True
107:  Binary Operation True And True -> True
107:  Binary Operation True True -> True
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
108:  Accessing
108:   Reading
108:      Reading
109:  Accessing
109:   Reading
109:      Reading
110:  Accessing
110:   Reading
110:      Reading
111:  Accessing
111:   Reading
111:  Slice ['/Parent']
112:  Accessing
112:   Reading
112:      Reading
113:  Control flow event
113:  Before function call: traverse_pattern ({'/T': True}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': 
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '49152')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_7_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(radio_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x10455eca0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x10455eca0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (radio_1) -> (radio_1)
120:  Binary Operation True (radio_1) -> (radio_1)
122:  Control flow event
122:  Control-flow enter with condition (radio_1)
122:     If (radio_1)
121:  Accessing
121:   Reading
121:      Reading
113:  After function call, result:  (radio_1)
114:  Accessing
114:      Writing
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition (radio_1)
127:     If (radio_1)
126:  Accessing
126:   Reading
126:      Reading
134:  After function call, result:  (radio_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (radio_1)
144:     If (radio_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
41:  After function call, result:  radio_1
42:  Accessing
42:      Writing
43:  Accessing
43:   Reading
43:  Attribute:  construct_element of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function construct_element
44:  Accessing
44:   Reading
44:      Reading
45:  Accessing
45:   Reading
45:      Reading
46:  Control flow event
46:  Before function call: construct_element ({'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 
161:  Control flow event
162:  Accessing
162:      Writing
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Tx'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Btn'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Ch'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/Parent': {'/FT': '/Ch'}}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Ch'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Ch'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x10455f6a0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x10455f6a0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Btn -> False
83:  Comparison /Ch /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/Parent': {'/FT': '/Tx'}}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Tx'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Tx'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x10455f880> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x10455f880> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/Parent': {'/FT': '/Btn'}}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x10455f240> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x10455f240> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
172:  After function call, result:  True
173:  Binary Operation True And True -> True
173:  Binary Operation True True -> True
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/Parent': {'/Subtype': '/Widget'}}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/Parent': {'/Subtype': '/Widget'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/Subtype': '/Widget'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/Subtype': '/Widget'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/Parent': {'/FT': '/Btn'}}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x10455fb00> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x10455fb00> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
172:  After function call, result:  True
173:  Binary Operation True And True -> True
173:  Binary Operation True True -> True
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition True
182:     If True
177:  Accessing
177:   Reading
177:      Reading
178:  Accessing
178:   Reading
178:      Reading
179:  Control flow event
179:  Before function call: Radio ('radio_1',) {}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Radio'>, <Radio object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Radio'>, <Radio object>> is <bound method Element.__init__ of <PyPDFForm.middleware.radio.Radio object at 0x1072598d0>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('radio_1', None) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
6:  Literal    value: 0
6:      Integer value: 0
7:  Accessing
7:      Writing
0:  Control flow event
0:  Exiting function
179:  After function call, result:  <PyPDFForm.middleware.radio.Radio object at 0x1072598d0>
180:  Accessing
180:      Writing
181:  Control flow event
181:  Break
184:  Accessing
184:   Reading
184:      Reading
46:  After function call, result:  <PyPDFForm.middleware.radio.Radio object at 0x1072598d0>
47:  Accessing
47:      Writing
48:  Accessing
48:   Reading
48:      Reading
49:  Comparison IsNot <PyPDFForm.middleware.radio.Radio object at 0x1072598d0> None -> True
49:  Comparison <PyPDFForm.middleware.radio.Radio object at 0x1072598d0> None -> True
92:  Control flow event
92:  Control-flow enter with condition True
92:     If True
50:  Accessing
50:   Reading
50:      Reading
51:  Control flow event
51:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1072598d0>, <class 'PyPDFForm.middleware.text.Text'>) {}
51:  After function call, result:  False
66:  Control flow event
66:  Control-flow enter with condition False
66:     If False
66:  Control flow event
66:  Control-flow exit
66:  If exit
67:  Accessing
67:   Reading
67:      Reading
68:  Control flow event
68:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1072598d0>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
68:  After function call, result:  False
73:  Control flow event
73:  Control-flow enter with condition False
73:     If False
73:  Control flow event
73:  Control-flow exit
73:  If exit
74:  Accessing
74:   Reading
74:      Reading
75:  Control flow event
75:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1072598d0>, <class 'PyPDFForm.middleware.radio.Radio'>) {}
75:  After function call, result:  True
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
76:  Accessing
76:   Reading
76:      Reading
77:  Accessing
77:   Reading
77:      Reading
78:  Comparison NotIn radio_1 {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x103f00390>, 'test_3': <PyPDFForm.middleware.text.Text
78:  Comparison radio_1 {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x103f00390>, 'test_3': <PyPDFForm.middleware.text.Text objec
81:  Control flow event
81:  Control-flow enter with condition False
81:     If False
81:  Control flow event
81:  Control-flow exit
81:  If exit
86:  Literal    value: 1
86:      Integer value: 1
87:  Binary Operation <function build_elements.<locals>.<lambda> at 0x10455fe20> Add 1 -> None
87:  Binary Operation <function build_elements.<locals>.<lambda> at 0x10455fe20> 1 -> None
87:  Accessing
87:      Writing
87:  Augmented assignment <function build_elements.<locals>.<lambda> at 0x10455fe20> AddAssign 1
87:  Augmented assignment <function build_elements.<locals>.<lambda> at 0x10455fe20> 1
88:  Control flow event
88:  Continue
93:  Control flow event
93:  Control-flow enter with condition True
93:     For {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
39:  Accessing
39:   Reading
39:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
40:  Accessing
40:   Reading
40:      Reading
41:  Control flow event
41:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0)
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(l)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_9_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AS', '/Off')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition False
128:     For 
128:  Control flow event
128:  Control-flow exit
128:  For exit
134:  After function call, result:  None
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition None
144:     If None
144:  Control flow event
144:  Control-flow exit
144:  If exit
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/Parent': {'/T': True}}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/Parent': {'/T': True}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Parent']
103:  Control flow event
103:  Before function call: isinstance ({'/T': True}, <class 'dict'>) {}
103:  After function call, result:  True
104:  Accessing
104:   Reading
104:      Reading
105:  Accessing
105:   Reading
105:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
106:  Control flow event
106:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
106:  After function call, result:  True
107:  Binary Operation True And True -> True
107:  Binary Operation True True -> True
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
108:  Accessing
108:   Reading
108:      Reading
109:  Accessing
109:   Reading
109:      Reading
110:  Accessing
110:   Reading
110:      Reading
111:  Accessing
111:   Reading
111:  Slice ['/Parent']
112:  Accessing
112:   Reading
112:      Reading
113:  Control flow event
113:  Before function call: traverse_pattern ({'/T': True}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': 
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '49152')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_7_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(radio_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1071fd260> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1071fd260> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (radio_1) -> (radio_1)
120:  Binary Operation True (radio_1) -> (radio_1)
122:  Control flow event
122:  Control-flow enter with condition (radio_1)
122:     If (radio_1)
121:  Accessing
121:   Reading
121:      Reading
113:  After function call, result:  (radio_1)
114:  Accessing
114:      Writing
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition (radio_1)
127:     If (radio_1)
126:  Accessing
126:   Reading
126:      Reading
134:  After function call, result:  (radio_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (radio_1)
144:     If (radio_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
41:  After function call, result:  radio_1
42:  Accessing
42:      Writing
43:  Accessing
43:   Reading
43:  Attribute:  construct_element of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function construct_element
44:  Accessing
44:   Reading
44:      Reading
45:  Accessing
45:   Reading
45:      Reading
46:  Control flow event
46:  Before function call: construct_element ({'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 
161:  Control flow event
162:  Accessing
162:      Writing
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Tx'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Btn'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Ch'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/Parent': {'/FT': '/Ch'}}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Ch'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Ch'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1071fd080> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1071fd080> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Btn -> False
83:  Comparison /Ch /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/Parent': {'/FT': '/Tx'}}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Tx'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Tx'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1071fe020> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1071fe020> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/Parent': {'/FT': '/Btn'}}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1071fdc60> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1071fdc60> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
172:  After function call, result:  True
173:  Binary Operation True And True -> True
173:  Binary Operation True True -> True
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/Parent': {'/Subtype': '/Widget'}}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/Parent': {'/Subtype': '/Widget'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/Subtype': '/Widget'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/Subtype': '/Widget'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/Parent': {'/FT': '/Btn'}}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1071fee80> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1071fee80> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
172:  After function call, result:  True
173:  Binary Operation True And True -> True
173:  Binary Operation True True -> True
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition True
182:     If True
177:  Accessing
177:   Reading
177:      Reading
178:  Accessing
178:   Reading
178:      Reading
179:  Control flow event
179:  Before function call: Radio ('radio_1',) {}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Radio'>, <Radio object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Radio'>, <Radio object>> is <bound method Element.__init__ of <PyPDFForm.middleware.radio.Radio object at 0x1076cf310>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('radio_1', None) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
6:  Literal    value: 0
6:      Integer value: 0
7:  Accessing
7:      Writing
0:  Control flow event
0:  Exiting function
179:  After function call, result:  <PyPDFForm.middleware.radio.Radio object at 0x1076cf310>
180:  Accessing
180:      Writing
181:  Control flow event
181:  Break
184:  Accessing
184:   Reading
184:      Reading
46:  After function call, result:  <PyPDFForm.middleware.radio.Radio object at 0x1076cf310>
47:  Accessing
47:      Writing
48:  Accessing
48:   Reading
48:      Reading
49:  Comparison IsNot <PyPDFForm.middleware.radio.Radio object at 0x1076cf310> None -> True
49:  Comparison <PyPDFForm.middleware.radio.Radio object at 0x1076cf310> None -> True
92:  Control flow event
92:  Control-flow enter with condition True
92:     If True
50:  Accessing
50:   Reading
50:      Reading
51:  Control flow event
51:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1076cf310>, <class 'PyPDFForm.middleware.text.Text'>) {}
51:  After function call, result:  False
66:  Control flow event
66:  Control-flow enter with condition False
66:     If False
66:  Control flow event
66:  Control-flow exit
66:  If exit
67:  Accessing
67:   Reading
67:      Reading
68:  Control flow event
68:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1076cf310>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
68:  After function call, result:  False
73:  Control flow event
73:  Control-flow enter with condition False
73:     If False
73:  Control flow event
73:  Control-flow exit
73:  If exit
74:  Accessing
74:   Reading
74:      Reading
75:  Control flow event
75:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1076cf310>, <class 'PyPDFForm.middleware.radio.Radio'>) {}
75:  After function call, result:  True
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
76:  Accessing
76:   Reading
76:      Reading
77:  Accessing
77:   Reading
77:      Reading
78:  Comparison NotIn radio_1 {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x103f00390>, 'test_3': <PyPDFForm.middleware.text.Text
78:  Comparison radio_1 {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x103f00390>, 'test_3': <PyPDFForm.middleware.text.Text objec
81:  Control flow event
81:  Control-flow enter with condition False
81:     If False
81:  Control flow event
81:  Control-flow exit
81:  If exit
86:  Literal    value: 1
86:      Integer value: 1
87:  Binary Operation <function build_elements.<locals>.<lambda> at 0x1071fef20> Add 1 -> None
87:  Binary Operation <function build_elements.<locals>.<lambda> at 0x1071fef20> 1 -> None
87:  Accessing
87:      Writing
87:  Augmented assignment <function build_elements.<locals>.<lambda> at 0x1071fef20> AddAssign 1
87:  Augmented assignment <function build_elements.<locals>.<lambda> at 0x1071fef20> 1
88:  Control flow event
88:  Continue
93:  Control flow event
93:  Control-flow enter with condition True
93:     For {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '/MK': {}, '/P'
39:  Accessing
39:   Reading
39:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
40:  Accessing
40:   Reading
40:      Reading
41:  Control flow event
41:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['120.667', '301', '314.667', '326'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (41, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 14 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '131072')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Ch')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(glgg_oM95)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(dropdown_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1071ff060> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1071ff060> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (dropdown_1) -> (dropdown_1)
120:  Binary Operation True (dropdown_1) -> (dropdown_1)
122:  Control flow event
122:  Control-flow enter with condition (dropdown_1)
122:     If (dropdown_1)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (dropdown_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (dropdown_1)
144:     If (dropdown_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
41:  After function call, result:  dropdown_1
42:  Accessing
42:      Writing
43:  Accessing
43:   Reading
43:  Attribute:  construct_element of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function construct_element
44:  Accessing
44:   Reading
44:      Reading
45:  Accessing
45:   Reading
45:      Reading
46:  Control flow event
46:  Before function call: construct_element ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': 
161:  Control flow event
162:  Accessing
162:      Writing
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Tx'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['120.667', '301', '314.667', '326'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (41, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 14 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '131072')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Ch')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1071ff920> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1071ff920> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Ch -> False
83:  Comparison /Tx /Ch -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(glgg_oM95)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(dropdown_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Q', '0')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Btn'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff':
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['120.667', '301', '314.667', '326'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (41, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 14 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '131072')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Ch')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1071fe3e0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1071fe3e0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Ch -> False
83:  Comparison /Btn /Ch -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(glgg_oM95)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(dropdown_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Q', '0')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
172:  After function call, result:  False
173:  Binary Operation True And False -> False
173:  Binary Operation True False -> False
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition False
182:     If False
182:  Control flow event
182:  Control-flow exit
182:  If exit
183:  Control flow event
183:  Control-flow enter with condition True
183:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
163:  Accessing
163:   Reading
163:      Reading
164:  Accessing
164:      Writing
165:  Literal    value: True
165:      Boolean value: True
166:  Accessing
166:      Writing
167:  Accessing
167:   Reading
167:      Reading
175:  Control flow event
175:  Control-flow enter with condition True
175:     For {'/FT': '/Ch'}
168:  Accessing
168:   Reading
168:      Reading
169:  Accessing
169:   Reading
169:      Reading
170:  Accessing
170:   Reading
170:      Reading
171:  Accessing
171:   Reading
171:      Reading
172:  Control flow event
172:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['120.667', '301', '314.667', '326'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (41, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 14 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '131072')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Ch')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1071ffe20> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1071ffe20> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Ch -> True
83:  Comparison /Ch /Ch -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
172:  After function call, result:  True
173:  Binary Operation True And True -> True
173:  Binary Operation True True -> True
174:  Accessing
174:      Writing
175:  Control flow event
175:  Control-flow enter with condition False
175:     For 
175:  Control flow event
175:  Control-flow exit
175:  For exit
176:  Accessing
176:   Reading
176:      Reading
182:  Control flow event
182:  Control-flow enter with condition True
182:     If True
177:  Accessing
177:   Reading
177:      Reading
178:  Accessing
178:   Reading
178:      Reading
179:  Control flow event
179:  Before function call: Dropdown ('dropdown_1',) {}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Dropdown'>, <Dropdown object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Dropdown'>, <Dropdown object>> is <bound method Element.__init__ of <PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('dropdown_1', None) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
6:  Accessing
6:      Writing
0:  Control flow event
0:  Exiting function
179:  After function call, result:  <PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50>
180:  Accessing
180:      Writing
181:  Control flow event
181:  Break
184:  Accessing
184:   Reading
184:      Reading
46:  After function call, result:  <PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50>
47:  Accessing
47:      Writing
48:  Accessing
48:   Reading
48:      Reading
49:  Comparison IsNot <PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50> None -> True
49:  Comparison <PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50> None -> True
92:  Control flow event
92:  Control-flow enter with condition True
92:     If True
50:  Accessing
50:   Reading
50:      Reading
51:  Control flow event
51:  Before function call: isinstance (<PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50>, <class 'PyPDFForm.middleware.text.Text'>) {}
51:  After function call, result:  False
66:  Control flow event
66:  Control-flow enter with condition False
66:     If False
66:  Control flow event
66:  Control-flow exit
66:  If exit
67:  Accessing
67:   Reading
67:      Reading
68:  Control flow event
68:  Before function call: isinstance (<PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
68:  After function call, result:  True
73:  Control flow event
73:  Control-flow enter with condition True
73:     If True
69:  Accessing
69:   Reading
69:  Attribute:  get_dropdown_choices of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_dropdown_c
70:  Accessing
70:   Reading
70:      Reading
71:  Control flow event
71:  Before function call: get_dropdown_choices ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT
326:  Control flow event
327:  Accessing
327:      Writing
355:  Control flow event
355:  Control-flow enter with condition True
355:     For {'/Opt': True}
328:  Accessing
328:   Reading
328:      Reading
329:  Accessing
329:   Reading
329:      Reading
330:  Accessing
330:   Reading
330:      Reading
331:  Control flow event
331:  Before function call: traverse_pattern ({'/Opt': True}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '1
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['120.667', '301', '314.667', '326'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (41, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 14 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '131072')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Ch')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(glgg_oM95)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(dropdown_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Opt', [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Opt']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1078e0720> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1078e0720> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/Opt']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )'] -> [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )']
120:  Binary Operation True [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )'] -> [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )']
122:  Control flow event
122:  Control-flow enter with condition [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )']
122:     If [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )']
121:  Accessing
121:   Reading
121:      Reading
331:  After function call, result:  [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )']
332:  Accessing
332:      Writing
333:  Accessing
333:   Reading
333:      Reading
354:  Control flow event
354:  Control-flow enter with condition [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )']
354:     If [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )']
350:  Accessing
350:   Reading
350:      Reading
351:  Control flow event
351:  Control-flow enter with condition True
351:     For ['(foo)', '(foo)']
335:  Accessing
335:   Reading
335:      Reading
336:  Control flow event
336:  Before function call: isinstance (['(foo)', '(foo)'], <class 'str'>) {}
336:  After function call, result:  False
341:  Control flow event
341:  Control-flow enter with condition False
341:     If False
337:  Accessing
337:   Reading
337:      Reading
338:  Literal    value: 1
338:      Integer value: 1
339:  Accessing
339:   Reading
339:  Slice [1]
340:  Control flow event
340:  Before function call: str ('(foo)',) {}
340:  After function call, result:  (foo)
341:  Control flow event
341:  Control-flow exit
341:  If exit
342:  Accessing
342:   Reading
342:  Attribute:  replace of (foo) is <built-in method replace of str object at 0x102fbc0f0>
343:  Literal    value: (
343:      String value: (
344:  Literal    value: 
344:      String value: 
345:  Control flow event
345:  Before function call: replace ('(', '') {}
345:  After function call, result:  foo)
346:  Accessing
346:   Reading
346:  Attribute:  replace of foo) is <built-in method replace of str object at 0x103f15cb0>
347:  Literal    value: )
347:      String value: )
348:  Literal    value: 
348:      String value: 
349:  Control flow event
349:  Before function call: replace (')', '') {}
349:  After function call, result:  foo
351:  Control flow event
351:  Control-flow enter with condition True
351:     For ['(bar)', '(bar)']
335:  Accessing
335:   Reading
335:      Reading
336:  Control flow event
336:  Before function call: isinstance (['(bar)', '(bar)'], <class 'str'>) {}
336:  After function call, result:  False
341:  Control flow event
341:  Control-flow enter with condition False
341:     If False
337:  Accessing
337:   Reading
337:      Reading
338:  Literal    value: 1
338:      Integer value: 1
339:  Accessing
339:   Reading
339:  Slice [1]
340:  Control flow event
340:  Before function call: str ('(bar)',) {}
340:  After function call, result:  (bar)
341:  Control flow event
341:  Control-flow exit
341:  If exit
342:  Accessing
342:   Reading
342:  Attribute:  replace of (bar) is <built-in method replace of str object at 0x102fb5830>
343:  Literal    value: (
343:      String value: (
344:  Literal    value: 
344:      String value: 
345:  Control flow event
345:  Before function call: replace ('(', '') {}
345:  After function call, result:  bar)
346:  Accessing
346:   Reading
346:  Attribute:  replace of bar) is <built-in method replace of str object at 0x103f15cb0>
347:  Literal    value: )
347:      String value: )
348:  Literal    value: 
348:      String value: 
349:  Control flow event
349:  Before function call: replace (')', '') {}
349:  After function call, result:  bar
351:  Control flow event
351:  Control-flow enter with condition True
351:     For ['(foobar)', '(foobar)']
335:  Accessing
335:   Reading
335:      Reading
336:  Control flow event
336:  Before function call: isinstance (['(foobar)', '(foobar)'], <class 'str'>) {}
336:  After function call, result:  False
341:  Control flow event
341:  Control-flow enter with condition False
341:     If False
337:  Accessing
337:   Reading
337:      Reading
338:  Literal    value: 1
338:      Integer value: 1
339:  Accessing
339:   Reading
339:  Slice [1]
340:  Control flow event
340:  Before function call: str ('(foobar)',) {}
340:  After function call, result:  (foobar)
341:  Control flow event
341:  Control-flow exit
341:  If exit
342:  Accessing
342:   Reading
342:  Attribute:  replace of (foobar) is <built-in method replace of str object at 0x102fb55b0>
343:  Literal    value: (
343:      String value: (
344:  Literal    value: 
344:      String value: 
345:  Control flow event
345:  Before function call: replace ('(', '') {}
345:  After function call, result:  foobar)
346:  Accessing
346:   Reading
346:  Attribute:  replace of foobar) is <built-in method replace of str object at 0x103f15cb0>
347:  Literal    value: )
347:      String value: )
348:  Literal    value: 
348:      String value: 
349:  Control flow event
349:  Before function call: replace (')', '') {}
349:  After function call, result:  foobar
351:  Control flow event
351:  Control-flow enter with condition True
351:     For ( )
335:  Accessing
335:   Reading
335:      Reading
336:  Control flow event
336:  Before function call: isinstance ('( )', <class 'str'>) {}
336:  After function call, result:  True
341:  Control flow event
341:  Control-flow enter with condition True
341:     If True
334:  Accessing
334:   Reading
334:      Reading
341:  Control flow event
341:  Control-flow exit
341:  If exit
342:  Accessing
342:   Reading
342:  Attribute:  replace of ( ) is <built-in method replace of PdfString object at 0x102f13f50>
343:  Literal    value: (
343:      String value: (
344:  Literal    value: 
344:      String value: 
345:  Control flow event
345:  Before function call: replace ('(', '') {}
345:  After function call, result:   )
346:  Accessing
346:   Reading
346:  Attribute:  replace of  ) is <built-in method replace of str object at 0x102d024f0>
347:  Literal    value: )
347:      String value: )
348:  Literal    value: 
348:      String value: 
349:  Control flow event
349:  Before function call: replace (')', '') {}
349:  After function call, result:   
351:  Control flow event
351:  Control-flow enter with condition False
351:     For 
351:  Control flow event
351:  Control-flow exit
351:  For exit
352:  Control flow event
352:  After function call, result:  ('foo', 'bar', 'foobar', ' ')
353:  Accessing
353:      Writing
354:  Control flow event
354:  Control-flow exit
354:  If exit
355:  Control flow event
355:  Control-flow enter with condition True
355:     For {'/Parent': {'/Opt': True}}
328:  Accessing
328:   Reading
328:      Reading
329:  Accessing
329:   Reading
329:      Reading
330:  Accessing
330:   Reading
330:      Reading
331:  Control flow event
331:  Before function call: traverse_pattern ({'/Parent': {'/Opt': True}}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['120.667', '301', '314.667', '326'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (41, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 14 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '131072')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Ch')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(glgg_oM95)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(dropdown_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Opt', [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Q', '0')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition False
128:     For 
128:  Control flow event
128:  Control-flow exit
128:  For exit
331:  After function call, result:  None
332:  Accessing
332:      Writing
333:  Accessing
333:   Reading
333:      Reading
354:  Control flow event
354:  Control-flow enter with condition None
354:     If None
354:  Control flow event
354:  Control-flow exit
354:  If exit
355:  Control flow event
355:  Control-flow enter with condition False
355:     For 
355:  Control flow event
355:  Control-flow exit
355:  For exit
356:  Accessing
356:   Reading
356:      Reading
71:  After function call, result:  ('foo', 'bar', 'foobar', ' ')
72:  Accessing
72:      Writing
73:  Control flow event
73:  Control-flow exit
73:  If exit
74:  Accessing
74:   Reading
74:      Reading
75:  Control flow event
75:  Before function call: isinstance (<PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50>, <class 'PyPDFForm.middleware.radio.Radio'>) {}
75:  After function call, result:  False
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Accessing
90:   Reading
90:      Reading
91:  Accessing
91:      Writing
92:  Control flow event
92:  Control-flow exit
92:  If exit
93:  Control flow event
93:  Control-flow enter with condition False
93:     For 
93:  Control flow event
93:  Control-flow exit
93:  For exit
94:  Control flow event
94:  Control-flow enter with condition False
94:     For 
94:  Control flow event
94:  Control-flow exit
94:  For exit
95:  Accessing
95:   Reading
95:      Reading
8:  After function call, result:  {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x103f00390>, 'test_3': <PyPDFForm.middleware.text
12:  Control flow event
12:  Control-flow exit
12:  If exit
13:  Accessing
13:      Writing
14:  Accessing
14:   Reading
14:      Reading
15:  Accessing
15:   Reading
15:  Attribute:  elements of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x1
16:  Accessing
16:   Reading
16:  Attribute:  values of {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x103f00390>, 'test_3': <PyPDFForm.middleware.text.Text ob
17:  Control flow event
17:  Before function call: values () {}
17:  After function call, result:  dict_values([<PyPDFForm.middleware.text.Text object at 0x104046910>, <PyPDFForm.middleware.text.Text object at 0x103f00390>, <PyPDFForm.middleware.text.Text object at 0x
38:  Control flow event
38:  Control-flow enter with condition True
38:     For <PyPDFForm.middleware.text.Text object at 0x104046910>
18:  Accessing
18:   Reading
18:      Reading
19:  Control flow event
19:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x104046910>, <class 'PyPDFForm.middleware.text.Text'>) {}
19:  After function call, result:  True
37:  Control flow event
37:  Control-flow enter with condition True
37:     If True
20:  Accessing
20:   Reading
20:      Reading
21:  Accessing
21:   Reading
21:  Attribute:  get of {} is <built-in method get of dict object at 0x102cedf40>
22:  Literal    value: global_font
22:      String value: global_font
23:  Accessing
23:   Reading
23:  Attribute:  GLOBAL_FONT of <module 'PyPDFForm.middleware.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/middleware/constants.py'> is Helvetica
24:  Control flow event
24:  Before function call: get ('global_font', 'Helvetica') {}
24:  After function call, result:  Helvetica
25:  Accessing
25:      Writing
26:  Accessing
26:   Reading
26:      Reading
27:  Accessing
27:   Reading
27:  Attribute:  get of {} is <built-in method get of dict object at 0x102cedf40>
28:  Literal    value: global_font_size
28:      String value: global_font_size
29:  Control flow event
29:  Before function call: get ('global_font_size',) {}
29:  After function call, result:  None
30:  Accessing
30:      Writing
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:  Attribute:  get of {} is <built-in method get of dict object at 0x102cedf40>
33:  Literal    value: global_font_color
33:      String value: global_font_color
34:  Accessing
34:   Reading
34:  Attribute:  GLOBAL_FONT_COLOR of <module 'PyPDFForm.middleware.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/middleware/constants.py'> is (0, 0, 0)
35:  Control flow event
35:  Before function call: get ('global_font_color', (0, 0, 0)) {}
35:  After function call, result:  (0, 0, 0)
36:  Accessing
36:      Writing
37:  Control flow event
37:  Control-flow exit
37:  If exit
38:  Control flow event
38:  Control-flow enter with condition True
38:     For <PyPDFForm.middleware.text.Text object at 0x103f00390>
18:  Accessing
18:   Reading
18:      Reading
19:  Control flow event
19:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x103f00390>, <class 'PyPDFForm.middleware.text.Text'>) {}
19:  After function call, result:  True
37:  Control flow event
37:  Control-flow enter with condition True
37:     If True
20:  Accessing
20:   Reading
20:      Reading
21:  Accessing
21:   Reading
21:  Attribute:  get of {} is <built-in method get of dict object at 0x102cedf40>
22:  Literal    value: global_font
22:      String value: global_font
23:  Accessing
23:   Reading
23:  Attribute:  GLOBAL_FONT of <module 'PyPDFForm.middleware.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/middleware/constants.py'> is Helvetica
24:  Control flow event
24:  Before function call: get ('global_font', 'Helvetica') {}
24:  After function call, result:  Helvetica
25:  Accessing
25:      Writing
26:  Accessing
26:   Reading
26:      Reading
27:  Accessing
27:   Reading
27:  Attribute:  get of {} is <built-in method get of dict object at 0x102cedf40>
28:  Literal    value: global_font_size
28:      String value: global_font_size
29:  Control flow event
29:  Before function call: get ('global_font_size',) {}
29:  After function call, result:  None
30:  Accessing
30:      Writing
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:  Attribute:  get of {} is <built-in method get of dict object at 0x102cedf40>
33:  Literal    value: global_font_color
33:      String value: global_font_color
34:  Accessing
34:   Reading
34:  Attribute:  GLOBAL_FONT_COLOR of <module 'PyPDFForm.middleware.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/middleware/constants.py'> is (0, 0, 0)
35:  Control flow event
35:  Before function call: get ('global_font_color', (0, 0, 0)) {}
35:  After function call, result:  (0, 0, 0)
36:  Accessing
36:      Writing
37:  Control flow event
37:  Control-flow exit
37:  If exit
38:  Control flow event
38:  Control-flow enter with condition True
38:     For <PyPDFForm.middleware.text.Text object at 0x10426e610>
18:  Accessing
18:   Reading
18:      Reading
19:  Control flow event
19:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x10426e610>, <class 'PyPDFForm.middleware.text.Text'>) {}
19:  After function call, result:  True
37:  Control flow event
37:  Control-flow enter with condition True
37:     If True
20:  Accessing
20:   Reading
20:      Reading
21:  Accessing
21:   Reading
21:  Attribute:  get of {} is <built-in method get of dict object at 0x102cedf40>
22:  Literal    value: global_font
22:      String value: global_font
23:  Accessing
23:   Reading
23:  Attribute:  GLOBAL_FONT of <module 'PyPDFForm.middleware.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/middleware/constants.py'> is Helvetica
24:  Control flow event
24:  Before function call: get ('global_font', 'Helvetica') {}
24:  After function call, result:  Helvetica
25:  Accessing
25:      Writing
26:  Accessing
26:   Reading
26:      Reading
27:  Accessing
27:   Reading
27:  Attribute:  get of {} is <built-in method get of dict object at 0x102cedf40>
28:  Literal    value: global_font_size
28:      String value: global_font_size
29:  Control flow event
29:  Before function call: get ('global_font_size',) {}
29:  After function call, result:  None
30:  Accessing
30:      Writing
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:  Attribute:  get of {} is <built-in method get of dict object at 0x102cedf40>
33:  Literal    value: global_font_color
33:      String value: global_font_color
34:  Accessing
34:   Reading
34:  Attribute:  GLOBAL_FONT_COLOR of <module 'PyPDFForm.middleware.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/middleware/constants.py'> is (0, 0, 0)
35:  Control flow event
35:  Before function call: get ('global_font_color', (0, 0, 0)) {}
35:  After function call, result:  (0, 0, 0)
36:  Accessing
36:      Writing
37:  Control flow event
37:  Control-flow exit
37:  If exit
38:  Control flow event
38:  Control-flow enter with condition True
38:     For <PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>
18:  Accessing
18:   Reading
18:      Reading
19:  Control flow event
19:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>, <class 'PyPDFForm.middleware.text.Text'>) {}
19:  After function call, result:  False
37:  Control flow event
37:  Control-flow enter with condition False
37:     If False
37:  Control flow event
37:  Control-flow exit
37:  If exit
38:  Control flow event
38:  Control-flow enter with condition True
38:     For <PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>
18:  Accessing
18:   Reading
18:      Reading
19:  Control flow event
19:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>, <class 'PyPDFForm.middleware.text.Text'>) {}
19:  After function call, result:  False
37:  Control flow event
37:  Control-flow enter with condition False
37:     If False
37:  Control flow event
37:  Control-flow exit
37:  If exit
38:  Control flow event
38:  Control-flow enter with condition True
38:     For <PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>
18:  Accessing
18:   Reading
18:      Reading
19:  Control flow event
19:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>, <class 'PyPDFForm.middleware.text.Text'>) {}
19:  After function call, result:  False
37:  Control flow event
37:  Control-flow enter with condition False
37:     If False
37:  Control flow event
37:  Control-flow exit
37:  If exit
38:  Control flow event
38:  Control-flow enter with condition True
38:     For <PyPDFForm.middleware.radio.Radio object at 0x1047c1790>
18:  Accessing
18:   Reading
18:      Reading
19:  Control flow event
19:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.text.Text'>) {}
19:  After function call, result:  False
37:  Control flow event
37:  Control-flow enter with condition False
37:     If False
37:  Control flow event
37:  Control-flow exit
37:  If exit
38:  Control flow event
38:  Control-flow enter with condition True
38:     For <PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50>
18:  Accessing
18:   Reading
18:      Reading
19:  Control flow event
19:  Before function call: isinstance (<PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50>, <class 'PyPDFForm.middleware.text.Text'>) {}
19:  After function call, result:  False
37:  Control flow event
37:  Control-flow enter with condition False
37:     If False
37:  Control flow event
37:  Control-flow exit
37:  If exit
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
0:  Control flow event
0:  Exiting function
2:  After function call, result:  <PyPDFForm.wrapper.Wrapper object at 0x102c4b390>
3:  Accessing
3:   Reading
3:  Attribute:  fill of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is <bound method Wrapper.fill of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390>>
4:  Literal    value: test_1
4:      String value: test_1
5:  Literal    value: test_1
5:      String value: test_1
6:  Literal    value: test_2
6:      String value: test_2
7:  Literal    value: test_2
7:      String value: test_2
8:  Literal    value: test_3
8:      String value: test_3
9:  Literal    value: test_3
9:      String value: test_3
10:  Literal    value: check_1
10:      String value: check_1
11:  Literal    value: True
11:      Boolean value: True
12:  Literal    value: check_2
12:      String value: check_2
13:  Literal    value: True
13:      Boolean value: True
14:  Literal    value: check_3
14:      String value: check_3
15:  Literal    value: True
15:      Boolean value: True
16:  Literal    value: radio_1
16:      String value: radio_1
17:  Literal    value: 1
17:      Integer value: 1
18:  Literal    value: {'test_1': 'test_1', 'test_2': 'test_2', 'test_3': 'test_3', 'check_1': True, 'check_2': True, 'check_3': True, 'radio_1': 1}
18:  Dictionary items: [('test_1', 'test_1'), ('test_2', 'test_2'), ('test_3', 'test_3'), ('check_1', True), ('check_2', True), ('check_3', True), ('radio_1', 1)]
19:  Control flow event
19:  Before function call: fill ({'test_1': 'test_1', 'test_2': 'test_2', 'test_3': 'test_3', 'check_1': True, 'check_2': True, 'check_3': True, 'radio_1': 1},) {}
65:  Control flow event
67:  Accessing
67:   Reading
67:      Reading
68:  Accessing
68:   Reading
68:  Attribute:  items of {'test_1': 'test_1', 'test_2': 'test_2', 'test_3': 'test_3', 'check_1': True, 'check_2': True, 'check_3': True, 'radio_1': 1} is <built-in method items of dict object at 0x104ac9
69:  Control flow event
69:  Before function call: items () {}
69:  After function call, result:  dict_items([('test_1', 'test_1'), ('test_2', 'test_2'), ('test_3', 'test_3'), ('check_1', True), ('check_2', True), ('check_3', True), ('radio_1', 1)])
76:  Control flow event
76:  Control-flow enter with condition True
76:     For ('test_1', 'test_1')
70:  Accessing
70:   Reading
70:      Reading
71:  Accessing
71:   Reading
71:      Reading
72:  Accessing
72:   Reading
72:  Attribute:  elements of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x1
75:  Control flow event
75:  Control-flow enter with condition True
75:     If True
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:      Writing
75:  Control flow event
75:  Control-flow exit
75:  If exit
76:  Control flow event
76:  Control-flow enter with condition True
76:     For ('test_2', 'test_2')
70:  Accessing
70:   Reading
70:      Reading
71:  Accessing
71:   Reading
71:      Reading
72:  Accessing
72:   Reading
72:  Attribute:  elements of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x1
75:  Control flow event
75:  Control-flow enter with condition True
75:     If True
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:      Writing
75:  Control flow event
75:  Control-flow exit
75:  If exit
76:  Control flow event
76:  Control-flow enter with condition True
76:     For ('test_3', 'test_3')
70:  Accessing
70:   Reading
70:      Reading
71:  Accessing
71:   Reading
71:      Reading
72:  Accessing
72:   Reading
72:  Attribute:  elements of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x1
75:  Control flow event
75:  Control-flow enter with condition True
75:     If True
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:      Writing
75:  Control flow event
75:  Control-flow exit
75:  If exit
76:  Control flow event
76:  Control-flow enter with condition True
76:     For ('check_1', True)
70:  Accessing
70:   Reading
70:      Reading
71:  Accessing
71:   Reading
71:      Reading
72:  Accessing
72:   Reading
72:  Attribute:  elements of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x1
75:  Control flow event
75:  Control-flow enter with condition True
75:     If True
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:      Writing
75:  Control flow event
75:  Control-flow exit
75:  If exit
76:  Control flow event
76:  Control-flow enter with condition True
76:     For ('check_2', True)
70:  Accessing
70:   Reading
70:      Reading
71:  Accessing
71:   Reading
71:      Reading
72:  Accessing
72:   Reading
72:  Attribute:  elements of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x1
75:  Control flow event
75:  Control-flow enter with condition True
75:     If True
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:      Writing
75:  Control flow event
75:  Control-flow exit
75:  If exit
76:  Control flow event
76:  Control-flow enter with condition True
76:     For ('check_3', True)
70:  Accessing
70:   Reading
70:      Reading
71:  Accessing
71:   Reading
71:      Reading
72:  Accessing
72:   Reading
72:  Attribute:  elements of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x1
75:  Control flow event
75:  Control-flow enter with condition True
75:     If True
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:      Writing
75:  Control flow event
75:  Control-flow exit
75:  If exit
76:  Control flow event
76:  Control-flow enter with condition True
76:     For ('radio_1', 1)
70:  Accessing
70:   Reading
70:      Reading
71:  Accessing
71:   Reading
71:      Reading
72:  Accessing
72:   Reading
72:  Attribute:  elements of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x1
75:  Control flow event
75:  Control-flow enter with condition True
75:     If True
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:      Writing
75:  Control flow event
75:  Control-flow exit
75:  If exit
76:  Control flow event
76:  Control-flow enter with condition False
76:     For 
76:  Control flow event
76:  Control-flow exit
76:  For exit
78:  Accessing
78:   Reading
78:      Reading
79:  Accessing
79:   Reading
79:  Attribute:  elements of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x1
80:  Accessing
80:   Reading
80:  Attribute:  items of {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x103f00390>, 'test_3': <PyPDFForm.middleware.text.Text obj
81:  Control flow event
81:  Before function call: items () {}
81:  After function call, result:  dict_items([('test_1', <PyPDFForm.middleware.text.Text object at 0x104046910>), ('test_2', <PyPDFForm.middleware.text.Text object at 0x103f00390>), ('test_3', <PyPDFForm
89:  Control flow event
89:  Control-flow enter with condition True
89:     For ('test_1', <PyPDFForm.middleware.text.Text object at 0x104046910>)
82:  Accessing
82:   Reading
82:      Reading
83:  Control flow event
83:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x104046910>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
83:  After function call, result:  False
88:  Control flow event
88:  Control-flow enter with condition False
88:     If False
88:  Control flow event
88:  Control-flow exit
88:  If exit
89:  Control flow event
89:  Control-flow enter with condition True
89:     For ('test_2', <PyPDFForm.middleware.text.Text object at 0x103f00390>)
82:  Accessing
82:   Reading
82:      Reading
83:  Control flow event
83:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x103f00390>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
83:  After function call, result:  False
88:  Control flow event
88:  Control-flow enter with condition False
88:     If False
88:  Control flow event
88:  Control-flow exit
88:  If exit
89:  Control flow event
89:  Control-flow enter with condition True
89:     For ('test_3', <PyPDFForm.middleware.text.Text object at 0x10426e610>)
82:  Accessing
82:   Reading
82:      Reading
83:  Control flow event
83:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x10426e610>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
83:  After function call, result:  False
88:  Control flow event
88:  Control-flow enter with condition False
88:     If False
88:  Control flow event
88:  Control-flow exit
88:  If exit
89:  Control flow event
89:  Control-flow enter with condition True
89:     For ('check_1', <PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>)
82:  Accessing
82:   Reading
82:      Reading
83:  Control flow event
83:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
83:  After function call, result:  False
88:  Control flow event
88:  Control-flow enter with condition False
88:     If False
88:  Control flow event
88:  Control-flow exit
88:  If exit
89:  Control flow event
89:  Control-flow enter with condition True
89:     For ('check_2', <PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>)
82:  Accessing
82:   Reading
82:      Reading
83:  Control flow event
83:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
83:  After function call, result:  False
88:  Control flow event
88:  Control-flow enter with condition False
88:     If False
88:  Control flow event
88:  Control-flow exit
88:  If exit
89:  Control flow event
89:  Control-flow enter with condition True
89:     For ('check_3', <PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>)
82:  Accessing
82:   Reading
82:      Reading
83:  Control flow event
83:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
83:  After function call, result:  False
88:  Control flow event
88:  Control-flow enter with condition False
88:     If False
88:  Control flow event
88:  Control-flow exit
88:  If exit
89:  Control flow event
89:  Control-flow enter with condition True
89:     For ('radio_1', <PyPDFForm.middleware.radio.Radio object at 0x1047c1790>)
82:  Accessing
82:   Reading
82:      Reading
83:  Control flow event
83:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
83:  After function call, result:  False
88:  Control flow event
88:  Control-flow enter with condition False
88:     If False
88:  Control flow event
88:  Control-flow exit
88:  If exit
89:  Control flow event
89:  Control-flow enter with condition True
89:     For ('dropdown_1', <PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50>)
82:  Accessing
82:   Reading
82:      Reading
83:  Control flow event
83:  Before function call: isinstance (<PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50>, <class 'PyPDFForm.middleware.dropdown.Dropdown'>) {}
83:  After function call, result:  True
88:  Control flow event
88:  Control-flow enter with condition True
88:     If True
84:  Accessing
84:   Reading
84:  Attribute:  dropdown_to_text of <module 'PyPDFForm.middleware.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/middleware/template.py'> is <function dropdo
85:  Accessing
85:   Reading
85:      Reading
86:  Control flow event
86:  Before function call: dropdown_to_text (<PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50>,) {}
96:  Control flow event
97:  Accessing
97:   Reading
97:      Reading
5:  Control flow event
6:  Accessing
6:   Reading
6:      Reading
7:  Accessing
7:   Reading
7:  Attribute:  _name of <PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50> is dropdown_1
98:  Accessing
98:   Reading
98:  Attribute:  name of <PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50> is dropdown_1
99:  Control flow event
99:  Before function call: Text ('dropdown_1',) {}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Text'>, <Text object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Text'>, <Text object>> is <bound method Element.__init__ of <PyPDFForm.middleware.text.Text object at 0x10782bcd0>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('dropdown_1', None) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
6:  Accessing
6:      Writing
7:  Accessing
7:      Writing
8:  Accessing
8:      Writing
9:  Accessing
9:      Writing
10:  Accessing
10:      Writing
11:  Accessing
11:      Writing
12:  Accessing
12:      Writing
13:  Accessing
13:      Writing
14:  Accessing
14:      Writing
0:  Control flow event
0:  Exiting function
99:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x10782bcd0>
100:  Accessing
100:      Writing
101:  Accessing
101:   Reading
101:  Attribute:  GLOBAL_FONT of <module 'PyPDFForm.middleware.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/middleware/constants.py'> is Helvetica
102:  Accessing
102:      Writing
103:  Accessing
103:   Reading
103:  Attribute:  GLOBAL_FONT_COLOR of <module 'PyPDFForm.middleware.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/middleware/constants.py'> is (0, 0, 0)
104:  Accessing
104:      Writing
105:  Accessing
105:   Reading
105:      Reading
106:  Accessing
106:   Reading
106:  Attribute:  value of <PyPDFForm.middleware.dropdown.Dropdown object at 0x107183c50> is None
107:  Comparison IsNot None None -> False
107:  Comparison None None -> False
122:  Control flow event
122:  Control-flow enter with condition False
122:     If False
122:  Control flow event
122:  Control-flow exit
122:  If exit
123:  Accessing
123:   Reading
123:      Reading
86:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x10782bcd0>
87:  Accessing
87:      Writing
88:  Control flow event
88:  Control-flow exit
88:  If exit
89:  Control flow event
89:  Control-flow enter with condition False
89:     For 
89:  Control flow event
89:  Control-flow exit
89:  For exit
90:  Accessing
90:   Reading
90:  Attribute:  update_text_field_attributes of <module 'PyPDFForm.core.utils' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/utils.py'> is <function update_text_
91:  Accessing
91:   Reading
91:      Reading
92:  Accessing
92:   Reading
92:  Attribute:  stream of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendst
93:  Accessing
93:   Reading
93:      Reading
94:  Accessing
94:   Reading
94:  Attribute:  elements of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x1
95:  Control flow event
95:  Before function call: update_text_field_attributes (b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj
21:  Control flow event
22:  Accessing
22:   Reading
22:  Attribute:  PdfReader of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.pdfreader.PdfReader'>
23:  Accessing
23:   Reading
23:      Reading
24:  Control flow event
24:  Before function call: PdfReader () {'fdata': b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Ty
24:  After function call, result:  {'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0
25:  Accessing
25:      Writing
27:  Accessing
27:   Reading
27:  Attribute:  get_elements_by_page of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_elements_b
28:  Accessing
28:   Reading
28:      Reading
29:  Control flow event
29:  Before function call: get_elements_by_page ({'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/Media
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Control flow event
2:  Before function call: isinstance ({'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0'
2:  After function call, result:  False
7:  Control flow event
7:  Control-flow enter with condition False
7:     If False
7:  Control flow event
7:  Control-flow exit
7:  If exit
8:  Literal    value: {}
8:  Dictionary items: []
9:  Accessing
9:      Writing
11:  Accessing
11:   Reading
11:      Reading
12:  Accessing
12:   Reading
12:  Attribute:  pages of {'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612',
13:  Control flow event
13:  Before function call: enumerate ([{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25
13:  After function call, result:  <enumerate object at 0x107c33fb0>
53:  Control flow event
53:  Control-flow enter with condition True
53:     For (0, {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25, 0), (30, 0), (35, 0),
14:  Accessing
14:   Reading
14:      Reading
15:  Accessing
15:   Reading
15:  Attribute:  ANNOTATION_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Annots
16:  Accessing
16:   Reading
16:  Slice ['/Annots']
17:  Accessing
17:      Writing
20:  Literal    value: []
20:  List []
21:  Accessing
21:      Writing
18:  Literal    value: 1
18:      Integer value: 1
19:  Binary Operation 0 Add 1 -> 1
19:  Binary Operation 0 1 -> 1
22:  Accessing
22:   Reading
22:      Reading
52:  Control flow event
52:  Control-flow enter with condition [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25, 0), (30, 0), (35, 0), (40, 0)]
52:     If [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25, 0), (30, 0), (35, 0), (40, 0)]
23:  Accessing
23:   Reading
23:      Reading
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '617.707', '238.453', '666.667']), ('/AP', {'/N': (3, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['97.333', '617.707', '238.453', '666.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (3, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '4194304')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Tx')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x102d47380> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x102d47380> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Tx -> True
83:  Comparison /Tx /Tx -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [] is <built-in method append of list object at 0x107c5eb40>
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '500.373', '238.453', '549.333']), ('/AP', {'/N': (5, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['97.333', '500.373', '238.453', '549.333'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (5, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '4194304')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Tx')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x102d46160> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x102d46160> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Tx -> True
83:  Comparison /Tx /Tx -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '387.707', '238.453', '436.667']), ('/AP', {'/N': (7, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['97.333', '387.707', '238.453', '436.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (7, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '4194304')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Tx')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x102d46700> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x102d46700> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Tx -> True
83:  Comparison /Tx /Tx -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', 
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12,
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaD
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '637.253', '306.8', '665.333']), ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '637.253', '306.8', '665.333'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x102d46b60> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x102d46b60> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(4)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_3_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(check_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/V', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaD
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '637.253', '306.8', '665.333']), ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '637.253', '306.8', '665.333'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x102d46020> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x102d46020> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)',
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/Za
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '520.587', '306.8', '548.667']), ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '520.587', '306.8', '548.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1078e3ba0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1078e3ba0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(4)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_4_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(check_2)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/V', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (1
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/Za
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '520.587', '306.8', '548.667']), ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '520.587', '306.8', '548.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1078e3c40> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1078e3c40> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/D
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', '/F'
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0),
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '407.92', '306.8', '436']), ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}), ('
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '407.92', '306.8', '436'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x107e8c040> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x107e8c040> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(4)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_5_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(check_3)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/V', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0)
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '407.92', '306.8', '436']), ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}), ('
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '407.92', '306.8', '436'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x102d46fc0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x102d46fc0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Ch'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Ch'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Ch'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x107e8c0e0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x107e8c0e0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Btn -> False
83:  Comparison /Ch /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Tx'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Tx'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Tx'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x107e8cfe0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x107e8cfe0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x107e8d800> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x107e8d800> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/Subtype': '/Widget'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/Subtype': '/Widget'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/Subtype': '/Widget'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/Subtype': '/Widget'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x107e8de40> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x107e8de40> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0)
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Ch'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Ch'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Ch'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x107e8e8e0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x107e8e8e0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Btn -> False
83:  Comparison /Ch /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Tx'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Tx'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Tx'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x107e8eca0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x107e8eca0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x107e8f100> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x107e8f100> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/Subtype': '/Widget'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/Subtype': '/Widget'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/Subtype': '/Widget'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/Subtype': '/Widget'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x107e8f560> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x107e8f560> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0)
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Ch'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Ch'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Ch'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x107e8f880> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x107e8f880> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Btn -> False
83:  Comparison /Ch /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Tx'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Tx'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Tx'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x110678900> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x110678900> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x107e8ff60> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x107e8ff60> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/Subtype': '/Widget'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/Subtype': '/Widget'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/Subtype': '/Widget'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/Subtype': '/Widget'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x110679800> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x110679800> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0)
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '/MK': {}, '/P'
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['120.667', '301', '314.667', '326'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (41, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 14 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '131072')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Ch')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1106793a0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1106793a0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Ch -> False
83:  Comparison /Tx /Ch -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(glgg_oM95)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(dropdown_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Q', '0')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff':
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['120.667', '301', '314.667', '326'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (41, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 14 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '131072')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Ch')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x110679e40> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x110679e40> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Ch -> False
83:  Comparison /Btn /Ch -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(glgg_oM95)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(dropdown_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Q', '0')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['120.667', '301', '314.667', '326'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (41, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 14 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '131072')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Ch')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x11067a340> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x11067a340> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Ch -> True
83:  Comparison /Ch /Ch -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H'
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition False
51:     For 
51:  Control flow event
51:  Control-flow exit
51:  For exit
52:  Control flow event
52:  Control-flow exit
52:  If exit
53:  Control flow event
53:  Control-flow enter with condition False
53:     For 
53:  Control flow event
53:  Control-flow exit
53:  For exit
54:  Accessing
54:   Reading
54:      Reading
29:  After function call, result:  {1: [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT
30:  Accessing
30:   Reading
30:  Attribute:  items of {1: [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx',
31:  Control flow event
31:  Before function call: items () {}
31:  After function call, result:  dict_items([(1, [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '41
78:  Control flow event
78:  Control-flow enter with condition True
78:     For (1, [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/
32:  Accessing
32:   Reading
32:      Reading
77:  Control flow event
77:  Control-flow enter with condition True
77:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
33:  Accessing
33:   Reading
33:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/F
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '617.707', '238.453', '666.667']), ('/AP', {'/N': (3, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '617.707', '238.453', '666.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (3, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Tx')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_0_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(test_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x110678fe0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x110678fe0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (test_1) -> (test_1)
120:  Binary Operation True (test_1) -> (test_1)
122:  Control flow event
122:  Control-flow enter with condition (test_1)
122:     If (test_1)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (test_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (test_1)
144:     If (test_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
35:  After function call, result:  test_1
36:  Accessing
36:      Writing
37:  Accessing
37:   Reading
37:      Reading
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Slice ['test_1']
40:  Control flow event
40:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x104046910>, <class 'PyPDFForm.middleware.text.Text'>) {}
40:  After function call, result:  True
76:  Control flow event
76:  Control-flow enter with condition True
76:     If True
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:      Reading
43:  Accessing
43:   Reading
43:  Slice ['test_1']
44:  Accessing
44:   Reading
44:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x104046910> is None
53:  Control flow event
53:  Control-flow enter with condition True
53:     If True
45:  Accessing
45:   Reading
45:  Attribute:  get_text_field_font_size of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_text_f
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: get_text_field_font_size ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4
246:  Control flow event
247:  Literal    value: 0
247:      Integer value: 0
248:  Accessing
248:      Writing
273:  Control flow event
273:  Control-flow enter with condition True
273:     For {'/DA': True}
249:  Accessing
249:   Reading
249:      Reading
250:  Accessing
250:   Reading
250:      Reading
251:  Accessing
251:   Reading
251:      Reading
252:  Control flow event
252:  Before function call: traverse_pattern ({'/DA': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '617.707', '238.453', '666.667']), ('/AP', {'/N': (3, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '617.707', '238.453', '666.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (3, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/DA']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x11067ab60> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x11067ab60> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/DA']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (/Helv 8.64 Tf 0 g) -> (/Helv 8.64 Tf 0 g)
120:  Binary Operation True (/Helv 8.64 Tf 0 g) -> (/Helv 8.64 Tf 0 g)
122:  Control flow event
122:  Control-flow enter with condition (/Helv 8.64 Tf 0 g)
122:     If (/Helv 8.64 Tf 0 g)
121:  Accessing
121:   Reading
121:      Reading
252:  After function call, result:  (/Helv 8.64 Tf 0 g)
253:  Accessing
253:      Writing
254:  Accessing
254:   Reading
254:      Reading
272:  Control flow event
272:  Control-flow enter with condition (/Helv 8.64 Tf 0 g)
272:     If (/Helv 8.64 Tf 0 g)
255:  Accessing
255:   Reading
255:      Reading
256:  Accessing
256:   Reading
256:  Attribute:  split of (/Helv 8.64 Tf 0 g) is <built-in method split of PdfString object at 0x107c780d0>
257:  Literal    value:  
257:      String value:  
258:  Control flow event
258:  Before function call: split (' ',) {}
258:  After function call, result:  ['(/Helv', '8.64', 'Tf', '0', 'g)']
259:  Accessing
259:      Writing
260:  Accessing
260:   Reading
260:      Reading
261:  Control flow event
261:  Before function call: len (['(/Helv', '8.64', 'Tf', '0', 'g)'],) {}
261:  After function call, result:  5
262:  Literal    value: 1
262:      Integer value: 1
263:  Comparison GreaterThan 5 1 -> True
263:  Comparison 5 1 -> True
271:  Control flow event
271:  Control-flow enter with condition True
271:     If True
265:  Accessing
265:   Reading
265:      Reading
266:  Literal    value: 1
266:      Integer value: 1
267:  Accessing
267:   Reading
267:  Slice [1]
268:  Control flow event
268:  Before function call: float ('8.64',) {}
268:  After function call, result:  8.64
269:  Accessing
269:      Writing
270:  Control flow event
270:  Break
274:  Accessing
274:   Reading
274:      Reading
47:  After function call, result:  8.64
51:  Binary Operation 8.64 Or <function update_text_field_attributes.<locals>.<lambda> at 0x110678fe0> -> 8.64
51:  Binary Operation 8.64 <function update_text_field_attributes.<locals>.<lambda> at 0x110678fe0> -> 8.64
52:  Accessing
52:      Writing
53:  Control flow event
53:  Control-flow exit
53:  If exit
54:  Accessing
54:   Reading
54:  Attribute:  is_text_multiline of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function is_text_multiline
55:  Accessing
55:   Reading
55:      Reading
56:  Control flow event
56:  Before function call: is_text_multiline ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304'
298:  Control flow event
299:  Accessing
299:      Writing
309:  Control flow event
309:  Control-flow enter with condition True
309:     For {'/Ff': True}
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:      Reading
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: traverse_pattern ({'/Ff': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '617.707', '238.453', '666.667']), ('/AP', {'/N': (3, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '617.707', '238.453', '666.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (3, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Ff']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x11067a840> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x11067a840> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/Ff']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And 4194304 -> 4194304
120:  Binary Operation True 4194304 -> 4194304
122:  Control flow event
122:  Control-flow enter with condition 4194304
122:     If 4194304
121:  Accessing
121:   Reading
121:      Reading
303:  After function call, result:  4194304
304:  Accessing
304:      Writing
305:  Accessing
305:   Reading
305:      Reading
306:  Comparison IsNot 4194304 None -> True
306:  Comparison 4194304 None -> True
308:  Control flow event
308:  Control-flow enter with condition True
308:     If True
307:  Control flow event
307:  Break
310:  Accessing
310:   Reading
310:      Reading
312:  Control flow event
312:  Control-flow enter with condition False
312:     If False
312:  Control flow event
312:  Control-flow exit
312:  If exit
314:  Accessing
314:   Reading
314:  Attribute:  format of {0:b} is <built-in method format of str object at 0x101f34cf0>
315:  Accessing
315:   Reading
315:      Reading
316:  Control flow event
316:  Before function call: int ('4194304',) {}
316:  After function call, result:  4194304
317:  Control flow event
317:  Before function call: format (4194304,) {}
317:  After function call, result:  10000000000000000000000
318:  Literal    value: 1
318:      Integer value: 1
319:  Unary Operation 1 -> -1
319:  Unary Operation 1 -> -1
320:  Accessing
320:   Reading
320:  Slice [slice(None, None, -1)]
321:  Literal    value: 12
321:      Integer value: 12
322:  Accessing
322:   Reading
322:  Slice [12]
323:  Comparison Equal 0 1 -> False
323:  Comparison 0 1 -> False
56:  After function call, result:  False
61:  Binary Operation False And <function update_text_field_attributes.<locals>.<lambda> at 0x110679c60> -> False
61:  Binary Operation False <function update_text_field_attributes.<locals>.<lambda> at 0x110679c60> -> False
75:  Control flow event
75:  Control-flow enter with condition False
75:     If False
75:  Control flow event
75:  Control-flow exit
75:  If exit
76:  Control flow event
76:  Control-flow exit
76:  If exit
77:  Control flow event
77:  Control-flow enter with condition True
77:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
33:  Accessing
33:   Reading
33:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/F
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '500.373', '238.453', '549.333']), ('/AP', {'/N': (5, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '500.373', '238.453', '549.333'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (5, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Tx')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_1_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(test_2)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x110679940> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x110679940> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (test_2) -> (test_2)
120:  Binary Operation True (test_2) -> (test_2)
122:  Control flow event
122:  Control-flow enter with condition (test_2)
122:     If (test_2)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (test_2)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (test_2)
144:     If (test_2)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
35:  After function call, result:  test_2
36:  Accessing
36:      Writing
37:  Accessing
37:   Reading
37:      Reading
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Slice ['test_2']
40:  Control flow event
40:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x103f00390>, <class 'PyPDFForm.middleware.text.Text'>) {}
40:  After function call, result:  True
76:  Control flow event
76:  Control-flow enter with condition True
76:     If True
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:      Reading
43:  Accessing
43:   Reading
43:  Slice ['test_2']
44:  Accessing
44:   Reading
44:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x103f00390> is None
53:  Control flow event
53:  Control-flow enter with condition True
53:     If True
45:  Accessing
45:   Reading
45:  Attribute:  get_text_field_font_size of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_text_f
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: get_text_field_font_size ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4
246:  Control flow event
247:  Literal    value: 0
247:      Integer value: 0
248:  Accessing
248:      Writing
273:  Control flow event
273:  Control-flow enter with condition True
273:     For {'/DA': True}
249:  Accessing
249:   Reading
249:      Reading
250:  Accessing
250:   Reading
250:      Reading
251:  Accessing
251:   Reading
251:      Reading
252:  Control flow event
252:  Before function call: traverse_pattern ({'/DA': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '500.373', '238.453', '549.333']), ('/AP', {'/N': (5, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '500.373', '238.453', '549.333'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (5, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/DA']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x11067be20> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x11067be20> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/DA']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (/Helv 8.64 Tf 0 g) -> (/Helv 8.64 Tf 0 g)
120:  Binary Operation True (/Helv 8.64 Tf 0 g) -> (/Helv 8.64 Tf 0 g)
122:  Control flow event
122:  Control-flow enter with condition (/Helv 8.64 Tf 0 g)
122:     If (/Helv 8.64 Tf 0 g)
121:  Accessing
121:   Reading
121:      Reading
252:  After function call, result:  (/Helv 8.64 Tf 0 g)
253:  Accessing
253:      Writing
254:  Accessing
254:   Reading
254:      Reading
272:  Control flow event
272:  Control-flow enter with condition (/Helv 8.64 Tf 0 g)
272:     If (/Helv 8.64 Tf 0 g)
255:  Accessing
255:   Reading
255:      Reading
256:  Accessing
256:   Reading
256:  Attribute:  split of (/Helv 8.64 Tf 0 g) is <built-in method split of PdfString object at 0x107c780d0>
257:  Literal    value:  
257:      String value:  
258:  Control flow event
258:  Before function call: split (' ',) {}
258:  After function call, result:  ['(/Helv', '8.64', 'Tf', '0', 'g)']
259:  Accessing
259:      Writing
260:  Accessing
260:   Reading
260:      Reading
261:  Control flow event
261:  Before function call: len (['(/Helv', '8.64', 'Tf', '0', 'g)'],) {}
261:  After function call, result:  5
262:  Literal    value: 1
262:      Integer value: 1
263:  Comparison GreaterThan 5 1 -> True
263:  Comparison 5 1 -> True
271:  Control flow event
271:  Control-flow enter with condition True
271:     If True
265:  Accessing
265:   Reading
265:      Reading
266:  Literal    value: 1
266:      Integer value: 1
267:  Accessing
267:   Reading
267:  Slice [1]
268:  Control flow event
268:  Before function call: float ('8.64',) {}
268:  After function call, result:  8.64
269:  Accessing
269:      Writing
270:  Control flow event
270:  Break
274:  Accessing
274:   Reading
274:      Reading
47:  After function call, result:  8.64
51:  Binary Operation 8.64 Or <function update_text_field_attributes.<locals>.<lambda> at 0x110679940> -> 8.64
51:  Binary Operation 8.64 <function update_text_field_attributes.<locals>.<lambda> at 0x110679940> -> 8.64
52:  Accessing
52:      Writing
53:  Control flow event
53:  Control-flow exit
53:  If exit
54:  Accessing
54:   Reading
54:  Attribute:  is_text_multiline of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function is_text_multiline
55:  Accessing
55:   Reading
55:      Reading
56:  Control flow event
56:  Before function call: is_text_multiline ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304'
298:  Control flow event
299:  Accessing
299:      Writing
309:  Control flow event
309:  Control-flow enter with condition True
309:     For {'/Ff': True}
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:      Reading
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: traverse_pattern ({'/Ff': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '500.373', '238.453', '549.333']), ('/AP', {'/N': (5, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '500.373', '238.453', '549.333'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (5, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Ff']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x11067bce0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x11067bce0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/Ff']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And 4194304 -> 4194304
120:  Binary Operation True 4194304 -> 4194304
122:  Control flow event
122:  Control-flow enter with condition 4194304
122:     If 4194304
121:  Accessing
121:   Reading
121:      Reading
303:  After function call, result:  4194304
304:  Accessing
304:      Writing
305:  Accessing
305:   Reading
305:      Reading
306:  Comparison IsNot 4194304 None -> True
306:  Comparison 4194304 None -> True
308:  Control flow event
308:  Control-flow enter with condition True
308:     If True
307:  Control flow event
307:  Break
310:  Accessing
310:   Reading
310:      Reading
312:  Control flow event
312:  Control-flow enter with condition False
312:     If False
312:  Control flow event
312:  Control-flow exit
312:  If exit
314:  Accessing
314:   Reading
314:  Attribute:  format of {0:b} is <built-in method format of str object at 0x101f34cf0>
315:  Accessing
315:   Reading
315:      Reading
316:  Control flow event
316:  Before function call: int ('4194304',) {}
316:  After function call, result:  4194304
317:  Control flow event
317:  Before function call: format (4194304,) {}
317:  After function call, result:  10000000000000000000000
318:  Literal    value: 1
318:      Integer value: 1
319:  Unary Operation 1 -> -1
319:  Unary Operation 1 -> -1
320:  Accessing
320:   Reading
320:  Slice [slice(None, None, -1)]
321:  Literal    value: 12
321:      Integer value: 12
322:  Accessing
322:   Reading
322:  Slice [12]
323:  Comparison Equal 0 1 -> False
323:  Comparison 0 1 -> False
56:  After function call, result:  False
61:  Binary Operation False And <function update_text_field_attributes.<locals>.<lambda> at 0x11067b6a0> -> False
61:  Binary Operation False <function update_text_field_attributes.<locals>.<lambda> at 0x11067b6a0> -> False
75:  Control flow event
75:  Control-flow enter with condition False
75:     If False
75:  Control flow event
75:  Control-flow exit
75:  If exit
76:  Control flow event
76:  Control-flow exit
76:  If exit
77:  Control flow event
77:  Control-flow enter with condition True
77:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
33:  Accessing
33:   Reading
33:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/F
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '387.707', '238.453', '436.667']), ('/AP', {'/N': (7, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '387.707', '238.453', '436.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (7, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Tx')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_2_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(test_3)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x110b6cd60> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x110b6cd60> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (test_3) -> (test_3)
120:  Binary Operation True (test_3) -> (test_3)
122:  Control flow event
122:  Control-flow enter with condition (test_3)
122:     If (test_3)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (test_3)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (test_3)
144:     If (test_3)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
35:  After function call, result:  test_3
36:  Accessing
36:      Writing
37:  Accessing
37:   Reading
37:      Reading
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Slice ['test_3']
40:  Control flow event
40:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x10426e610>, <class 'PyPDFForm.middleware.text.Text'>) {}
40:  After function call, result:  True
76:  Control flow event
76:  Control-flow enter with condition True
76:     If True
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:      Reading
43:  Accessing
43:   Reading
43:  Slice ['test_3']
44:  Accessing
44:   Reading
44:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x10426e610> is None
53:  Control flow event
53:  Control-flow enter with condition True
53:     If True
45:  Accessing
45:   Reading
45:  Attribute:  get_text_field_font_size of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_text_f
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: get_text_field_font_size ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4
246:  Control flow event
247:  Literal    value: 0
247:      Integer value: 0
248:  Accessing
248:      Writing
273:  Control flow event
273:  Control-flow enter with condition True
273:     For {'/DA': True}
249:  Accessing
249:   Reading
249:      Reading
250:  Accessing
250:   Reading
250:      Reading
251:  Accessing
251:   Reading
251:      Reading
252:  Control flow event
252:  Before function call: traverse_pattern ({'/DA': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '387.707', '238.453', '436.667']), ('/AP', {'/N': (7, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '387.707', '238.453', '436.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (7, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/DA']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x110b6c7c0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x110b6c7c0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/DA']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (/Helv 8.64 Tf 0 g) -> (/Helv 8.64 Tf 0 g)
120:  Binary Operation True (/Helv 8.64 Tf 0 g) -> (/Helv 8.64 Tf 0 g)
122:  Control flow event
122:  Control-flow enter with condition (/Helv 8.64 Tf 0 g)
122:     If (/Helv 8.64 Tf 0 g)
121:  Accessing
121:   Reading
121:      Reading
252:  After function call, result:  (/Helv 8.64 Tf 0 g)
253:  Accessing
253:      Writing
254:  Accessing
254:   Reading
254:      Reading
272:  Control flow event
272:  Control-flow enter with condition (/Helv 8.64 Tf 0 g)
272:     If (/Helv 8.64 Tf 0 g)
255:  Accessing
255:   Reading
255:      Reading
256:  Accessing
256:   Reading
256:  Attribute:  split of (/Helv 8.64 Tf 0 g) is <built-in method split of PdfString object at 0x107c780d0>
257:  Literal    value:  
257:      String value:  
258:  Control flow event
258:  Before function call: split (' ',) {}
258:  After function call, result:  ['(/Helv', '8.64', 'Tf', '0', 'g)']
259:  Accessing
259:      Writing
260:  Accessing
260:   Reading
260:      Reading
261:  Control flow event
261:  Before function call: len (['(/Helv', '8.64', 'Tf', '0', 'g)'],) {}
261:  After function call, result:  5
262:  Literal    value: 1
262:      Integer value: 1
263:  Comparison GreaterThan 5 1 -> True
263:  Comparison 5 1 -> True
271:  Control flow event
271:  Control-flow enter with condition True
271:     If True
265:  Accessing
265:   Reading
265:      Reading
266:  Literal    value: 1
266:      Integer value: 1
267:  Accessing
267:   Reading
267:  Slice [1]
268:  Control flow event
268:  Before function call: float ('8.64',) {}
268:  After function call, result:  8.64
269:  Accessing
269:      Writing
270:  Control flow event
270:  Break
274:  Accessing
274:   Reading
274:      Reading
47:  After function call, result:  8.64
51:  Binary Operation 8.64 Or <function update_text_field_attributes.<locals>.<lambda> at 0x110b6cd60> -> 8.64
51:  Binary Operation 8.64 <function update_text_field_attributes.<locals>.<lambda> at 0x110b6cd60> -> 8.64
52:  Accessing
52:      Writing
53:  Control flow event
53:  Control-flow exit
53:  If exit
54:  Accessing
54:   Reading
54:  Attribute:  is_text_multiline of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function is_text_multiline
55:  Accessing
55:   Reading
55:      Reading
56:  Control flow event
56:  Before function call: is_text_multiline ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304'
298:  Control flow event
299:  Accessing
299:      Writing
309:  Control flow event
309:  Control-flow enter with condition True
309:     For {'/Ff': True}
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:      Reading
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: traverse_pattern ({'/Ff': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '387.707', '238.453', '436.667']), ('/AP', {'/N': (7, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '387.707', '238.453', '436.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (7, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Ff']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x110b6dd00> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x110b6dd00> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/Ff']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And 4194304 -> 4194304
120:  Binary Operation True 4194304 -> 4194304
122:  Control flow event
122:  Control-flow enter with condition 4194304
122:     If 4194304
121:  Accessing
121:   Reading
121:      Reading
303:  After function call, result:  4194304
304:  Accessing
304:      Writing
305:  Accessing
305:   Reading
305:      Reading
306:  Comparison IsNot 4194304 None -> True
306:  Comparison 4194304 None -> True
308:  Control flow event
308:  Control-flow enter with condition True
308:     If True
307:  Control flow event
307:  Break
310:  Accessing
310:   Reading
310:      Reading
312:  Control flow event
312:  Control-flow enter with condition False
312:     If False
312:  Control flow event
312:  Control-flow exit
312:  If exit
314:  Accessing
314:   Reading
314:  Attribute:  format of {0:b} is <built-in method format of str object at 0x101f34cf0>
315:  Accessing
315:   Reading
315:      Reading
316:  Control flow event
316:  Before function call: int ('4194304',) {}
316:  After function call, result:  4194304
317:  Control flow event
317:  Before function call: format (4194304,) {}
317:  After function call, result:  10000000000000000000000
318:  Literal    value: 1
318:      Integer value: 1
319:  Unary Operation 1 -> -1
319:  Unary Operation 1 -> -1
320:  Accessing
320:   Reading
320:  Slice [slice(None, None, -1)]
321:  Literal    value: 12
321:      Integer value: 12
322:  Accessing
322:   Reading
322:  Slice [12]
323:  Comparison Equal 0 1 -> False
323:  Comparison 0 1 -> False
56:  After function call, result:  False
61:  Binary Operation False And <function update_text_field_attributes.<locals>.<lambda> at 0x110b6cf40> -> False
61:  Binary Operation False <function update_text_field_attributes.<locals>.<lambda> at 0x110b6cf40> -> False
75:  Control flow event
75:  Control-flow enter with condition False
75:     If False
75:  Control flow event
75:  Control-flow exit
75:  If exit
76:  Control flow event
76:  Control-flow exit
76:  If exit
77:  Control flow event
77:  Control-flow enter with condition True
77:     For {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', 
33:  Accessing
33:   Reading
33:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0),
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaD
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '637.253', '306.8', '665.333']), ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['278', '637.253', '306.8', '665.333'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(4)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_3_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(check_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x110b6d9e0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x110b6d9e0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (check_1) -> (check_1)
120:  Binary Operation True (check_1) -> (check_1)
122:  Control flow event
122:  Control-flow enter with condition (check_1)
122:     If (check_1)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (check_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (check_1)
144:     If (check_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
35:  After function call, result:  check_1
36:  Accessing
36:      Writing
37:  Accessing
37:   Reading
37:      Reading
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Slice ['check_1']
40:  Control flow event
40:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>, <class 'PyPDFForm.middleware.text.Text'>) {}
40:  After function call, result:  False
76:  Control flow event
76:  Control-flow enter with condition False
76:     If False
76:  Control flow event
76:  Control-flow exit
76:  If exit
77:  Control flow event
77:  Control-flow enter with condition True
77:     For {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)',
33:  Accessing
33:   Reading
33:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0)
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/Za
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '520.587', '306.8', '548.667']), ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['278', '520.587', '306.8', '548.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(4)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_4_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(check_2)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x110b6e520> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x110b6e520> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (check_2) -> (check_2)
120:  Binary Operation True (check_2) -> (check_2)
122:  Control flow event
122:  Control-flow enter with condition (check_2)
122:     If (check_2)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (check_2)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (check_2)
144:     If (check_2)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
35:  After function call, result:  check_2
36:  Accessing
36:      Writing
37:  Accessing
37:   Reading
37:      Reading
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Slice ['check_2']
40:  Control flow event
40:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>, <class 'PyPDFForm.middleware.text.Text'>) {}
40:  After function call, result:  False
76:  Control flow event
76:  Control-flow enter with condition False
76:     If False
76:  Control flow event
76:  Control-flow exit
76:  If exit
77:  Control flow event
77:  Control-flow enter with condition True
77:     For {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', '/F'
33:  Accessing
33:   Reading
33:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}},
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/O
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '407.92', '306.8', '436']), ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}), ('
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['278', '407.92', '306.8', '436'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(4)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_5_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(check_3)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x110b6e2a0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x110b6e2a0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (check_3) -> (check_3)
120:  Binary Operation True (check_3) -> (check_3)
122:  Control flow event
122:  Control-flow enter with condition (check_3)
122:     If (check_3)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (check_3)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (check_3)
144:     If (check_3)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
35:  After function call, result:  check_3
36:  Accessing
36:      Writing
37:  Accessing
37:   Reading
37:      Reading
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Slice ['check_3']
40:  Control flow event
40:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>, <class 'PyPDFForm.middleware.text.Text'>) {}
40:  After function call, result:  False
76:  Control flow event
76:  Control-flow enter with condition False
76:     If False
76:  Control flow event
76:  Control-flow exit
76:  If exit
77:  Control flow event
77:  Control-flow enter with condition True
77:     For {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
33:  Accessing
33:   Reading
33:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0)
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(l)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_6_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AS', '/Off')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition False
128:     For 
128:  Control flow event
128:  Control-flow exit
128:  For exit
134:  After function call, result:  None
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition None
144:     If None
144:  Control flow event
144:  Control-flow exit
144:  If exit
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/Parent': {'/T': True}}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/Parent': {'/T': True}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Parent']
103:  Control flow event
103:  Before function call: isinstance ({'/T': True}, <class 'dict'>) {}
103:  After function call, result:  True
104:  Accessing
104:   Reading
104:      Reading
105:  Accessing
105:   Reading
105:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
106:  Control flow event
106:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
106:  After function call, result:  True
107:  Binary Operation True And True -> True
107:  Binary Operation True True -> True
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
108:  Accessing
108:   Reading
108:      Reading
109:  Accessing
109:   Reading
109:      Reading
110:  Accessing
110:   Reading
110:      Reading
111:  Accessing
111:   Reading
111:  Slice ['/Parent']
112:  Accessing
112:   Reading
112:      Reading
113:  Control flow event
113:  Before function call: traverse_pattern ({'/T': True}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': 
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '49152')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_7_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(radio_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x110b6ede0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x110b6ede0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (radio_1) -> (radio_1)
120:  Binary Operation True (radio_1) -> (radio_1)
122:  Control flow event
122:  Control-flow enter with condition (radio_1)
122:     If (radio_1)
121:  Accessing
121:   Reading
121:      Reading
113:  After function call, result:  (radio_1)
114:  Accessing
114:      Writing
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition (radio_1)
127:     If (radio_1)
126:  Accessing
126:   Reading
126:      Reading
134:  After function call, result:  (radio_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (radio_1)
144:     If (radio_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
35:  After function call, result:  radio_1
36:  Accessing
36:      Writing
37:  Accessing
37:   Reading
37:      Reading
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Slice ['radio_1']
40:  Control flow event
40:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.text.Text'>) {}
40:  After function call, result:  False
76:  Control flow event
76:  Control-flow enter with condition False
76:     If False
76:  Control flow event
76:  Control-flow exit
76:  If exit
77:  Control flow event
77:  Control-flow enter with condition True
77:     For {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
33:  Accessing
33:   Reading
33:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0)
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(l)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_8_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AS', '/Off')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition False
128:     For 
128:  Control flow event
128:  Control-flow exit
128:  For exit
134:  After function call, result:  None
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition None
144:     If None
144:  Control flow event
144:  Control-flow exit
144:  If exit
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/Parent': {'/T': True}}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/Parent': {'/T': True}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Parent']
103:  Control flow event
103:  Before function call: isinstance ({'/T': True}, <class 'dict'>) {}
103:  After function call, result:  True
104:  Accessing
104:   Reading
104:      Reading
105:  Accessing
105:   Reading
105:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
106:  Control flow event
106:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
106:  After function call, result:  True
107:  Binary Operation True And True -> True
107:  Binary Operation True True -> True
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
108:  Accessing
108:   Reading
108:      Reading
109:  Accessing
109:   Reading
109:      Reading
110:  Accessing
110:   Reading
110:      Reading
111:  Accessing
111:   Reading
111:  Slice ['/Parent']
112:  Accessing
112:   Reading
112:      Reading
113:  Control flow event
113:  Before function call: traverse_pattern ({'/T': True}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': 
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '49152')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_7_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(radio_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x110b6f4c0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x110b6f4c0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (radio_1) -> (radio_1)
120:  Binary Operation True (radio_1) -> (radio_1)
122:  Control flow event
122:  Control-flow enter with condition (radio_1)
122:     If (radio_1)
121:  Accessing
121:   Reading
121:      Reading
113:  After function call, result:  (radio_1)
114:  Accessing
114:      Writing
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition (radio_1)
127:     If (radio_1)
126:  Accessing
126:   Reading
126:      Reading
134:  After function call, result:  (radio_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (radio_1)
144:     If (radio_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
35:  After function call, result:  radio_1
36:  Accessing
36:      Writing
37:  Accessing
37:   Reading
37:      Reading
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Slice ['radio_1']
40:  Control flow event
40:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.text.Text'>) {}
40:  After function call, result:  False
76:  Control flow event
76:  Control-flow enter with condition False
76:     If False
76:  Control flow event
76:  Control-flow exit
76:  If exit
77:  Control flow event
77:  Control-flow enter with condition True
77:     For {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
33:  Accessing
33:   Reading
33:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0)
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(l)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_9_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AS', '/Off')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition False
128:     For 
128:  Control flow event
128:  Control-flow exit
128:  For exit
134:  After function call, result:  None
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition None
144:     If None
144:  Control flow event
144:  Control-flow exit
144:  If exit
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/Parent': {'/T': True}}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/Parent': {'/T': True}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Parent']
103:  Control flow event
103:  Before function call: isinstance ({'/T': True}, <class 'dict'>) {}
103:  After function call, result:  True
104:  Accessing
104:   Reading
104:      Reading
105:  Accessing
105:   Reading
105:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
106:  Control flow event
106:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
106:  After function call, result:  True
107:  Binary Operation True And True -> True
107:  Binary Operation True True -> True
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
108:  Accessing
108:   Reading
108:      Reading
109:  Accessing
109:   Reading
109:      Reading
110:  Accessing
110:   Reading
110:      Reading
111:  Accessing
111:   Reading
111:  Slice ['/Parent']
112:  Accessing
112:   Reading
112:      Reading
113:  Control flow event
113:  Before function call: traverse_pattern ({'/T': True}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': 
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '49152')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_7_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(radio_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x110b6fba0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x110b6fba0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (radio_1) -> (radio_1)
120:  Binary Operation True (radio_1) -> (radio_1)
122:  Control flow event
122:  Control-flow enter with condition (radio_1)
122:     If (radio_1)
121:  Accessing
121:   Reading
121:      Reading
113:  After function call, result:  (radio_1)
114:  Accessing
114:      Writing
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition (radio_1)
127:     If (radio_1)
126:  Accessing
126:   Reading
126:      Reading
134:  After function call, result:  (radio_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (radio_1)
144:     If (radio_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
35:  After function call, result:  radio_1
36:  Accessing
36:      Writing
37:  Accessing
37:   Reading
37:      Reading
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Slice ['radio_1']
40:  Control flow event
40:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.text.Text'>) {}
40:  After function call, result:  False
76:  Control flow event
76:  Control-flow enter with condition False
76:     If False
76:  Control flow event
76:  Control-flow exit
76:  If exit
77:  Control flow event
77:  Control-flow enter with condition True
77:     For {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '/MK': {}, '/P'
33:  Accessing
33:   Reading
33:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['120.667', '301', '314.667', '326'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (41, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 14 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '131072')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Ch')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(glgg_oM95)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(dropdown_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x110fe8360> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x110fe8360> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (dropdown_1) -> (dropdown_1)
120:  Binary Operation True (dropdown_1) -> (dropdown_1)
122:  Control flow event
122:  Control-flow enter with condition (dropdown_1)
122:     If (dropdown_1)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (dropdown_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (dropdown_1)
144:     If (dropdown_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
35:  After function call, result:  dropdown_1
36:  Accessing
36:      Writing
37:  Accessing
37:   Reading
37:      Reading
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Slice ['dropdown_1']
40:  Control flow event
40:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x10782bcd0>, <class 'PyPDFForm.middleware.text.Text'>) {}
40:  After function call, result:  True
76:  Control flow event
76:  Control-flow enter with condition True
76:     If True
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:      Reading
43:  Accessing
43:   Reading
43:  Slice ['dropdown_1']
44:  Accessing
44:   Reading
44:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is None
53:  Control flow event
53:  Control-flow enter with condition True
53:     If True
45:  Accessing
45:   Reading
45:  Attribute:  get_text_field_font_size of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_text_f
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: get_text_field_font_size ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', 
246:  Control flow event
247:  Literal    value: 0
247:      Integer value: 0
248:  Accessing
248:      Writing
273:  Control flow event
273:  Control-flow enter with condition True
273:     For {'/DA': True}
249:  Accessing
249:   Reading
249:      Reading
250:  Accessing
250:   Reading
250:      Reading
251:  Accessing
251:   Reading
251:      Reading
252:  Control flow event
252:  Before function call: traverse_pattern ({'/DA': True}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '13
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['120.667', '301', '314.667', '326'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (41, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 14 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/DA']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x110fe8720> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x110fe8720> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/DA']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (/Helv 14 Tf 0 g) -> (/Helv 14 Tf 0 g)
120:  Binary Operation True (/Helv 14 Tf 0 g) -> (/Helv 14 Tf 0 g)
122:  Control flow event
122:  Control-flow enter with condition (/Helv 14 Tf 0 g)
122:     If (/Helv 14 Tf 0 g)
121:  Accessing
121:   Reading
121:      Reading
252:  After function call, result:  (/Helv 14 Tf 0 g)
253:  Accessing
253:      Writing
254:  Accessing
254:   Reading
254:      Reading
272:  Control flow event
272:  Control-flow enter with condition (/Helv 14 Tf 0 g)
272:     If (/Helv 14 Tf 0 g)
255:  Accessing
255:   Reading
255:      Reading
256:  Accessing
256:   Reading
256:  Attribute:  split of (/Helv 14 Tf 0 g) is <built-in method split of PdfString object at 0x107c64b50>
257:  Literal    value:  
257:      String value:  
258:  Control flow event
258:  Before function call: split (' ',) {}
258:  After function call, result:  ['(/Helv', '14', 'Tf', '0', 'g)']
259:  Accessing
259:      Writing
260:  Accessing
260:   Reading
260:      Reading
261:  Control flow event
261:  Before function call: len (['(/Helv', '14', 'Tf', '0', 'g)'],) {}
261:  After function call, result:  5
262:  Literal    value: 1
262:      Integer value: 1
263:  Comparison GreaterThan 5 1 -> True
263:  Comparison 5 1 -> True
271:  Control flow event
271:  Control-flow enter with condition True
271:     If True
265:  Accessing
265:   Reading
265:      Reading
266:  Literal    value: 1
266:      Integer value: 1
267:  Accessing
267:   Reading
267:  Slice [1]
268:  Control flow event
268:  Before function call: float ('14',) {}
268:  After function call, result:  14.0
269:  Accessing
269:      Writing
270:  Control flow event
270:  Break
274:  Accessing
274:   Reading
274:      Reading
47:  After function call, result:  14.0
51:  Binary Operation 14.0 Or <function update_text_field_attributes.<locals>.<lambda> at 0x110fe8680> -> 14.0
51:  Binary Operation 14.0 <function update_text_field_attributes.<locals>.<lambda> at 0x110fe8680> -> 14.0
52:  Accessing
52:      Writing
53:  Control flow event
53:  Control-flow exit
53:  If exit
54:  Accessing
54:   Reading
54:  Attribute:  is_text_multiline of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function is_text_multiline
55:  Accessing
55:   Reading
55:      Reading
56:  Control flow event
56:  Before function call: is_text_multiline ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': 
298:  Control flow event
299:  Accessing
299:      Writing
309:  Control flow event
309:  Control-flow enter with condition True
309:     For {'/Ff': True}
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:      Reading
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: traverse_pattern ({'/Ff': True}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '13
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['120.667', '301', '314.667', '326'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (41, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 14 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '131072')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Ff']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x110fe96c0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x110fe96c0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/Ff']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And 131072 -> 131072
120:  Binary Operation True 131072 -> 131072
122:  Control flow event
122:  Control-flow enter with condition 131072
122:     If 131072
121:  Accessing
121:   Reading
121:      Reading
303:  After function call, result:  131072
304:  Accessing
304:      Writing
305:  Accessing
305:   Reading
305:      Reading
306:  Comparison IsNot 131072 None -> True
306:  Comparison 131072 None -> True
308:  Control flow event
308:  Control-flow enter with condition True
308:     If True
307:  Control flow event
307:  Break
310:  Accessing
310:   Reading
310:      Reading
312:  Control flow event
312:  Control-flow enter with condition False
312:     If False
312:  Control flow event
312:  Control-flow exit
312:  If exit
314:  Accessing
314:   Reading
314:  Attribute:  format of {0:b} is <built-in method format of str object at 0x101f34cf0>
315:  Accessing
315:   Reading
315:      Reading
316:  Control flow event
316:  Before function call: int ('131072',) {}
316:  After function call, result:  131072
317:  Control flow event
317:  Before function call: format (131072,) {}
317:  After function call, result:  100000000000000000
318:  Literal    value: 1
318:      Integer value: 1
319:  Unary Operation 1 -> -1
319:  Unary Operation 1 -> -1
320:  Accessing
320:   Reading
320:  Slice [slice(None, None, -1)]
321:  Literal    value: 12
321:      Integer value: 12
322:  Accessing
322:   Reading
322:  Slice [12]
323:  Comparison Equal 0 1 -> False
323:  Comparison 0 1 -> False
56:  After function call, result:  False
61:  Binary Operation False And <function update_text_field_attributes.<locals>.<lambda> at 0x110fe8540> -> False
61:  Binary Operation False <function update_text_field_attributes.<locals>.<lambda> at 0x110fe8540> -> False
75:  Control flow event
75:  Control-flow enter with condition False
75:     If False
75:  Control flow event
75:  Control-flow exit
75:  If exit
76:  Control flow event
76:  Control-flow exit
76:  If exit
77:  Control flow event
77:  Control-flow enter with condition False
77:     For 
77:  Control flow event
77:  Control-flow exit
77:  For exit
78:  Control flow event
78:  Control-flow enter with condition False
78:     For 
78:  Control flow event
78:  Control-flow exit
78:  For exit
21:  Control flow event
21:  Exiting function
95:  After function call, result:  None
96:  Accessing
96:   Reading
96:      Reading
97:  Accessing
97:   Reading
97:  Attribute:  read of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is <bound method Wrapper.read of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390>>
98:  Control flow event
98:  Before function call: read () {}
39:  Control flow event
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:  Attribute:  stream of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendst
98:  After function call, result:  b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Type/XObject/Subt
106:  Control flow event
106:  Control-flow enter with condition b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Type/XObject/
106:     If b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12
99:  Accessing
99:   Reading
99:  Attribute:  set_character_x_paddings of <module 'PyPDFForm.middleware.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/middleware/template.py'> is <functio
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:  Attribute:  stream of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendst
102:  Accessing
102:   Reading
102:      Reading
103:  Accessing
103:   Reading
103:  Attribute:  elements of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x1
104:  Control flow event
104:  Before function call: set_character_x_paddings (b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<<
0:  Control flow event
1:  Accessing
1:   Reading
1:  Attribute:  get_elements_by_page of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_elements_b
2:  Accessing
2:   Reading
2:      Reading
3:  Control flow event
3:  Before function call: get_elements_by_page (b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Typ
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Control flow event
2:  Before function call: isinstance (b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Type/XObject/
2:  After function call, result:  True
7:  Control flow event
7:  Control-flow enter with condition True
7:     If True
3:  Accessing
3:   Reading
3:  Attribute:  PdfReader of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.pdfreader.PdfReader'>
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: PdfReader () {'fdata': b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Ty
5:  After function call, result:  {'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0
6:  Accessing
6:      Writing
7:  Control flow event
7:  Control-flow exit
7:  If exit
8:  Literal    value: {}
8:  Dictionary items: []
9:  Accessing
9:      Writing
11:  Accessing
11:   Reading
11:      Reading
12:  Accessing
12:   Reading
12:  Attribute:  pages of {'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612',
13:  Control flow event
13:  Before function call: enumerate ([{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25
13:  After function call, result:  <enumerate object at 0x110dc4c20>
53:  Control flow event
53:  Control-flow enter with condition True
53:     For (0, {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25, 0), (30, 0), (35, 0),
14:  Accessing
14:   Reading
14:      Reading
15:  Accessing
15:   Reading
15:  Attribute:  ANNOTATION_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Annots
16:  Accessing
16:   Reading
16:  Slice ['/Annots']
17:  Accessing
17:      Writing
20:  Literal    value: []
20:  List []
21:  Accessing
21:      Writing
18:  Literal    value: 1
18:      Integer value: 1
19:  Binary Operation 0 Add 1 -> 1
19:  Binary Operation 0 1 -> 1
22:  Accessing
22:   Reading
22:      Reading
52:  Control flow event
52:  Control-flow enter with condition [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25, 0), (30, 0), (35, 0), (40, 0)]
52:     If [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25, 0), (30, 0), (35, 0), (40, 0)]
23:  Accessing
23:   Reading
23:      Reading
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '617.707', '238.453', '666.667']), ('/AP', {'/N': (3, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['97.333', '617.707', '238.453', '666.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (3, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '4194304')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Tx')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x110fe9b20> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x110fe9b20> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Tx -> True
83:  Comparison /Tx /Tx -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [] is <built-in method append of list object at 0x1110e60c0>
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '500.373', '238.453', '549.333']), ('/AP', {'/N': (5, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['97.333', '500.373', '238.453', '549.333'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (5, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '4194304')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Tx')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x110fea020> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x110fea020> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Tx -> True
83:  Comparison /Tx /Tx -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '387.707', '238.453', '436.667']), ('/AP', {'/N': (7, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['97.333', '387.707', '238.453', '436.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (7, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '4194304')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Tx')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x110fea520> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x110fea520> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Tx -> True
83:  Comparison /Tx /Tx -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', 
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12,
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaD
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '637.253', '306.8', '665.333']), ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '637.253', '306.8', '665.333'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x110fe96c0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x110fe96c0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(4)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_3_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(check_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/V', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaD
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '637.253', '306.8', '665.333']), ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '637.253', '306.8', '665.333'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x110feaa20> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x110feaa20> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)',
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/Za
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '520.587', '306.8', '548.667']), ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '520.587', '306.8', '548.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x110feafc0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x110feafc0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(4)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_4_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(check_2)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/V', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (1
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/Za
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '520.587', '306.8', '548.667']), ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '520.587', '306.8', '548.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x110feb560> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x110feb560> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/D
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', '/F'
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0),
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '407.92', '306.8', '436']), ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}), ('
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '407.92', '306.8', '436'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x110fea7a0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x110fea7a0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(4)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_5_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(check_3)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/V', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0)
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '407.92', '306.8', '436']), ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}), ('
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '407.92', '306.8', '436'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x110feb4c0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x110feb4c0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Ch'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Ch'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Ch'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x111484540> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x111484540> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Btn -> False
83:  Comparison /Ch /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Tx'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Tx'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Tx'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x111484c20> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x111484c20> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x111484400> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x111484400> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/Subtype': '/Widget'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/Subtype': '/Widget'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/Subtype': '/Widget'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/Subtype': '/Widget'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x111484cc0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x111484cc0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0)
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Ch'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Ch'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Ch'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x111486200> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x111486200> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Btn -> False
83:  Comparison /Ch /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Tx'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Tx'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Tx'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x111486020> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x111486020> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x111486a20> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x111486a20> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/Subtype': '/Widget'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/Subtype': '/Widget'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/Subtype': '/Widget'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/Subtype': '/Widget'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x111487060> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x111487060> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0)
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Ch'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Ch'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Ch'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x111487b00> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x111487b00> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Btn -> False
83:  Comparison /Ch /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Tx'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Tx'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Tx'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x111c78220> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x111c78220> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x111486de0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x111486de0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/Subtype': '/Widget'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/Subtype': '/Widget'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/Subtype': '/Widget'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/Subtype': '/Widget'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x111c79080> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x111c79080> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0)
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '/MK': {}, '/P'
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['120.667', '301', '314.667', '326'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (41, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 14 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '131072')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Ch')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x111c79260> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x111c79260> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Ch -> False
83:  Comparison /Tx /Ch -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(glgg_oM95)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(dropdown_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Q', '0')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff':
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['120.667', '301', '314.667', '326'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (41, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 14 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '131072')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Ch')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x111c79760> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x111c79760> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Ch -> False
83:  Comparison /Btn /Ch -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(glgg_oM95)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(dropdown_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Q', '0')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['120.667', '301', '314.667', '326'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (41, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 14 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '131072')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Ch')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x111c79bc0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x111c79bc0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Ch -> True
83:  Comparison /Ch /Ch -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H'
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition False
51:     For 
51:  Control flow event
51:  Control-flow exit
51:  For exit
52:  Control flow event
52:  Control-flow exit
52:  If exit
53:  Control flow event
53:  Control-flow enter with condition False
53:     For 
53:  Control flow event
53:  Control-flow exit
53:  For exit
54:  Accessing
54:   Reading
54:      Reading
3:  After function call, result:  {1: [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT
4:  Accessing
4:   Reading
4:  Attribute:  values of {1: [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx'
5:  Control flow event
5:  Before function call: values () {}
5:  After function call, result:  dict_values([[{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '41943
28:  Control flow event
28:  Control-flow enter with condition True
28:     For [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': 
6:  Accessing
6:   Reading
6:      Reading
27:  Control flow event
27:  Control-flow enter with condition True
27:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
7:  Accessing
7:   Reading
7:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
8:  Accessing
8:   Reading
8:      Reading
9:  Control flow event
9:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/F
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '617.707', '238.453', '666.667']), ('/AP', {'/N': (3, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '617.707', '238.453', '666.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (3, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Tx')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_0_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(test_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x111c79d00> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x111c79d00> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (test_1) -> (test_1)
120:  Binary Operation True (test_1) -> (test_1)
122:  Control flow event
122:  Control-flow enter with condition (test_1)
122:     If (test_1)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (test_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (test_1)
144:     If (test_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
9:  After function call, result:  test_1
10:  Accessing
10:      Writing
11:  Accessing
11:   Reading
11:      Reading
12:  Accessing
12:   Reading
12:      Reading
13:  Accessing
13:   Reading
13:  Slice ['test_1']
14:  Accessing
14:      Writing
15:  Accessing
15:   Reading
15:      Reading
16:  Control flow event
16:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x104046910>, <class 'PyPDFForm.middleware.text.Text'>) {}
16:  After function call, result:  True
17:  Accessing
17:   Reading
17:      Reading
18:  Accessing
18:   Reading
18:  Attribute:  comb of <PyPDFForm.middleware.text.Text object at 0x104046910> is None
19:  Literal    value: True
19:      Boolean value: True
20:  Binary Operation True And False -> False
20:  Binary Operation True False -> False
26:  Control flow event
26:  Control-flow enter with condition False
26:     If False
26:  Control flow event
26:  Control-flow exit
26:  If exit
27:  Control flow event
27:  Control-flow enter with condition True
27:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
7:  Accessing
7:   Reading
7:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
8:  Accessing
8:   Reading
8:      Reading
9:  Control flow event
9:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/F
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '500.373', '238.453', '549.333']), ('/AP', {'/N': (5, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '500.373', '238.453', '549.333'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (5, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Tx')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_1_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(test_2)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x111c78cc0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x111c78cc0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (test_2) -> (test_2)
120:  Binary Operation True (test_2) -> (test_2)
122:  Control flow event
122:  Control-flow enter with condition (test_2)
122:     If (test_2)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (test_2)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (test_2)
144:     If (test_2)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
9:  After function call, result:  test_2
10:  Accessing
10:      Writing
11:  Accessing
11:   Reading
11:      Reading
12:  Accessing
12:   Reading
12:      Reading
13:  Accessing
13:   Reading
13:  Slice ['test_2']
14:  Accessing
14:      Writing
15:  Accessing
15:   Reading
15:      Reading
16:  Control flow event
16:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x103f00390>, <class 'PyPDFForm.middleware.text.Text'>) {}
16:  After function call, result:  True
17:  Accessing
17:   Reading
17:      Reading
18:  Accessing
18:   Reading
18:  Attribute:  comb of <PyPDFForm.middleware.text.Text object at 0x103f00390> is None
19:  Literal    value: True
19:      Boolean value: True
20:  Binary Operation True And False -> False
20:  Binary Operation True False -> False
26:  Control flow event
26:  Control-flow enter with condition False
26:     If False
26:  Control flow event
26:  Control-flow exit
26:  If exit
27:  Control flow event
27:  Control-flow enter with condition True
27:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
7:  Accessing
7:   Reading
7:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
8:  Accessing
8:   Reading
8:      Reading
9:  Control flow event
9:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/F
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '387.707', '238.453', '436.667']), ('/AP', {'/N': (7, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '387.707', '238.453', '436.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (7, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Tx')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_2_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(test_3)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x111c7a5c0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x111c7a5c0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (test_3) -> (test_3)
120:  Binary Operation True (test_3) -> (test_3)
122:  Control flow event
122:  Control-flow enter with condition (test_3)
122:     If (test_3)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (test_3)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (test_3)
144:     If (test_3)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
9:  After function call, result:  test_3
10:  Accessing
10:      Writing
11:  Accessing
11:   Reading
11:      Reading
12:  Accessing
12:   Reading
12:      Reading
13:  Accessing
13:   Reading
13:  Slice ['test_3']
14:  Accessing
14:      Writing
15:  Accessing
15:   Reading
15:      Reading
16:  Control flow event
16:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x10426e610>, <class 'PyPDFForm.middleware.text.Text'>) {}
16:  After function call, result:  True
17:  Accessing
17:   Reading
17:      Reading
18:  Accessing
18:   Reading
18:  Attribute:  comb of <PyPDFForm.middleware.text.Text object at 0x10426e610> is None
19:  Literal    value: True
19:      Boolean value: True
20:  Binary Operation True And False -> False
20:  Binary Operation True False -> False
26:  Control flow event
26:  Control-flow enter with condition False
26:     If False
26:  Control flow event
26:  Control-flow exit
26:  If exit
27:  Control flow event
27:  Control-flow enter with condition True
27:     For {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', 
7:  Accessing
7:   Reading
7:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
8:  Accessing
8:   Reading
8:      Reading
9:  Control flow event
9:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0),
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaD
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '637.253', '306.8', '665.333']), ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['278', '637.253', '306.8', '665.333'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(4)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_3_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(check_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x111c7a200> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x111c7a200> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (check_1) -> (check_1)
120:  Binary Operation True (check_1) -> (check_1)
122:  Control flow event
122:  Control-flow enter with condition (check_1)
122:     If (check_1)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (check_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (check_1)
144:     If (check_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
9:  After function call, result:  check_1
10:  Accessing
10:      Writing
11:  Accessing
11:   Reading
11:      Reading
12:  Accessing
12:   Reading
12:      Reading
13:  Accessing
13:   Reading
13:  Slice ['check_1']
14:  Accessing
14:      Writing
15:  Accessing
15:   Reading
15:      Reading
16:  Control flow event
16:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>, <class 'PyPDFForm.middleware.text.Text'>) {}
16:  After function call, result:  False
20:  Binary Operation False And <function set_character_x_paddings.<locals>.<lambda> at 0x111c7a200> -> False
20:  Binary Operation False <function set_character_x_paddings.<locals>.<lambda> at 0x111c7a200> -> False
26:  Control flow event
26:  Control-flow enter with condition False
26:     If False
26:  Control flow event
26:  Control-flow exit
26:  If exit
27:  Control flow event
27:  Control-flow enter with condition True
27:     For {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)',
7:  Accessing
7:   Reading
7:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
8:  Accessing
8:   Reading
8:      Reading
9:  Control flow event
9:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0)
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/Za
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '520.587', '306.8', '548.667']), ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['278', '520.587', '306.8', '548.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(4)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_4_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(check_2)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x111c7ae80> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x111c7ae80> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (check_2) -> (check_2)
120:  Binary Operation True (check_2) -> (check_2)
122:  Control flow event
122:  Control-flow enter with condition (check_2)
122:     If (check_2)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (check_2)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (check_2)
144:     If (check_2)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
9:  After function call, result:  check_2
10:  Accessing
10:      Writing
11:  Accessing
11:   Reading
11:      Reading
12:  Accessing
12:   Reading
12:      Reading
13:  Accessing
13:   Reading
13:  Slice ['check_2']
14:  Accessing
14:      Writing
15:  Accessing
15:   Reading
15:      Reading
16:  Control flow event
16:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>, <class 'PyPDFForm.middleware.text.Text'>) {}
16:  After function call, result:  False
20:  Binary Operation False And <function set_character_x_paddings.<locals>.<lambda> at 0x111c7ae80> -> False
20:  Binary Operation False <function set_character_x_paddings.<locals>.<lambda> at 0x111c7ae80> -> False
26:  Control flow event
26:  Control-flow enter with condition False
26:     If False
26:  Control flow event
26:  Control-flow exit
26:  If exit
27:  Control flow event
27:  Control-flow enter with condition True
27:     For {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', '/F'
7:  Accessing
7:   Reading
7:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
8:  Accessing
8:   Reading
8:      Reading
9:  Control flow event
9:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}},
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/O
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '407.92', '306.8', '436']), ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}), ('
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['278', '407.92', '306.8', '436'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(4)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_5_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(check_3)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x111c7ab60> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x111c7ab60> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (check_3) -> (check_3)
120:  Binary Operation True (check_3) -> (check_3)
122:  Control flow event
122:  Control-flow enter with condition (check_3)
122:     If (check_3)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (check_3)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (check_3)
144:     If (check_3)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
9:  After function call, result:  check_3
10:  Accessing
10:      Writing
11:  Accessing
11:   Reading
11:      Reading
12:  Accessing
12:   Reading
12:      Reading
13:  Accessing
13:   Reading
13:  Slice ['check_3']
14:  Accessing
14:      Writing
15:  Accessing
15:   Reading
15:      Reading
16:  Control flow event
16:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>, <class 'PyPDFForm.middleware.text.Text'>) {}
16:  After function call, result:  False
20:  Binary Operation False And <function set_character_x_paddings.<locals>.<lambda> at 0x111c7ab60> -> False
20:  Binary Operation False <function set_character_x_paddings.<locals>.<lambda> at 0x111c7ab60> -> False
26:  Control flow event
26:  Control-flow enter with condition False
26:     If False
26:  Control flow event
26:  Control-flow exit
26:  If exit
27:  Control flow event
27:  Control-flow enter with condition True
27:     For {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
7:  Accessing
7:   Reading
7:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
8:  Accessing
8:   Reading
8:      Reading
9:  Control flow event
9:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0)
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(l)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_6_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AS', '/Off')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition False
128:     For 
128:  Control flow event
128:  Control-flow exit
128:  For exit
134:  After function call, result:  None
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition None
144:     If None
144:  Control flow event
144:  Control-flow exit
144:  If exit
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/Parent': {'/T': True}}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/Parent': {'/T': True}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Parent']
103:  Control flow event
103:  Before function call: isinstance ({'/T': True}, <class 'dict'>) {}
103:  After function call, result:  True
104:  Accessing
104:   Reading
104:      Reading
105:  Accessing
105:   Reading
105:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
106:  Control flow event
106:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
106:  After function call, result:  True
107:  Binary Operation True And True -> True
107:  Binary Operation True True -> True
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
108:  Accessing
108:   Reading
108:      Reading
109:  Accessing
109:   Reading
109:      Reading
110:  Accessing
110:   Reading
110:      Reading
111:  Accessing
111:   Reading
111:  Slice ['/Parent']
112:  Accessing
112:   Reading
112:      Reading
113:  Control flow event
113:  Before function call: traverse_pattern ({'/T': True}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': 
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '49152')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_7_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(radio_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x111c7b9c0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x111c7b9c0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (radio_1) -> (radio_1)
120:  Binary Operation True (radio_1) -> (radio_1)
122:  Control flow event
122:  Control-flow enter with condition (radio_1)
122:     If (radio_1)
121:  Accessing
121:   Reading
121:      Reading
113:  After function call, result:  (radio_1)
114:  Accessing
114:      Writing
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition (radio_1)
127:     If (radio_1)
126:  Accessing
126:   Reading
126:      Reading
134:  After function call, result:  (radio_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (radio_1)
144:     If (radio_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
9:  After function call, result:  radio_1
10:  Accessing
10:      Writing
11:  Accessing
11:   Reading
11:      Reading
12:  Accessing
12:   Reading
12:      Reading
13:  Accessing
13:   Reading
13:  Slice ['radio_1']
14:  Accessing
14:      Writing
15:  Accessing
15:   Reading
15:      Reading
16:  Control flow event
16:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.text.Text'>) {}
16:  After function call, result:  False
20:  Binary Operation False And <function set_character_x_paddings.<locals>.<lambda> at 0x111c7b9c0> -> False
20:  Binary Operation False <function set_character_x_paddings.<locals>.<lambda> at 0x111c7b9c0> -> False
26:  Control flow event
26:  Control-flow enter with condition False
26:     If False
26:  Control flow event
26:  Control-flow exit
26:  If exit
27:  Control flow event
27:  Control-flow enter with condition True
27:     For {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
7:  Accessing
7:   Reading
7:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
8:  Accessing
8:   Reading
8:      Reading
9:  Control flow event
9:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0)
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(l)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_8_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AS', '/Off')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition False
128:     For 
128:  Control flow event
128:  Control-flow exit
128:  For exit
134:  After function call, result:  None
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition None
144:     If None
144:  Control flow event
144:  Control-flow exit
144:  If exit
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/Parent': {'/T': True}}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/Parent': {'/T': True}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Parent']
103:  Control flow event
103:  Before function call: isinstance ({'/T': True}, <class 'dict'>) {}
103:  After function call, result:  True
104:  Accessing
104:   Reading
104:      Reading
105:  Accessing
105:   Reading
105:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
106:  Control flow event
106:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
106:  After function call, result:  True
107:  Binary Operation True And True -> True
107:  Binary Operation True True -> True
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
108:  Accessing
108:   Reading
108:      Reading
109:  Accessing
109:   Reading
109:      Reading
110:  Accessing
110:   Reading
110:      Reading
111:  Accessing
111:   Reading
111:  Slice ['/Parent']
112:  Accessing
112:   Reading
112:      Reading
113:  Control flow event
113:  Before function call: traverse_pattern ({'/T': True}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': 
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '49152')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_7_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(radio_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x111c7b380> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x111c7b380> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (radio_1) -> (radio_1)
120:  Binary Operation True (radio_1) -> (radio_1)
122:  Control flow event
122:  Control-flow enter with condition (radio_1)
122:     If (radio_1)
121:  Accessing
121:   Reading
121:      Reading
113:  After function call, result:  (radio_1)
114:  Accessing
114:      Writing
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition (radio_1)
127:     If (radio_1)
126:  Accessing
126:   Reading
126:      Reading
134:  After function call, result:  (radio_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (radio_1)
144:     If (radio_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
9:  After function call, result:  radio_1
10:  Accessing
10:      Writing
11:  Accessing
11:   Reading
11:      Reading
12:  Accessing
12:   Reading
12:      Reading
13:  Accessing
13:   Reading
13:  Slice ['radio_1']
14:  Accessing
14:      Writing
15:  Accessing
15:   Reading
15:      Reading
16:  Control flow event
16:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.text.Text'>) {}
16:  After function call, result:  False
20:  Binary Operation False And <function set_character_x_paddings.<locals>.<lambda> at 0x1122cc540> -> False
20:  Binary Operation False <function set_character_x_paddings.<locals>.<lambda> at 0x1122cc540> -> False
26:  Control flow event
26:  Control-flow enter with condition False
26:     If False
26:  Control flow event
26:  Control-flow exit
26:  If exit
27:  Control flow event
27:  Control-flow enter with condition True
27:     For {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
7:  Accessing
7:   Reading
7:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
8:  Accessing
8:   Reading
8:      Reading
9:  Control flow event
9:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0)
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(l)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_9_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AS', '/Off')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition False
128:     For 
128:  Control flow event
128:  Control-flow exit
128:  For exit
134:  After function call, result:  None
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition None
144:     If None
144:  Control flow event
144:  Control-flow exit
144:  If exit
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/Parent': {'/T': True}}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/Parent': {'/T': True}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Parent']
103:  Control flow event
103:  Before function call: isinstance ({'/T': True}, <class 'dict'>) {}
103:  After function call, result:  True
104:  Accessing
104:   Reading
104:      Reading
105:  Accessing
105:   Reading
105:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
106:  Control flow event
106:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
106:  After function call, result:  True
107:  Binary Operation True And True -> True
107:  Binary Operation True True -> True
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
108:  Accessing
108:   Reading
108:      Reading
109:  Accessing
109:   Reading
109:      Reading
110:  Accessing
110:   Reading
110:      Reading
111:  Accessing
111:   Reading
111:  Slice ['/Parent']
112:  Accessing
112:   Reading
112:      Reading
113:  Control flow event
113:  Before function call: traverse_pattern ({'/T': True}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': 
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '49152')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_7_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(radio_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1122cc180> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1122cc180> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (radio_1) -> (radio_1)
120:  Binary Operation True (radio_1) -> (radio_1)
122:  Control flow event
122:  Control-flow enter with condition (radio_1)
122:     If (radio_1)
121:  Accessing
121:   Reading
121:      Reading
113:  After function call, result:  (radio_1)
114:  Accessing
114:      Writing
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition (radio_1)
127:     If (radio_1)
126:  Accessing
126:   Reading
126:      Reading
134:  After function call, result:  (radio_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (radio_1)
144:     If (radio_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
9:  After function call, result:  radio_1
10:  Accessing
10:      Writing
11:  Accessing
11:   Reading
11:      Reading
12:  Accessing
12:   Reading
12:      Reading
13:  Accessing
13:   Reading
13:  Slice ['radio_1']
14:  Accessing
14:      Writing
15:  Accessing
15:   Reading
15:      Reading
16:  Control flow event
16:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.text.Text'>) {}
16:  After function call, result:  False
20:  Binary Operation False And <function set_character_x_paddings.<locals>.<lambda> at 0x1122cc180> -> False
20:  Binary Operation False <function set_character_x_paddings.<locals>.<lambda> at 0x1122cc180> -> False
26:  Control flow event
26:  Control-flow enter with condition False
26:     If False
26:  Control flow event
26:  Control-flow exit
26:  If exit
27:  Control flow event
27:  Control-flow enter with condition True
27:     For {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '/MK': {}, '/P'
7:  Accessing
7:   Reading
7:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
8:  Accessing
8:   Reading
8:      Reading
9:  Control flow event
9:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['120.667', '301', '314.667', '326'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (41, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 14 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '131072')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Ch')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(glgg_oM95)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(dropdown_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1122cd300> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1122cd300> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (dropdown_1) -> (dropdown_1)
120:  Binary Operation True (dropdown_1) -> (dropdown_1)
122:  Control flow event
122:  Control-flow enter with condition (dropdown_1)
122:     If (dropdown_1)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (dropdown_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (dropdown_1)
144:     If (dropdown_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
9:  After function call, result:  dropdown_1
10:  Accessing
10:      Writing
11:  Accessing
11:   Reading
11:      Reading
12:  Accessing
12:   Reading
12:      Reading
13:  Accessing
13:   Reading
13:  Slice ['dropdown_1']
14:  Accessing
14:      Writing
15:  Accessing
15:   Reading
15:      Reading
16:  Control flow event
16:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x10782bcd0>, <class 'PyPDFForm.middleware.text.Text'>) {}
16:  After function call, result:  True
17:  Accessing
17:   Reading
17:      Reading
18:  Accessing
18:   Reading
18:  Attribute:  comb of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is None
19:  Literal    value: True
19:      Boolean value: True
20:  Binary Operation True And False -> False
20:  Binary Operation True False -> False
26:  Control flow event
26:  Control-flow enter with condition False
26:     If False
26:  Control flow event
26:  Control-flow exit
26:  If exit
27:  Control flow event
27:  Control-flow enter with condition False
27:     For 
27:  Control flow event
27:  Control-flow exit
27:  For exit
28:  Control flow event
28:  Control-flow enter with condition False
28:     For 
28:  Control flow event
28:  Control-flow exit
28:  For exit
29:  Accessing
29:   Reading
29:      Reading
104:  After function call, result:  {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x103f00390>, 'test_3': <PyPDFForm.middleware.text
105:  Accessing
105:      Writing
106:  Control flow event
106:  Control-flow exit
106:  If exit
107:  Accessing
107:   Reading
107:  Attribute:  remove_all_elements of <module 'PyPDFForm.core.utils' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/utils.py'> is <function remove_all_elements a
108:  Accessing
108:   Reading
108:  Attribute:  fill of <module 'PyPDFForm.core.filler' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/filler.py'> is <function fill at 0x10296ee80>
109:  Accessing
109:   Reading
109:      Reading
110:  Accessing
110:   Reading
110:  Attribute:  stream of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendst
111:  Accessing
111:   Reading
111:      Reading
112:  Accessing
112:   Reading
112:  Attribute:  elements of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is {'test_1': <PyPDFForm.middleware.text.Text object at 0x104046910>, 'test_2': <PyPDFForm.middleware.text.Text object at 0x1
113:  Control flow event
113:  Before function call: fill (b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Type/XObject/Subtyp
0:  Control flow event
1:  Accessing
1:   Reading
1:  Attribute:  PdfReader of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.pdfreader.PdfReader'>
2:  Accessing
2:   Reading
2:      Reading
3:  Control flow event
3:  Before function call: PdfReader () {'fdata': b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Ty
3:  After function call, result:  {'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0
4:  Accessing
4:      Writing
5:  Literal    value: {}
5:  Dictionary items: []
6:  Accessing
6:      Writing
7:  Literal    value: []
7:  List []
8:  Accessing
8:      Writing
9:  Literal    value: {}
9:  Dictionary items: []
10:  Accessing
10:      Writing
12:  Accessing
12:   Reading
12:  Attribute:  get_elements_by_page of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_elements_b
13:  Accessing
13:   Reading
13:      Reading
14:  Control flow event
14:  Before function call: get_elements_by_page ({'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/Media
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Control flow event
2:  Before function call: isinstance ({'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0'
2:  After function call, result:  False
7:  Control flow event
7:  Control-flow enter with condition False
7:     If False
7:  Control flow event
7:  Control-flow exit
7:  If exit
8:  Literal    value: {}
8:  Dictionary items: []
9:  Accessing
9:      Writing
11:  Accessing
11:   Reading
11:      Reading
12:  Accessing
12:   Reading
12:  Attribute:  pages of {'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612',
13:  Control flow event
13:  Before function call: enumerate ([{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25
13:  After function call, result:  <enumerate object at 0x1120d88b0>
53:  Control flow event
53:  Control-flow enter with condition True
53:     For (0, {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25, 0), (30, 0), (35, 0),
14:  Accessing
14:   Reading
14:      Reading
15:  Accessing
15:   Reading
15:  Attribute:  ANNOTATION_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Annots
16:  Accessing
16:   Reading
16:  Slice ['/Annots']
17:  Accessing
17:      Writing
20:  Literal    value: []
20:  List []
21:  Accessing
21:      Writing
18:  Literal    value: 1
18:      Integer value: 1
19:  Binary Operation 0 Add 1 -> 1
19:  Binary Operation 0 1 -> 1
22:  Accessing
22:   Reading
22:      Reading
52:  Control flow event
52:  Control-flow enter with condition [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25, 0), (30, 0), (35, 0), (40, 0)]
52:     If [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25, 0), (30, 0), (35, 0), (40, 0)]
23:  Accessing
23:   Reading
23:      Reading
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '617.707', '238.453', '666.667']), ('/AP', {'/N': (3, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['97.333', '617.707', '238.453', '666.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (3, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '4194304')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Tx')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1122cd940> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1122cd940> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Tx -> True
83:  Comparison /Tx /Tx -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [] is <built-in method append of list object at 0x111fbdf40>
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '500.373', '238.453', '549.333']), ('/AP', {'/N': (5, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['97.333', '500.373', '238.453', '549.333'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (5, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '4194304')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Tx')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1122cde40> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1122cde40> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Tx -> True
83:  Comparison /Tx /Tx -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '387.707', '238.453', '436.667']), ('/AP', {'/N': (7, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['97.333', '387.707', '238.453', '436.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (7, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '4194304')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Tx')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1122cd760> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1122cd760> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Tx -> True
83:  Comparison /Tx /Tx -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', 
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12,
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaD
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '637.253', '306.8', '665.333']), ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '637.253', '306.8', '665.333'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1122ce3e0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1122ce3e0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(4)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_3_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(check_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/V', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaD
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '637.253', '306.8', '665.333']), ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '637.253', '306.8', '665.333'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1122ce980> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1122ce980> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)',
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/Za
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '520.587', '306.8', '548.667']), ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '520.587', '306.8', '548.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1122cef20> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1122cef20> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(4)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_4_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(check_2)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/V', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (1
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/Za
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '520.587', '306.8', '548.667']), ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '520.587', '306.8', '548.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1122ce340> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1122ce340> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/D
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', '/F'
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0),
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '407.92', '306.8', '436']), ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}), ('
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '407.92', '306.8', '436'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1122cf2e0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1122cf2e0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(4)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_5_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(check_3)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/V', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0)
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '407.92', '306.8', '436']), ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}), ('
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['278', '407.92', '306.8', '436'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1122cf7e0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1122cf7e0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Ch'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Ch'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Ch'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x112788360> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x112788360> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Btn -> False
83:  Comparison /Ch /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Tx'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Tx'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Tx'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x112788860> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x112788860> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x112788b80> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x112788b80> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/Subtype': '/Widget'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/Subtype': '/Widget'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/Subtype': '/Widget'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/Subtype': '/Widget'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_6_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x112789620> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x112789620> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0)
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Ch'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Ch'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Ch'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x112789300> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x112789300> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Btn -> False
83:  Comparison /Ch /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Tx'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Tx'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Tx'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x11278a160> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x11278a160> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x11278a980> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x11278a980> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/Subtype': '/Widget'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/Subtype': '/Widget'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/Subtype': '/Widget'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/Subtype': '/Widget'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_8_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x11278afc0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x11278afc0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0)
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn'
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Ch'}},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Ch'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Ch'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Ch'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x11278b1a0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x11278b1a0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Btn -> False
83:  Comparison /Ch /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Tx'}},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Tx'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Tx'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Tx'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Op
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x11278aac0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x11278aac0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Btn -> False
83:  Comparison /Tx /Btn -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}}, {'/Parent': {'/Subtype': '/Widget'}}), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1132d04a0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1132d04a0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/Subtype': '/Widget'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/Subtype': '/Widget'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/Subtype': '/Widget'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/Subtype': '/Widget'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_7_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(radio_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', ['(Choice1)', '(Choice2)', '(Choice3)'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
77:  After function call, result:  False
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {'/CA': '(l)'})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(form_9_0)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AS', '/Off')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/Parent': {'/FT': '/Btn'}},), <class 'PyPDFForm.middleware.radio.Radio'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/Parent': {'/FT': '/Btn'}}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/Parent': {'/FT': '/Btn'}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152',
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/Parent']
67:  Control flow event
67:  Before function call: isinstance ({'/FT': '/Btn'}, <class 'dict'>) {}
67:  After function call, result:  True
68:  Accessing
68:   Reading
68:      Reading
69:  Accessing
69:   Reading
69:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
70:  Control flow event
70:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
70:  After function call, result:  True
71:  Binary Operation True And True -> True
71:  Binary Operation True True -> True
85:  Control flow event
85:  Control-flow enter with condition True
85:     If True
72:  Accessing
72:   Reading
72:      Reading
73:  Accessing
73:   Reading
73:      Reading
74:  Accessing
74:   Reading
74:      Reading
75:  Accessing
75:   Reading
75:  Slice ['/Parent']
76:  Accessing
76:   Reading
76:      Reading
77:  Control flow event
77:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/O
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '49152')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Btn')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1132d0a40> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1132d0a40> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Btn -> True
83:  Comparison /Btn /Btn -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
77:  After function call, result:  True
78:  Accessing
78:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0)
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition True
51:     For {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '/MK': {}, '/P'
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Tx'},), <class 'PyPDFForm.middleware.text.Text'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Tx'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Tx'}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['120.667', '301', '314.667', '326'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (41, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 14 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '131072')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Ch')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Tx', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1132d11c0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1132d11c0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Tx /Ch -> False
83:  Comparison /Tx /Ch -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(glgg_oM95)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(dropdown_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Q', '0')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Btn'},), <class 'PyPDFForm.middleware.checkbox.Checkbox'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Btn'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Btn'}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff':
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['120.667', '301', '314.667', '326'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (41, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 14 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '131072')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Ch')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Btn', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1132d16c0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1132d16c0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Btn /Ch -> False
83:  Comparison /Btn /Ch -> False
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/H', '/P')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/MK', {})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/TM', '(glgg_oM95)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/T', '(dropdown_1)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Opt', [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Q', '0')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition False
90:     For 
90:  Control flow event
90:  Control-flow exit
90:  For exit
91:  Literal    value: False
91:      Boolean value: False
35:  After function call, result:  False
36:  Binary Operation True And False -> False
36:  Binary Operation True False -> False
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition False
49:     If False
49:  Control flow event
49:  Control-flow exit
49:  If exit
50:  Control flow event
50:  Control-flow enter with condition True
50:     For (({'/FT': '/Ch'},), <class 'PyPDFForm.middleware.dropdown.Dropdown'>)
24:  Accessing
24:   Reading
24:      Reading
25:  Literal    value: 0
25:      Integer value: 0
26:  Accessing
26:   Reading
26:  Slice [0]
27:  Accessing
27:      Writing
28:  Literal    value: True
28:      Boolean value: True
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
38:  Control flow event
38:  Control-flow enter with condition True
38:     For {'/FT': '/Ch'}
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:      Reading
34:  Accessing
34:   Reading
34:      Reading
35:  Control flow event
35:  Before function call: find_pattern_match ({'/FT': '/Ch'}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': 
55:  Control flow event
57:  Accessing
57:   Reading
57:      Reading
58:  Accessing
58:   Reading
58:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
59:  Control flow event
59:  Before function call: items () {}
59:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Subtype', '/Widget')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Rect', ['120.667', '301', '314.667', '326'])
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/AP', {'/N': (41, 0)})
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/DA', '(/Helv 14 Tf 0 g)')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/F', '4')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/Ff', '131072')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition False
86:     If False
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow enter with condition True
90:     For ('/FT', '/Ch')
60:  Literal    value: False
60:      Boolean value: False
61:  Accessing
61:      Writing
62:  Accessing
62:   Reading
62:      Reading
63:  Accessing
63:   Reading
63:      Reading
86:  Control flow event
86:  Control-flow enter with condition True
86:     If True
64:  Accessing
64:   Reading
64:      Reading
65:  Accessing
65:   Reading
65:      Reading
66:  Accessing
66:   Reading
66:  Slice ['/FT']
67:  Control flow event
67:  Before function call: isinstance ('/Ch', <class 'dict'>) {}
67:  After function call, result:  False
71:  Binary Operation False And <function find_pattern_match.<locals>.<lambda> at 0x1034dcea0> -> False
71:  Binary Operation False <function find_pattern_match.<locals>.<lambda> at 0x1034dcea0> -> False
85:  Control flow event
85:  Control-flow enter with condition False
85:     If False
79:  Accessing
79:   Reading
79:      Reading
80:  Accessing
80:   Reading
80:      Reading
81:  Accessing
81:   Reading
81:  Slice ['/FT']
82:  Accessing
82:   Reading
82:      Reading
83:  Comparison Equal /Ch /Ch -> True
83:  Comparison /Ch /Ch -> True
84:  Accessing
84:      Writing
85:  Control flow event
85:  Control-flow exit
85:  If exit
86:  Control flow event
86:  Control-flow exit
86:  If exit
87:  Accessing
87:   Reading
87:      Reading
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
88:  Accessing
88:   Reading
88:      Reading
35:  After function call, result:  True
36:  Binary Operation True And True -> True
36:  Binary Operation True True -> True
37:  Accessing
37:      Writing
38:  Control flow event
38:  Control-flow enter with condition False
38:     For 
38:  Control flow event
38:  Control-flow exit
38:  For exit
39:  Accessing
39:   Reading
39:      Reading
49:  Control flow event
49:  Control-flow enter with condition True
49:     If True
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Literal    value: 1
42:      Integer value: 1
43:  Binary Operation 0 Add 1 -> 1
43:  Binary Operation 0 1 -> 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Accessing
45:   Reading
45:  Attribute:  append of [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/
46:  Accessing
46:   Reading
46:      Reading
47:  Control flow event
47:  Before function call: append ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H'
47:  After function call, result:  None
48:  Control flow event
48:  Break
51:  Control flow event
51:  Control-flow enter with condition False
51:     For 
51:  Control flow event
51:  Control-flow exit
51:  For exit
52:  Control flow event
52:  Control-flow exit
52:  If exit
53:  Control flow event
53:  Control-flow enter with condition False
53:     For 
53:  Control flow event
53:  Control-flow exit
53:  For exit
54:  Accessing
54:   Reading
54:      Reading
14:  After function call, result:  {1: [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT
15:  Accessing
15:   Reading
15:  Attribute:  items of {1: [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx',
16:  Control flow event
16:  Before function call: items () {}
16:  After function call, result:  dict_items([(1, [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '41
125:  Control flow event
125:  Control-flow enter with condition True
125:     For (1, [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/
17:  Literal    value: []
17:  List []
18:  Accessing
18:      Writing
19:  Accessing
19:   Reading
19:      Reading
20:  Accessing
20:   Reading
20:  Attribute:  append of [] is <built-in method append of list object at 0x1124dbd00>
21:  Literal    value: b''
21:      String value: b''
22:  Control flow event
22:  Before function call: append (b'',) {}
22:  After function call, result:  None
23:  Accessing
23:   Reading
23:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
24:  Accessing
24:   Reading
24:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
25:  Accessing
25:   Reading
25:      Reading
26:  Control flow event
26:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/F
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '617.707', '238.453', '666.667']), ('/AP', {'/N': (3, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '617.707', '238.453', '666.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (3, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Tx')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_0_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(test_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1034de200> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1034de200> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (test_1) -> (test_1)
120:  Binary Operation True (test_1) -> (test_1)
122:  Control flow event
122:  Control-flow enter with condition (test_1)
122:     If (test_1)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (test_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (test_1)
144:     If (test_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
26:  After function call, result:  test_1
27:  Accessing
27:      Writing
28:  Literal    value: False
28:      Boolean value: False
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:  Slice ['test_1']
33:  Literal    value: (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)
33:  Tuple items: [<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>]
34:  Control flow event
34:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x104046910>, (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)) {}
34:  After function call, result:  False
112:  Control flow event
112:  Control-flow enter with condition False
112:     If False
92:  Accessing
92:   Reading
92:  Attribute:  get_text_line_x_coordinates of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_tex
93:  Accessing
93:   Reading
93:      Reading
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:      Reading
96:  Accessing
96:   Reading
96:  Slice ['test_1']
97:  Control flow event
97:  Before function call: get_text_line_x_coordinates ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff':
669:  Control flow event
670:  Accessing
670:   Reading
670:      Reading
671:  Accessing
671:   Reading
671:  Attribute:  text_wrap_length of <PyPDFForm.middleware.text.Text object at 0x104046910> is None
672:  Comparison IsNot None None -> False
672:  Comparison None None -> False
676:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x1034dfe20> -> False
676:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x1034dfe20> -> False
680:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x1034deb60> -> False
680:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x1034deb60> -> False
684:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x1034df600> -> False
684:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x1034df600> -> False
691:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda> at 0x1034de200> -> False
691:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda> at 0x1034de200> -> False
713:  Control flow event
713:  Control-flow enter with condition False
713:     If False
713:  Control flow event
713:  Control-flow exit
713:  If exit
97:  After function call, result:  None
98:  Accessing
98:      Writing
99:  Accessing
99:   Reading
99:  Attribute:  get_draw_text_coordinates of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_draw_
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:      Reading
103:  Accessing
103:   Reading
103:  Slice ['test_1']
104:  Control flow event
104:  Before function call: get_draw_text_coordinates ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '
424:  Control flow event
425:  Accessing
425:   Reading
425:      Reading
426:  Accessing
426:   Reading
426:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x104046910> is test_1
428:  Binary Operation test_1 Or <function get_draw_text_coordinates.<locals>.<lambda> at 0x1034def20> -> test_1
428:  Binary Operation test_1 <function get_draw_text_coordinates.<locals>.<lambda> at 0x1034def20> -> test_1
429:  Accessing
429:      Writing
435:  Accessing
435:   Reading
435:      Reading
436:  Accessing
436:   Reading
436:  Attribute:  max_length of <PyPDFForm.middleware.text.Text object at 0x104046910> is None
437:  Comparison IsNot None None -> False
437:  Comparison None None -> False
440:  Control flow event
440:  Control-flow enter with condition False
440:     If False
438:  Accessing
438:   Reading
438:      Reading
439:  Control flow event
439:  Before function call: len ('test_1',) {}
439:  After function call, result:  6
440:  Control flow event
440:  Control-flow exit
440:  If exit
441:  Accessing
441:      Writing
442:  Accessing
442:   Reading
442:      Reading
443:  Accessing
443:   Reading
443:      Reading
444:  Accessing
444:   Reading
444:  Slice [slice(None, 6, None)]
445:  Accessing
445:      Writing
446:  Accessing
446:   Reading
446:      Reading
447:  Accessing
447:   Reading
447:  Attribute:  text_wrap_length of <PyPDFForm.middleware.text.Text object at 0x104046910> is None
448:  Comparison IsNot None None -> False
448:  Comparison None None -> False
454:  Control flow event
454:  Control-flow enter with condition False
454:     If False
454:  Control flow event
454:  Control-flow exit
454:  If exit
459:  Accessing
459:   Reading
459:      Reading
460:  Accessing
460:   Reading
460:  Attribute:  character_paddings of <PyPDFForm.middleware.text.Text object at 0x104046910> is None
461:  Comparison IsNot None None -> False
461:  Comparison None None -> False
464:  Control flow event
464:  Control-flow enter with condition False
464:     If False
462:  Accessing
462:   Reading
462:      Reading
463:  Accessing
463:   Reading
463:  Attribute:  character_paddings of <PyPDFForm.middleware.text.Text object at 0x104046910> is None
464:  Control flow event
464:  Control-flow exit
464:  If exit
465:  Accessing
465:      Writing
466:  Accessing
466:   Reading
466:      Reading
467:  Accessing
467:   Reading
467:      Reading
468:  Control flow event
468:  Before function call: get_element_alignment ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194
147:  Control flow event
148:  Accessing
148:      Writing
159:  Control flow event
159:  Control-flow enter with condition True
159:     For {'/Q': True}
149:  Accessing
149:   Reading
149:      Reading
150:  Accessing
150:   Reading
150:      Reading
151:  Accessing
151:   Reading
151:      Reading
152:  Control flow event
152:  Before function call: traverse_pattern ({'/Q': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/F
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '617.707', '238.453', '666.667']), ('/AP', {'/N': (3, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '617.707', '238.453', '666.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (3, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Tx')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_0_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(test_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Q', '0')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Q']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1034dcf40> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1034dcf40> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/Q']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And 0 -> 0
120:  Binary Operation True 0 -> 0
122:  Control flow event
122:  Control-flow enter with condition 0
122:     If 0
121:  Accessing
121:   Reading
121:      Reading
152:  After function call, result:  0
153:  Accessing
153:      Writing
154:  Accessing
154:   Reading
154:      Reading
158:  Control flow event
158:  Control-flow enter with condition 0
158:     If 0
155:  Accessing
155:   Reading
155:      Reading
156:  Accessing
156:      Writing
157:  Control flow event
157:  Break
160:  Accessing
160:   Reading
160:      Reading
468:  After function call, result:  0
470:  Binary Operation 0 Or <function get_draw_text_coordinates.<locals>.<lambda> at 0x1034def20> -> 0
470:  Binary Operation 0 <function get_draw_text_coordinates.<locals>.<lambda> at 0x1034def20> -> 0
471:  Accessing
471:      Writing
472:  Accessing
472:   Reading
472:      Reading
473:  Accessing
473:   Reading
473:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
474:  Accessing
474:   Reading
474:  Slice ['/Rect']
475:  Literal    value: 0
475:      Integer value: 0
476:  Accessing
476:   Reading
476:  Slice [0]
477:  Control flow event
477:  Before function call: float ('97.333',) {}
477:  After function call, result:  97.333
478:  Accessing
478:      Writing
479:  Accessing
479:   Reading
479:      Reading
480:  Control flow event
480:  Before function call: int ('0',) {}
480:  After function call, result:  0
481:  Literal    value: 0
481:      Integer value: 0
482:  Comparison NotEqual 0 0 -> False
482:  Comparison 0 0 -> False
577:  Control flow event
577:  Control-flow enter with condition False
577:     If False
577:  Control flow event
577:  Control-flow exit
577:  If exit
578:  Accessing
578:   Reading
578:      Reading
579:  Accessing
579:   Reading
579:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x104046910> is 8.64
580:  Literal    value: 96
580:      Integer value: 96
581:  Binary Operation 8.64 Multiply 96 -> 829.44
581:  Binary Operation 8.64 96 -> 829.44
582:  Literal    value: 72
582:      Integer value: 72
583:  Binary Operation 829.44 Divide 72 -> 11.520000000000001
583:  Binary Operation 829.44 72 -> 11.520000000000001
584:  Accessing
584:      Writing
585:  Accessing
585:   Reading
585:      Reading
586:  Accessing
586:   Reading
586:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
587:  Accessing
587:   Reading
587:  Slice ['/Rect']
588:  Literal    value: 1
588:      Integer value: 1
589:  Accessing
589:   Reading
589:  Slice [1]
590:  Control flow event
590:  Before function call: float ('617.707',) {}
590:  After function call, result:  617.707
591:  Accessing
591:   Reading
591:      Reading
592:  Accessing
592:   Reading
592:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
593:  Accessing
593:   Reading
593:  Slice ['/Rect']
594:  Literal    value: 3
594:      Integer value: 3
595:  Accessing
595:   Reading
595:  Slice [3]
596:  Control flow event
596:  Before function call: float ('666.667',) {}
596:  After function call, result:  666.667
597:  Binary Operation 617.707 Add 666.667 -> 1284.374
597:  Binary Operation 617.707 666.667 -> 1284.374
598:  Literal    value: 2
598:      Integer value: 2
599:  Binary Operation 1284.374 Divide 2 -> 642.187
599:  Binary Operation 1284.374 2 -> 642.187
600:  Accessing
600:      Writing
601:  Accessing
601:   Reading
601:      Reading
602:  Accessing
602:   Reading
602:      Reading
603:  Literal    value: 2
603:      Integer value: 2
604:  Binary Operation 11.520000000000001 Divide 2 -> 5.760000000000001
604:  Binary Operation 11.520000000000001 2 -> 5.760000000000001
605:  Binary Operation 642.187 Subtract 5.760000000000001 -> 636.427
605:  Binary Operation 642.187 5.760000000000001 -> 636.427
606:  Accessing
606:   Reading
606:      Reading
607:  Binary Operation 636.427 Add 642.187 -> 1278.614
607:  Binary Operation 636.427 642.187 -> 1278.614
608:  Literal    value: 2
608:      Integer value: 2
609:  Binary Operation 1278.614 Divide 2 -> 639.307
609:  Binary Operation 1278.614 2 -> 639.307
610:  Accessing
610:      Writing
611:  Accessing
611:   Reading
611:      Reading
612:  Accessing
612:   Reading
612:      Reading
613:  Control flow event
613:  Before function call: is_text_multiline ({'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304'
298:  Control flow event
299:  Accessing
299:      Writing
309:  Control flow event
309:  Control-flow enter with condition True
309:     For {'/Ff': True}
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:      Reading
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: traverse_pattern ({'/Ff': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.667'], '/AP': {'/N': (3, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '617.707', '238.453', '666.667']), ('/AP', {'/N': (3, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '617.707', '238.453', '666.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (3, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Ff']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1034de0c0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1034de0c0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/Ff']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And 4194304 -> 4194304
120:  Binary Operation True 4194304 -> 4194304
122:  Control flow event
122:  Control-flow enter with condition 4194304
122:     If 4194304
121:  Accessing
121:   Reading
121:      Reading
303:  After function call, result:  4194304
304:  Accessing
304:      Writing
305:  Accessing
305:   Reading
305:      Reading
306:  Comparison IsNot 4194304 None -> True
306:  Comparison 4194304 None -> True
308:  Control flow event
308:  Control-flow enter with condition True
308:     If True
307:  Control flow event
307:  Break
310:  Accessing
310:   Reading
310:      Reading
312:  Control flow event
312:  Control-flow enter with condition False
312:     If False
312:  Control flow event
312:  Control-flow exit
312:  If exit
314:  Accessing
314:   Reading
314:  Attribute:  format of {0:b} is <built-in method format of str object at 0x101f34cf0>
315:  Accessing
315:   Reading
315:      Reading
316:  Control flow event
316:  Before function call: int ('4194304',) {}
316:  After function call, result:  4194304
317:  Control flow event
317:  Before function call: format (4194304,) {}
317:  After function call, result:  10000000000000000000000
318:  Literal    value: 1
318:      Integer value: 1
319:  Unary Operation 1 -> -1
319:  Unary Operation 1 -> -1
320:  Accessing
320:   Reading
320:  Slice [slice(None, None, -1)]
321:  Literal    value: 12
321:      Integer value: 12
322:  Accessing
322:   Reading
322:  Slice [12]
323:  Comparison Equal 0 1 -> False
323:  Comparison 0 1 -> False
613:  After function call, result:  False
625:  Control flow event
625:  Control-flow enter with condition False
625:     If False
625:  Control flow event
625:  Control-flow exit
625:  If exit
626:  Accessing
626:   Reading
626:      Reading
627:  Control flow event
627:  Before function call: int ('0',) {}
627:  After function call, result:  0
628:  Literal    value: 1
628:      Integer value: 1
629:  Comparison Equal 0 1 -> False
629:  Comparison 0 1 -> False
633:  Binary Operation False And <function get_draw_text_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x1034de980> -> False
633:  Binary Operation False <function get_draw_text_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x1034de980> -> False
637:  Binary Operation False And <function get_draw_text_coordinates.<locals>.<lambda> at 0x1034defc0> -> False
637:  Binary Operation False <function get_draw_text_coordinates.<locals>.<lambda> at 0x1034defc0> -> False
665:  Control flow event
665:  Control-flow enter with condition False
665:     If False
665:  Control flow event
665:  Control-flow exit
665:  If exit
666:  Accessing
666:   Reading
666:      Reading
667:  Accessing
667:   Reading
667:      Reading
668:  Literal    value: (97.333, 639.307)
668:  Tuple items: [97.333, 639.307]
104:  After function call, result:  (97.333, 639.307)
105:  Accessing
105:      Writing
106:  Accessing
106:   Reading
106:      Reading
107:  Accessing
107:   Reading
107:      Reading
108:  Accessing
108:   Reading
108:  Slice ['test_1']
109:  Accessing
109:      Writing
110:  Literal    value: True
110:      Boolean value: True
111:  Accessing
111:      Writing
112:  Control flow event
112:  Control-flow exit
112:  If exit
113:  Accessing
113:   Reading
113:      Reading
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
114:  Accessing
114:   Reading
114:      Reading
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:  Slice [1]
117:  Accessing
117:   Reading
117:  Attribute:  append of [] is <built-in method append of list object at 0x1131ec180>
118:  Accessing
118:   Reading
118:      Reading
119:  Accessing
119:   Reading
119:      Reading
120:  Accessing
120:   Reading
120:      Reading
121:  Literal    value: [<PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307]
121:  List [<PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307]
122:  Control flow event
122:  Before function call: append ([<PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307],) {}
122:  After function call, result:  None
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow enter with condition True
124:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
24:  Accessing
24:   Reading
24:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
25:  Accessing
25:   Reading
25:      Reading
26:  Control flow event
26:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/F
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '500.373', '238.453', '549.333']), ('/AP', {'/N': (5, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '500.373', '238.453', '549.333'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (5, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Tx')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_1_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(test_2)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1034dc360> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1034dc360> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (test_2) -> (test_2)
120:  Binary Operation True (test_2) -> (test_2)
122:  Control flow event
122:  Control-flow enter with condition (test_2)
122:     If (test_2)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (test_2)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (test_2)
144:     If (test_2)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
26:  After function call, result:  test_2
27:  Accessing
27:      Writing
28:  Literal    value: False
28:      Boolean value: False
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:  Slice ['test_2']
33:  Literal    value: (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)
33:  Tuple items: [<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>]
34:  Control flow event
34:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x103f00390>, (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)) {}
34:  After function call, result:  False
112:  Control flow event
112:  Control-flow enter with condition False
112:     If False
92:  Accessing
92:   Reading
92:  Attribute:  get_text_line_x_coordinates of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_tex
93:  Accessing
93:   Reading
93:      Reading
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:      Reading
96:  Accessing
96:   Reading
96:  Slice ['test_2']
97:  Control flow event
97:  Before function call: get_text_line_x_coordinates ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff':
669:  Control flow event
670:  Accessing
670:   Reading
670:      Reading
671:  Accessing
671:   Reading
671:  Attribute:  text_wrap_length of <PyPDFForm.middleware.text.Text object at 0x103f00390> is None
672:  Comparison IsNot None None -> False
672:  Comparison None None -> False
676:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x1039985e0> -> False
676:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x1039985e0> -> False
680:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x1034de840> -> False
680:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x1034de840> -> False
684:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x1034dfd80> -> False
684:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x1034dfd80> -> False
691:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda> at 0x1034dc360> -> False
691:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda> at 0x1034dc360> -> False
713:  Control flow event
713:  Control-flow enter with condition False
713:     If False
713:  Control flow event
713:  Control-flow exit
713:  If exit
97:  After function call, result:  None
98:  Accessing
98:      Writing
99:  Accessing
99:   Reading
99:  Attribute:  get_draw_text_coordinates of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_draw_
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:      Reading
103:  Accessing
103:   Reading
103:  Slice ['test_2']
104:  Control flow event
104:  Before function call: get_draw_text_coordinates ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '
424:  Control flow event
425:  Accessing
425:   Reading
425:      Reading
426:  Accessing
426:   Reading
426:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x103f00390> is test_2
428:  Binary Operation test_2 Or <function get_draw_text_coordinates.<locals>.<lambda> at 0x1034dc860> -> test_2
428:  Binary Operation test_2 <function get_draw_text_coordinates.<locals>.<lambda> at 0x1034dc860> -> test_2
429:  Accessing
429:      Writing
435:  Accessing
435:   Reading
435:      Reading
436:  Accessing
436:   Reading
436:  Attribute:  max_length of <PyPDFForm.middleware.text.Text object at 0x103f00390> is None
437:  Comparison IsNot None None -> False
437:  Comparison None None -> False
440:  Control flow event
440:  Control-flow enter with condition False
440:     If False
438:  Accessing
438:   Reading
438:      Reading
439:  Control flow event
439:  Before function call: len ('test_2',) {}
439:  After function call, result:  6
440:  Control flow event
440:  Control-flow exit
440:  If exit
441:  Accessing
441:      Writing
442:  Accessing
442:   Reading
442:      Reading
443:  Accessing
443:   Reading
443:      Reading
444:  Accessing
444:   Reading
444:  Slice [slice(None, 6, None)]
445:  Accessing
445:      Writing
446:  Accessing
446:   Reading
446:      Reading
447:  Accessing
447:   Reading
447:  Attribute:  text_wrap_length of <PyPDFForm.middleware.text.Text object at 0x103f00390> is None
448:  Comparison IsNot None None -> False
448:  Comparison None None -> False
454:  Control flow event
454:  Control-flow enter with condition False
454:     If False
454:  Control flow event
454:  Control-flow exit
454:  If exit
459:  Accessing
459:   Reading
459:      Reading
460:  Accessing
460:   Reading
460:  Attribute:  character_paddings of <PyPDFForm.middleware.text.Text object at 0x103f00390> is None
461:  Comparison IsNot None None -> False
461:  Comparison None None -> False
464:  Control flow event
464:  Control-flow enter with condition False
464:     If False
462:  Accessing
462:   Reading
462:      Reading
463:  Accessing
463:   Reading
463:  Attribute:  character_paddings of <PyPDFForm.middleware.text.Text object at 0x103f00390> is None
464:  Control flow event
464:  Control-flow exit
464:  If exit
465:  Accessing
465:      Writing
466:  Accessing
466:   Reading
466:      Reading
467:  Accessing
467:   Reading
467:      Reading
468:  Control flow event
468:  Before function call: get_element_alignment ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194
147:  Control flow event
148:  Accessing
148:      Writing
159:  Control flow event
159:  Control-flow enter with condition True
159:     For {'/Q': True}
149:  Accessing
149:   Reading
149:      Reading
150:  Accessing
150:   Reading
150:      Reading
151:  Accessing
151:   Reading
151:      Reading
152:  Control flow event
152:  Before function call: traverse_pattern ({'/Q': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/F
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '500.373', '238.453', '549.333']), ('/AP', {'/N': (5, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '500.373', '238.453', '549.333'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (5, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Tx')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_1_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(test_2)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Q', '0')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Q']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1034df1a0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1034df1a0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/Q']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And 0 -> 0
120:  Binary Operation True 0 -> 0
122:  Control flow event
122:  Control-flow enter with condition 0
122:     If 0
121:  Accessing
121:   Reading
121:      Reading
152:  After function call, result:  0
153:  Accessing
153:      Writing
154:  Accessing
154:   Reading
154:      Reading
158:  Control flow event
158:  Control-flow enter with condition 0
158:     If 0
155:  Accessing
155:   Reading
155:      Reading
156:  Accessing
156:      Writing
157:  Control flow event
157:  Break
160:  Accessing
160:   Reading
160:      Reading
468:  After function call, result:  0
470:  Binary Operation 0 Or <function get_draw_text_coordinates.<locals>.<lambda> at 0x1039985e0> -> 0
470:  Binary Operation 0 <function get_draw_text_coordinates.<locals>.<lambda> at 0x1039985e0> -> 0
471:  Accessing
471:      Writing
472:  Accessing
472:   Reading
472:      Reading
473:  Accessing
473:   Reading
473:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
474:  Accessing
474:   Reading
474:  Slice ['/Rect']
475:  Literal    value: 0
475:      Integer value: 0
476:  Accessing
476:   Reading
476:  Slice [0]
477:  Control flow event
477:  Before function call: float ('97.333',) {}
477:  After function call, result:  97.333
478:  Accessing
478:      Writing
479:  Accessing
479:   Reading
479:      Reading
480:  Control flow event
480:  Before function call: int ('0',) {}
480:  After function call, result:  0
481:  Literal    value: 0
481:      Integer value: 0
482:  Comparison NotEqual 0 0 -> False
482:  Comparison 0 0 -> False
577:  Control flow event
577:  Control-flow enter with condition False
577:     If False
577:  Control flow event
577:  Control-flow exit
577:  If exit
578:  Accessing
578:   Reading
578:      Reading
579:  Accessing
579:   Reading
579:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x103f00390> is 8.64
580:  Literal    value: 96
580:      Integer value: 96
581:  Binary Operation 8.64 Multiply 96 -> 829.44
581:  Binary Operation 8.64 96 -> 829.44
582:  Literal    value: 72
582:      Integer value: 72
583:  Binary Operation 829.44 Divide 72 -> 11.520000000000001
583:  Binary Operation 829.44 72 -> 11.520000000000001
584:  Accessing
584:      Writing
585:  Accessing
585:   Reading
585:      Reading
586:  Accessing
586:   Reading
586:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
587:  Accessing
587:   Reading
587:  Slice ['/Rect']
588:  Literal    value: 1
588:      Integer value: 1
589:  Accessing
589:   Reading
589:  Slice [1]
590:  Control flow event
590:  Before function call: float ('500.373',) {}
590:  After function call, result:  500.373
591:  Accessing
591:   Reading
591:      Reading
592:  Accessing
592:   Reading
592:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
593:  Accessing
593:   Reading
593:  Slice ['/Rect']
594:  Literal    value: 3
594:      Integer value: 3
595:  Accessing
595:   Reading
595:  Slice [3]
596:  Control flow event
596:  Before function call: float ('549.333',) {}
596:  After function call, result:  549.333
597:  Binary Operation 500.373 Add 549.333 -> 1049.706
597:  Binary Operation 500.373 549.333 -> 1049.706
598:  Literal    value: 2
598:      Integer value: 2
599:  Binary Operation 1049.706 Divide 2 -> 524.853
599:  Binary Operation 1049.706 2 -> 524.853
600:  Accessing
600:      Writing
601:  Accessing
601:   Reading
601:      Reading
602:  Accessing
602:   Reading
602:      Reading
603:  Literal    value: 2
603:      Integer value: 2
604:  Binary Operation 11.520000000000001 Divide 2 -> 5.760000000000001
604:  Binary Operation 11.520000000000001 2 -> 5.760000000000001
605:  Binary Operation 524.853 Subtract 5.760000000000001 -> 519.093
605:  Binary Operation 524.853 5.760000000000001 -> 519.093
606:  Accessing
606:   Reading
606:      Reading
607:  Binary Operation 519.093 Add 524.853 -> 1043.946
607:  Binary Operation 519.093 524.853 -> 1043.946
608:  Literal    value: 2
608:      Integer value: 2
609:  Binary Operation 1043.946 Divide 2 -> 521.973
609:  Binary Operation 1043.946 2 -> 521.973
610:  Accessing
610:      Writing
611:  Accessing
611:   Reading
611:      Reading
612:  Accessing
612:   Reading
612:      Reading
613:  Control flow event
613:  Before function call: is_text_multiline ({'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304'
298:  Control flow event
299:  Accessing
299:      Writing
309:  Control flow event
309:  Control-flow enter with condition True
309:     For {'/Ff': True}
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:      Reading
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: traverse_pattern ({'/Ff': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '500.373', '238.453', '549.333'], '/AP': {'/N': (5, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '500.373', '238.453', '549.333']), ('/AP', {'/N': (5, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '500.373', '238.453', '549.333'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (5, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Ff']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x10399afc0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x10399afc0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/Ff']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And 4194304 -> 4194304
120:  Binary Operation True 4194304 -> 4194304
122:  Control flow event
122:  Control-flow enter with condition 4194304
122:     If 4194304
121:  Accessing
121:   Reading
121:      Reading
303:  After function call, result:  4194304
304:  Accessing
304:      Writing
305:  Accessing
305:   Reading
305:      Reading
306:  Comparison IsNot 4194304 None -> True
306:  Comparison 4194304 None -> True
308:  Control flow event
308:  Control-flow enter with condition True
308:     If True
307:  Control flow event
307:  Break
310:  Accessing
310:   Reading
310:      Reading
312:  Control flow event
312:  Control-flow enter with condition False
312:     If False
312:  Control flow event
312:  Control-flow exit
312:  If exit
314:  Accessing
314:   Reading
314:  Attribute:  format of {0:b} is <built-in method format of str object at 0x101f34cf0>
315:  Accessing
315:   Reading
315:      Reading
316:  Control flow event
316:  Before function call: int ('4194304',) {}
316:  After function call, result:  4194304
317:  Control flow event
317:  Before function call: format (4194304,) {}
317:  After function call, result:  10000000000000000000000
318:  Literal    value: 1
318:      Integer value: 1
319:  Unary Operation 1 -> -1
319:  Unary Operation 1 -> -1
320:  Accessing
320:   Reading
320:  Slice [slice(None, None, -1)]
321:  Literal    value: 12
321:      Integer value: 12
322:  Accessing
322:   Reading
322:  Slice [12]
323:  Comparison Equal 0 1 -> False
323:  Comparison 0 1 -> False
613:  After function call, result:  False
625:  Control flow event
625:  Control-flow enter with condition False
625:     If False
625:  Control flow event
625:  Control-flow exit
625:  If exit
626:  Accessing
626:   Reading
626:      Reading
627:  Control flow event
627:  Before function call: int ('0',) {}
627:  After function call, result:  0
628:  Literal    value: 1
628:      Integer value: 1
629:  Comparison Equal 0 1 -> False
629:  Comparison 0 1 -> False
633:  Binary Operation False And <function get_draw_text_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x10399bec0> -> False
633:  Binary Operation False <function get_draw_text_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x10399bec0> -> False
637:  Binary Operation False And <function get_draw_text_coordinates.<locals>.<lambda> at 0x10399b9c0> -> False
637:  Binary Operation False <function get_draw_text_coordinates.<locals>.<lambda> at 0x10399b9c0> -> False
665:  Control flow event
665:  Control-flow enter with condition False
665:     If False
665:  Control flow event
665:  Control-flow exit
665:  If exit
666:  Accessing
666:   Reading
666:      Reading
667:  Accessing
667:   Reading
667:      Reading
668:  Literal    value: (97.333, 521.973)
668:  Tuple items: [97.333, 521.973]
104:  After function call, result:  (97.333, 521.973)
105:  Accessing
105:      Writing
106:  Accessing
106:   Reading
106:      Reading
107:  Accessing
107:   Reading
107:      Reading
108:  Accessing
108:   Reading
108:  Slice ['test_2']
109:  Accessing
109:      Writing
110:  Literal    value: True
110:      Boolean value: True
111:  Accessing
111:      Writing
112:  Control flow event
112:  Control-flow exit
112:  If exit
113:  Accessing
113:   Reading
113:      Reading
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
114:  Accessing
114:   Reading
114:      Reading
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:  Slice [1]
117:  Accessing
117:   Reading
117:  Attribute:  append of [[<PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307]] is <built-in method append of list object at 0x1131ec180>
118:  Accessing
118:   Reading
118:      Reading
119:  Accessing
119:   Reading
119:      Reading
120:  Accessing
120:   Reading
120:      Reading
121:  Literal    value: [<PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973]
121:  List [<PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973]
122:  Control flow event
122:  Before function call: append ([<PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973],) {}
122:  After function call, result:  None
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow enter with condition True
124:     For {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK': {}, '/P': {
24:  Accessing
24:   Reading
24:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
25:  Accessing
25:   Reading
25:      Reading
26:  Control flow event
26:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/F
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '387.707', '238.453', '436.667']), ('/AP', {'/N': (7, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '387.707', '238.453', '436.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (7, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Tx')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_2_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(test_3)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x103998860> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x103998860> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (test_3) -> (test_3)
120:  Binary Operation True (test_3) -> (test_3)
122:  Control flow event
122:  Control-flow enter with condition (test_3)
122:     If (test_3)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (test_3)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (test_3)
144:     If (test_3)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
26:  After function call, result:  test_3
27:  Accessing
27:      Writing
28:  Literal    value: False
28:      Boolean value: False
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:  Slice ['test_3']
33:  Literal    value: (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)
33:  Tuple items: [<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>]
34:  Control flow event
34:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x10426e610>, (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)) {}
34:  After function call, result:  False
112:  Control flow event
112:  Control-flow enter with condition False
112:     If False
92:  Accessing
92:   Reading
92:  Attribute:  get_text_line_x_coordinates of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_tex
93:  Accessing
93:   Reading
93:      Reading
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:      Reading
96:  Accessing
96:   Reading
96:  Slice ['test_3']
97:  Control flow event
97:  Before function call: get_text_line_x_coordinates ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff':
669:  Control flow event
670:  Accessing
670:   Reading
670:      Reading
671:  Accessing
671:   Reading
671:  Attribute:  text_wrap_length of <PyPDFForm.middleware.text.Text object at 0x10426e610> is None
672:  Comparison IsNot None None -> False
672:  Comparison None None -> False
676:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x103998fe0> -> False
676:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x103998fe0> -> False
680:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x103998ae0> -> False
680:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x103998ae0> -> False
684:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x103998680> -> False
684:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x103998680> -> False
691:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda> at 0x103998860> -> False
691:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda> at 0x103998860> -> False
713:  Control flow event
713:  Control-flow enter with condition False
713:     If False
713:  Control flow event
713:  Control-flow exit
713:  If exit
97:  After function call, result:  None
98:  Accessing
98:      Writing
99:  Accessing
99:   Reading
99:  Attribute:  get_draw_text_coordinates of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_draw_
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:      Reading
103:  Accessing
103:   Reading
103:  Slice ['test_3']
104:  Control flow event
104:  Before function call: get_draw_text_coordinates ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '
424:  Control flow event
425:  Accessing
425:   Reading
425:      Reading
426:  Accessing
426:   Reading
426:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x10426e610> is test_3
428:  Binary Operation test_3 Or <function get_draw_text_coordinates.<locals>.<lambda> at 0x103999a80> -> test_3
428:  Binary Operation test_3 <function get_draw_text_coordinates.<locals>.<lambda> at 0x103999a80> -> test_3
429:  Accessing
429:      Writing
435:  Accessing
435:   Reading
435:      Reading
436:  Accessing
436:   Reading
436:  Attribute:  max_length of <PyPDFForm.middleware.text.Text object at 0x10426e610> is None
437:  Comparison IsNot None None -> False
437:  Comparison None None -> False
440:  Control flow event
440:  Control-flow enter with condition False
440:     If False
438:  Accessing
438:   Reading
438:      Reading
439:  Control flow event
439:  Before function call: len ('test_3',) {}
439:  After function call, result:  6
440:  Control flow event
440:  Control-flow exit
440:  If exit
441:  Accessing
441:      Writing
442:  Accessing
442:   Reading
442:      Reading
443:  Accessing
443:   Reading
443:      Reading
444:  Accessing
444:   Reading
444:  Slice [slice(None, 6, None)]
445:  Accessing
445:      Writing
446:  Accessing
446:   Reading
446:      Reading
447:  Accessing
447:   Reading
447:  Attribute:  text_wrap_length of <PyPDFForm.middleware.text.Text object at 0x10426e610> is None
448:  Comparison IsNot None None -> False
448:  Comparison None None -> False
454:  Control flow event
454:  Control-flow enter with condition False
454:     If False
454:  Control flow event
454:  Control-flow exit
454:  If exit
459:  Accessing
459:   Reading
459:      Reading
460:  Accessing
460:   Reading
460:  Attribute:  character_paddings of <PyPDFForm.middleware.text.Text object at 0x10426e610> is None
461:  Comparison IsNot None None -> False
461:  Comparison None None -> False
464:  Control flow event
464:  Control-flow enter with condition False
464:     If False
462:  Accessing
462:   Reading
462:      Reading
463:  Accessing
463:   Reading
463:  Attribute:  character_paddings of <PyPDFForm.middleware.text.Text object at 0x10426e610> is None
464:  Control flow event
464:  Control-flow exit
464:  If exit
465:  Accessing
465:      Writing
466:  Accessing
466:   Reading
466:      Reading
467:  Accessing
467:   Reading
467:      Reading
468:  Control flow event
468:  Before function call: get_element_alignment ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194
147:  Control flow event
148:  Accessing
148:      Writing
159:  Control flow event
159:  Control-flow enter with condition True
159:     For {'/Q': True}
149:  Accessing
149:   Reading
149:      Reading
150:  Accessing
150:   Reading
150:      Reading
151:  Accessing
151:   Reading
151:      Reading
152:  Control flow event
152:  Before function call: traverse_pattern ({'/Q': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/F
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '387.707', '238.453', '436.667']), ('/AP', {'/N': (7, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '387.707', '238.453', '436.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (7, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Tx')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_2_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(test_3)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Q', '0')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Q']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1039989a0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1039989a0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/Q']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And 0 -> 0
120:  Binary Operation True 0 -> 0
122:  Control flow event
122:  Control-flow enter with condition 0
122:     If 0
121:  Accessing
121:   Reading
121:      Reading
152:  After function call, result:  0
153:  Accessing
153:      Writing
154:  Accessing
154:   Reading
154:      Reading
158:  Control flow event
158:  Control-flow enter with condition 0
158:     If 0
155:  Accessing
155:   Reading
155:      Reading
156:  Accessing
156:      Writing
157:  Control flow event
157:  Break
160:  Accessing
160:   Reading
160:      Reading
468:  After function call, result:  0
470:  Binary Operation 0 Or <function get_draw_text_coordinates.<locals>.<lambda> at 0x103999a80> -> 0
470:  Binary Operation 0 <function get_draw_text_coordinates.<locals>.<lambda> at 0x103999a80> -> 0
471:  Accessing
471:      Writing
472:  Accessing
472:   Reading
472:      Reading
473:  Accessing
473:   Reading
473:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
474:  Accessing
474:   Reading
474:  Slice ['/Rect']
475:  Literal    value: 0
475:      Integer value: 0
476:  Accessing
476:   Reading
476:  Slice [0]
477:  Control flow event
477:  Before function call: float ('97.333',) {}
477:  After function call, result:  97.333
478:  Accessing
478:      Writing
479:  Accessing
479:   Reading
479:      Reading
480:  Control flow event
480:  Before function call: int ('0',) {}
480:  After function call, result:  0
481:  Literal    value: 0
481:      Integer value: 0
482:  Comparison NotEqual 0 0 -> False
482:  Comparison 0 0 -> False
577:  Control flow event
577:  Control-flow enter with condition False
577:     If False
577:  Control flow event
577:  Control-flow exit
577:  If exit
578:  Accessing
578:   Reading
578:      Reading
579:  Accessing
579:   Reading
579:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x10426e610> is 8.64
580:  Literal    value: 96
580:      Integer value: 96
581:  Binary Operation 8.64 Multiply 96 -> 829.44
581:  Binary Operation 8.64 96 -> 829.44
582:  Literal    value: 72
582:      Integer value: 72
583:  Binary Operation 829.44 Divide 72 -> 11.520000000000001
583:  Binary Operation 829.44 72 -> 11.520000000000001
584:  Accessing
584:      Writing
585:  Accessing
585:   Reading
585:      Reading
586:  Accessing
586:   Reading
586:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
587:  Accessing
587:   Reading
587:  Slice ['/Rect']
588:  Literal    value: 1
588:      Integer value: 1
589:  Accessing
589:   Reading
589:  Slice [1]
590:  Control flow event
590:  Before function call: float ('387.707',) {}
590:  After function call, result:  387.707
591:  Accessing
591:   Reading
591:      Reading
592:  Accessing
592:   Reading
592:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
593:  Accessing
593:   Reading
593:  Slice ['/Rect']
594:  Literal    value: 3
594:      Integer value: 3
595:  Accessing
595:   Reading
595:  Slice [3]
596:  Control flow event
596:  Before function call: float ('436.667',) {}
596:  After function call, result:  436.667
597:  Binary Operation 387.707 Add 436.667 -> 824.374
597:  Binary Operation 387.707 436.667 -> 824.374
598:  Literal    value: 2
598:      Integer value: 2
599:  Binary Operation 824.374 Divide 2 -> 412.187
599:  Binary Operation 824.374 2 -> 412.187
600:  Accessing
600:      Writing
601:  Accessing
601:   Reading
601:      Reading
602:  Accessing
602:   Reading
602:      Reading
603:  Literal    value: 2
603:      Integer value: 2
604:  Binary Operation 11.520000000000001 Divide 2 -> 5.760000000000001
604:  Binary Operation 11.520000000000001 2 -> 5.760000000000001
605:  Binary Operation 412.187 Subtract 5.760000000000001 -> 406.427
605:  Binary Operation 412.187 5.760000000000001 -> 406.427
606:  Accessing
606:   Reading
606:      Reading
607:  Binary Operation 406.427 Add 412.187 -> 818.614
607:  Binary Operation 406.427 412.187 -> 818.614
608:  Literal    value: 2
608:      Integer value: 2
609:  Binary Operation 818.614 Divide 2 -> 409.307
609:  Binary Operation 818.614 2 -> 409.307
610:  Accessing
610:      Writing
611:  Accessing
611:   Reading
611:      Reading
612:  Accessing
612:   Reading
612:      Reading
613:  Control flow event
613:  Before function call: is_text_multiline ({'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304'
298:  Control flow event
299:  Accessing
299:      Writing
309:  Control flow event
309:  Control-flow enter with condition True
309:     For {'/Ff': True}
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:      Reading
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: traverse_pattern ({'/Ff': True}, {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['97.333', '387.707', '238.453', '436.667'], '/AP': {'/N': (7, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/Ff': '4194304', '/FT': '/Tx', '/MK
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['97.333', '387.707', '238.453', '436.667']), ('/AP', {'/N': (7, 0)}), ('/DA', '(/Helv 8.64 Tf 0 g)'), ('/F', '4'), ('/Ff', '4194304'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['97.333', '387.707', '238.453', '436.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (7, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 8.64 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '4194304')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Ff']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x10399be20> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x10399be20> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/Ff']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And 4194304 -> 4194304
120:  Binary Operation True 4194304 -> 4194304
122:  Control flow event
122:  Control-flow enter with condition 4194304
122:     If 4194304
121:  Accessing
121:   Reading
121:      Reading
303:  After function call, result:  4194304
304:  Accessing
304:      Writing
305:  Accessing
305:   Reading
305:      Reading
306:  Comparison IsNot 4194304 None -> True
306:  Comparison 4194304 None -> True
308:  Control flow event
308:  Control-flow enter with condition True
308:     If True
307:  Control flow event
307:  Break
310:  Accessing
310:   Reading
310:      Reading
312:  Control flow event
312:  Control-flow enter with condition False
312:     If False
312:  Control flow event
312:  Control-flow exit
312:  If exit
314:  Accessing
314:   Reading
314:  Attribute:  format of {0:b} is <built-in method format of str object at 0x101f34cf0>
315:  Accessing
315:   Reading
315:      Reading
316:  Control flow event
316:  Before function call: int ('4194304',) {}
316:  After function call, result:  4194304
317:  Control flow event
317:  Before function call: format (4194304,) {}
317:  After function call, result:  10000000000000000000000
318:  Literal    value: 1
318:      Integer value: 1
319:  Unary Operation 1 -> -1
319:  Unary Operation 1 -> -1
320:  Accessing
320:   Reading
320:  Slice [slice(None, None, -1)]
321:  Literal    value: 12
321:      Integer value: 12
322:  Accessing
322:   Reading
322:  Slice [12]
323:  Comparison Equal 0 1 -> False
323:  Comparison 0 1 -> False
613:  After function call, result:  False
625:  Control flow event
625:  Control-flow enter with condition False
625:     If False
625:  Control flow event
625:  Control-flow exit
625:  If exit
626:  Accessing
626:   Reading
626:      Reading
627:  Control flow event
627:  Before function call: int ('0',) {}
627:  After function call, result:  0
628:  Literal    value: 1
628:      Integer value: 1
629:  Comparison Equal 0 1 -> False
629:  Comparison 0 1 -> False
633:  Binary Operation False And <function get_draw_text_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x1041a4b80> -> False
633:  Binary Operation False <function get_draw_text_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x1041a4b80> -> False
637:  Binary Operation False And <function get_draw_text_coordinates.<locals>.<lambda> at 0x1041a4680> -> False
637:  Binary Operation False <function get_draw_text_coordinates.<locals>.<lambda> at 0x1041a4680> -> False
665:  Control flow event
665:  Control-flow enter with condition False
665:     If False
665:  Control flow event
665:  Control-flow exit
665:  If exit
666:  Accessing
666:   Reading
666:      Reading
667:  Accessing
667:   Reading
667:      Reading
668:  Literal    value: (97.333, 409.307)
668:  Tuple items: [97.333, 409.307]
104:  After function call, result:  (97.333, 409.307)
105:  Accessing
105:      Writing
106:  Accessing
106:   Reading
106:      Reading
107:  Accessing
107:   Reading
107:      Reading
108:  Accessing
108:   Reading
108:  Slice ['test_3']
109:  Accessing
109:      Writing
110:  Literal    value: True
110:      Boolean value: True
111:  Accessing
111:      Writing
112:  Control flow event
112:  Control-flow exit
112:  If exit
113:  Accessing
113:   Reading
113:      Reading
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
114:  Accessing
114:   Reading
114:      Reading
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:  Slice [1]
117:  Accessing
117:   Reading
117:  Attribute:  append of [[<PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307], [<PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973]] is <built-in method append
118:  Accessing
118:   Reading
118:      Reading
119:  Accessing
119:   Reading
119:      Reading
120:  Accessing
120:   Reading
120:      Reading
121:  Literal    value: [<PyPDFForm.middleware.text.Text object at 0x10426e610>, 97.333, 409.307]
121:  List [<PyPDFForm.middleware.text.Text object at 0x10426e610>, 97.333, 409.307]
122:  Control flow event
122:  Before function call: append ([<PyPDFForm.middleware.text.Text object at 0x10426e610>, 97.333, 409.307],) {}
122:  After function call, result:  None
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow enter with condition True
124:     For {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', 
24:  Accessing
24:   Reading
24:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
25:  Accessing
25:   Reading
25:      Reading
26:  Control flow event
26:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0),
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}}, '/DA': '(/ZaD
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '637.253', '306.8', '665.333']), ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['278', '637.253', '306.8', '665.333'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off': (13, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(4)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_3_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(check_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x103999ee0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x103999ee0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (check_1) -> (check_1)
120:  Binary Operation True (check_1) -> (check_1)
122:  Control flow event
122:  Control-flow enter with condition (check_1)
122:     If (check_1)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (check_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (check_1)
144:     If (check_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
26:  After function call, result:  check_1
27:  Accessing
27:      Writing
28:  Literal    value: False
28:      Boolean value: False
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:  Slice ['check_1']
33:  Literal    value: (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)
33:  Tuple items: [<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>]
34:  Control flow event
34:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>, (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)) {}
34:  After function call, result:  True
112:  Control flow event
112:  Control-flow enter with condition True
112:     If True
35:  Accessing
35:   Reading
35:  Attribute:  checkbox_radio_font_size of <module 'PyPDFForm.core.font_size' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/font_size.py'> is <function checkbox
36:  Accessing
36:   Reading
36:      Reading
37:  Control flow event
37:  Before function call: checkbox_radio_font_size ({'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12, 0), '/Off
25:  Control flow event
26:  Accessing
26:   Reading
26:      Reading
27:  Accessing
27:   Reading
27:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
28:  Accessing
28:   Reading
28:  Slice ['/Rect']
29:  Literal    value: 0
29:      Integer value: 0
30:  Accessing
30:   Reading
30:  Slice [0]
31:  Control flow event
31:  Before function call: float ('278',) {}
31:  After function call, result:  278.0
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
34:  Accessing
34:   Reading
34:  Slice ['/Rect']
35:  Literal    value: 2
35:      Integer value: 2
36:  Accessing
36:   Reading
36:  Slice [2]
37:  Control flow event
37:  Before function call: float ('306.8',) {}
37:  After function call, result:  306.8
38:  Binary Operation 278.0 Subtract 306.8 -> -28.80000000000001
38:  Binary Operation 278.0 306.8 -> -28.80000000000001
39:  Control flow event
39:  Before function call: abs (-28.80000000000001,) {}
39:  After function call, result:  28.80000000000001
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
42:  Accessing
42:   Reading
42:  Slice ['/Rect']
43:  Literal    value: 1
43:      Integer value: 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Control flow event
45:  Before function call: float ('637.253',) {}
45:  After function call, result:  637.253
46:  Accessing
46:   Reading
46:      Reading
47:  Accessing
47:   Reading
47:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
48:  Accessing
48:   Reading
48:  Slice ['/Rect']
49:  Literal    value: 3
49:      Integer value: 3
50:  Accessing
50:   Reading
50:  Slice [3]
51:  Control flow event
51:  Before function call: float ('665.333',) {}
51:  After function call, result:  665.333
52:  Binary Operation 637.253 Subtract 665.333 -> -28.079999999999927
52:  Binary Operation 637.253 665.333 -> -28.079999999999927
53:  Control flow event
53:  Before function call: abs (-28.079999999999927,) {}
53:  After function call, result:  28.079999999999927
54:  Binary Operation 28.80000000000001 Multiply 28.079999999999927 -> 808.7039999999982
54:  Binary Operation 28.80000000000001 28.079999999999927 -> 808.7039999999982
55:  Accessing
55:      Writing
56:  Accessing
56:   Reading
56:      Reading
57:  Control flow event
57:  Before function call: sqrt (808.7039999999982,) {}
57:  After function call, result:  28.437721427709327
58:  Literal    value: 72
58:      Integer value: 72
59:  Binary Operation 28.437721427709327 Multiply 72 -> 2047.5159427950716
59:  Binary Operation 28.437721427709327 72 -> 2047.5159427950716
60:  Literal    value: 96
60:      Integer value: 96
61:  Binary Operation 2047.5159427950716 Divide 96 -> 21.328291070781997
61:  Binary Operation 2047.5159427950716 96 -> 21.328291070781997
37:  After function call, result:  21.328291070781997
38:  Accessing
38:      Writing
39:  Accessing
39:   Reading
39:  Attribute:  checkbox_radio_to_draw of <module 'PyPDFForm.core.utils' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/utils.py'> is <function checkbox_radio_to_
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:  Slice ['check_1']
43:  Accessing
43:   Reading
43:      Reading
44:  Control flow event
44:  Before function call: checkbox_radio_to_draw (<PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>, 21.328291070781997) {}
258:  Control flow event
259:  Accessing
259:   Reading
259:      Reading
5:  Control flow event
6:  Accessing
6:   Reading
6:      Reading
7:  Accessing
7:   Reading
7:  Attribute:  _name of <PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90> is check_1
260:  Accessing
260:   Reading
260:  Attribute:  name of <PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90> is check_1
261:  Literal    value: 
261:      String value: 
262:  Control flow event
262:  Before function call: Text () {'element_name': 'check_1', 'element_value': ''}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Text'>, <Text object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Text'>, <Text object>> is <bound method Element.__init__ of <PyPDFForm.middleware.text.Text object at 0x110f3dd90>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('check_1', '') {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
6:  Accessing
6:      Writing
7:  Accessing
7:      Writing
8:  Accessing
8:      Writing
9:  Accessing
9:      Writing
10:  Accessing
10:      Writing
11:  Accessing
11:      Writing
12:  Accessing
12:      Writing
13:  Accessing
13:      Writing
14:  Accessing
14:      Writing
0:  Control flow event
0:  Exiting function
262:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x110f3dd90>
263:  Accessing
263:      Writing
264:  Literal    value: Helvetica
264:      String value: Helvetica
265:  Accessing
265:      Writing
266:  Accessing
266:   Reading
266:      Reading
267:  Accessing
267:      Writing
268:  Literal    value: 0
268:      Integer value: 0
269:  Literal    value: 0
269:      Integer value: 0
270:  Literal    value: 0
270:      Integer value: 0
271:  Literal    value: (0, 0, 0)
271:  Tuple items: [0, 0, 0]
272:  Accessing
272:      Writing
273:  Accessing
273:   Reading
273:      Reading
274:  Control flow event
274:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>, <class 'PyPDFForm.middleware.checkbox.Checkbox'>) {}
274:  After function call, result:  True
282:  Control flow event
282:  Control-flow enter with condition True
282:     If True
275:  Accessing
275:   Reading
275:  Attribute:  CHECKBOX_TO_DRAW of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is ✓
276:  Accessing
276:      Writing
282:  Control flow event
282:  Control-flow exit
282:  If exit
283:  Accessing
283:   Reading
283:      Reading
44:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x110f3dd90>
45:  Accessing
45:      Writing
46:  Accessing
46:   Reading
46:  Attribute:  get_draw_checkbox_radio_coordinates of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function
47:  Accessing
47:   Reading
47:      Reading
48:  Accessing
48:   Reading
48:      Reading
49:  Control flow event
49:  Before function call: get_draw_checkbox_radio_coordinates ({'/Subtype': '/Widget', '/Rect': ['278', '637.253', '306.8', '665.333'], '/AP': {'/N': {'/Yes': (9, 0), '/Off': (11, 0)}, '/D': {'/Yes': (12
185:  Control flow event
186:  Accessing
186:   Reading
186:      Reading
187:  Accessing
187:   Reading
187:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x110f3dd90> is 21.328291070781997
188:  Literal    value: 96
188:      Integer value: 96
189:  Binary Operation 21.328291070781997 Multiply 96 -> 2047.5159427950716
189:  Binary Operation 21.328291070781997 96 -> 2047.5159427950716
190:  Literal    value: 72
190:      Integer value: 72
191:  Binary Operation 2047.5159427950716 Divide 72 -> 28.437721427709327
191:  Binary Operation 2047.5159427950716 72 -> 28.437721427709327
192:  Accessing
192:      Writing
193:  Accessing
193:   Reading
193:      Reading
194:  Accessing
194:   Reading
194:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
195:  Accessing
195:   Reading
195:  Slice ['/Rect']
196:  Literal    value: 0
196:      Integer value: 0
197:  Accessing
197:   Reading
197:  Slice [0]
198:  Control flow event
198:  Before function call: float ('278',) {}
198:  After function call, result:  278.0
199:  Accessing
199:   Reading
199:      Reading
200:  Accessing
200:   Reading
200:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
201:  Accessing
201:   Reading
201:  Slice ['/Rect']
202:  Literal    value: 2
202:      Integer value: 2
203:  Accessing
203:   Reading
203:  Slice [2]
204:  Control flow event
204:  Before function call: float ('306.8',) {}
204:  After function call, result:  306.8
205:  Binary Operation 278.0 Add 306.8 -> 584.8
205:  Binary Operation 278.0 306.8 -> 584.8
206:  Literal    value: 2
206:      Integer value: 2
207:  Binary Operation 584.8 Divide 2 -> 292.4
207:  Binary Operation 584.8 2 -> 292.4
208:  Accessing
208:      Writing
209:  Accessing
209:   Reading
209:      Reading
210:  Accessing
210:   Reading
210:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
211:  Accessing
211:   Reading
211:  Slice ['/Rect']
212:  Literal    value: 1
212:      Integer value: 1
213:  Accessing
213:   Reading
213:  Slice [1]
214:  Control flow event
214:  Before function call: float ('637.253',) {}
214:  After function call, result:  637.253
215:  Accessing
215:   Reading
215:      Reading
216:  Accessing
216:   Reading
216:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
217:  Accessing
217:   Reading
217:  Slice ['/Rect']
218:  Literal    value: 3
218:      Integer value: 3
219:  Accessing
219:   Reading
219:  Slice [3]
220:  Control flow event
220:  Before function call: float ('665.333',) {}
220:  After function call, result:  665.333
221:  Binary Operation 637.253 Add 665.333 -> 1302.586
221:  Binary Operation 637.253 665.333 -> 1302.586
222:  Literal    value: 2
222:      Integer value: 2
223:  Binary Operation 1302.586 Divide 2 -> 651.293
223:  Binary Operation 1302.586 2 -> 651.293
224:  Accessing
224:      Writing
225:  Accessing
225:   Reading
225:      Reading
226:  Accessing
226:   Reading
226:      Reading
227:  Accessing
227:   Reading
227:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x110f3dd90> is ✓
228:  Accessing
228:   Reading
228:      Reading
229:  Accessing
229:   Reading
229:  Attribute:  font of <PyPDFForm.middleware.text.Text object at 0x110f3dd90> is Helvetica
230:  Accessing
230:   Reading
230:      Reading
231:  Accessing
231:   Reading
231:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x110f3dd90> is 21.328291070781997
232:  Control flow event
232:  Before function call: stringWidth ('✓', 'Helvetica', 21.328291070781997) {}
232:  After function call, result:  16.10285975844041
233:  Literal    value: 2
233:      Integer value: 2
234:  Binary Operation 16.10285975844041 Divide 2 -> 8.051429879220205
234:  Binary Operation 16.10285975844041 2 -> 8.051429879220205
235:  Binary Operation 292.4 Subtract 8.051429879220205 -> 284.34857012077975
235:  Binary Operation 292.4 8.051429879220205 -> 284.34857012077975
236:  Accessing
236:   Reading
236:      Reading
237:  Accessing
237:   Reading
237:      Reading
238:  Literal    value: 2
238:      Integer value: 2
239:  Binary Operation 28.437721427709327 Divide 2 -> 14.218860713854664
239:  Binary Operation 28.437721427709327 2 -> 14.218860713854664
240:  Binary Operation 651.293 Subtract 14.218860713854664 -> 637.0741392861454
240:  Binary Operation 651.293 14.218860713854664 -> 637.0741392861454
241:  Accessing
241:   Reading
241:      Reading
242:  Binary Operation 637.0741392861454 Add 651.293 -> 1288.3671392861454
242:  Binary Operation 637.0741392861454 651.293 -> 1288.3671392861454
243:  Literal    value: 2
243:      Integer value: 2
244:  Binary Operation 1288.3671392861454 Divide 2 -> 644.1835696430727
244:  Binary Operation 1288.3671392861454 2 -> 644.1835696430727
245:  Literal    value: (284.34857012077975, 644.1835696430727)
245:  Tuple items: [284.34857012077975, 644.1835696430727]
49:  After function call, result:  (284.34857012077975, 644.1835696430727)
50:  Accessing
50:      Writing
51:  Accessing
51:   Reading
51:      Reading
52:  Accessing
52:   Reading
52:      Reading
53:  Accessing
53:   Reading
53:  Slice ['check_1']
54:  Control flow event
54:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90>, <class 'PyPDFForm.middleware.checkbox.Checkbox'>) {}
54:  After function call, result:  True
55:  Accessing
55:   Reading
55:      Reading
56:  Accessing
56:   Reading
56:      Reading
57:  Accessing
57:   Reading
57:  Slice ['check_1']
58:  Accessing
58:   Reading
58:  Attribute:  value of <PyPDFForm.middleware.checkbox.Checkbox object at 0x103c95c90> is True
59:  Binary Operation True And True -> True
59:  Binary Operation True True -> True
91:  Control flow event
91:  Control-flow enter with condition True
91:     If True
60:  Literal    value: True
60:      Boolean value: True
61:  Accessing
61:      Writing
91:  Control flow event
91:  Control-flow exit
91:  If exit
112:  Control flow event
112:  Control-flow exit
112:  If exit
113:  Accessing
113:   Reading
113:      Reading
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
114:  Accessing
114:   Reading
114:      Reading
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:  Slice [1]
117:  Accessing
117:   Reading
117:  Attribute:  append of [[<PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307], [<PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973], [<PyPDFForm.middleware.tex
118:  Accessing
118:   Reading
118:      Reading
119:  Accessing
119:   Reading
119:      Reading
120:  Accessing
120:   Reading
120:      Reading
121:  Literal    value: [<PyPDFForm.middleware.text.Text object at 0x110f3dd90>, 284.34857012077975, 644.1835696430727]
121:  List [<PyPDFForm.middleware.text.Text object at 0x110f3dd90>, 284.34857012077975, 644.1835696430727]
122:  Control flow event
122:  Before function call: append ([<PyPDFForm.middleware.text.Text object at 0x110f3dd90>, 284.34857012077975, 644.1835696430727],) {}
122:  After function call, result:  None
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow enter with condition True
124:     For {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)',
24:  Accessing
24:   Reading
24:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
25:  Accessing
25:   Reading
25:      Reading
26:  Control flow event
26:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0)
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}, '/DA': '(/Za
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '520.587', '306.8', '548.667']), ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}}
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['278', '520.587', '306.8', '548.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Off': (18, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(4)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_4_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(check_2)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x10455dee0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x10455dee0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (check_2) -> (check_2)
120:  Binary Operation True (check_2) -> (check_2)
122:  Control flow event
122:  Control-flow enter with condition (check_2)
122:     If (check_2)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (check_2)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (check_2)
144:     If (check_2)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
26:  After function call, result:  check_2
27:  Accessing
27:      Writing
28:  Literal    value: False
28:      Boolean value: False
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:  Slice ['check_2']
33:  Literal    value: (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)
33:  Tuple items: [<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>]
34:  Control flow event
34:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>, (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)) {}
34:  After function call, result:  True
112:  Control flow event
112:  Control-flow enter with condition True
112:     If True
35:  Accessing
35:   Reading
35:  Attribute:  checkbox_radio_font_size of <module 'PyPDFForm.core.font_size' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/font_size.py'> is <function checkbox
36:  Accessing
36:   Reading
36:      Reading
37:  Control flow event
37:  Before function call: checkbox_radio_font_size ({'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (17, 0), '/Of
25:  Control flow event
26:  Accessing
26:   Reading
26:      Reading
27:  Accessing
27:   Reading
27:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
28:  Accessing
28:   Reading
28:  Slice ['/Rect']
29:  Literal    value: 0
29:      Integer value: 0
30:  Accessing
30:   Reading
30:  Slice [0]
31:  Control flow event
31:  Before function call: float ('278',) {}
31:  After function call, result:  278.0
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
34:  Accessing
34:   Reading
34:  Slice ['/Rect']
35:  Literal    value: 2
35:      Integer value: 2
36:  Accessing
36:   Reading
36:  Slice [2]
37:  Control flow event
37:  Before function call: float ('306.8',) {}
37:  After function call, result:  306.8
38:  Binary Operation 278.0 Subtract 306.8 -> -28.80000000000001
38:  Binary Operation 278.0 306.8 -> -28.80000000000001
39:  Control flow event
39:  Before function call: abs (-28.80000000000001,) {}
39:  After function call, result:  28.80000000000001
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
42:  Accessing
42:   Reading
42:  Slice ['/Rect']
43:  Literal    value: 1
43:      Integer value: 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Control flow event
45:  Before function call: float ('520.587',) {}
45:  After function call, result:  520.587
46:  Accessing
46:   Reading
46:      Reading
47:  Accessing
47:   Reading
47:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
48:  Accessing
48:   Reading
48:  Slice ['/Rect']
49:  Literal    value: 3
49:      Integer value: 3
50:  Accessing
50:   Reading
50:  Slice [3]
51:  Control flow event
51:  Before function call: float ('548.667',) {}
51:  After function call, result:  548.667
52:  Binary Operation 520.587 Subtract 548.667 -> -28.08000000000004
52:  Binary Operation 520.587 548.667 -> -28.08000000000004
53:  Control flow event
53:  Before function call: abs (-28.08000000000004,) {}
53:  After function call, result:  28.08000000000004
54:  Binary Operation 28.80000000000001 Multiply 28.08000000000004 -> 808.7040000000015
54:  Binary Operation 28.80000000000001 28.08000000000004 -> 808.7040000000015
55:  Accessing
55:      Writing
56:  Accessing
56:   Reading
56:      Reading
57:  Control flow event
57:  Before function call: sqrt (808.7040000000015,) {}
57:  After function call, result:  28.437721427709384
58:  Literal    value: 72
58:      Integer value: 72
59:  Binary Operation 28.437721427709384 Multiply 72 -> 2047.5159427950757
59:  Binary Operation 28.437721427709384 72 -> 2047.5159427950757
60:  Literal    value: 96
60:      Integer value: 96
61:  Binary Operation 2047.5159427950757 Divide 96 -> 21.32829107078204
61:  Binary Operation 2047.5159427950757 96 -> 21.32829107078204
37:  After function call, result:  21.32829107078204
38:  Accessing
38:      Writing
39:  Accessing
39:   Reading
39:  Attribute:  checkbox_radio_to_draw of <module 'PyPDFForm.core.utils' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/utils.py'> is <function checkbox_radio_to_
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:  Slice ['check_2']
43:  Accessing
43:   Reading
43:      Reading
44:  Control flow event
44:  Before function call: checkbox_radio_to_draw (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>, 21.32829107078204) {}
258:  Control flow event
259:  Accessing
259:   Reading
259:      Reading
5:  Control flow event
6:  Accessing
6:   Reading
6:      Reading
7:  Accessing
7:   Reading
7:  Attribute:  _name of <PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10> is check_2
260:  Accessing
260:   Reading
260:  Attribute:  name of <PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10> is check_2
261:  Literal    value: 
261:      String value: 
262:  Control flow event
262:  Before function call: Text () {'element_name': 'check_2', 'element_value': ''}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Text'>, <Text object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Text'>, <Text object>> is <bound method Element.__init__ of <PyPDFForm.middleware.text.Text object at 0x111899b50>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('check_2', '') {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
6:  Accessing
6:      Writing
7:  Accessing
7:      Writing
8:  Accessing
8:      Writing
9:  Accessing
9:      Writing
10:  Accessing
10:      Writing
11:  Accessing
11:      Writing
12:  Accessing
12:      Writing
13:  Accessing
13:      Writing
14:  Accessing
14:      Writing
0:  Control flow event
0:  Exiting function
262:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x111899b50>
263:  Accessing
263:      Writing
264:  Literal    value: Helvetica
264:      String value: Helvetica
265:  Accessing
265:      Writing
266:  Accessing
266:   Reading
266:      Reading
267:  Accessing
267:      Writing
268:  Literal    value: 0
268:      Integer value: 0
269:  Literal    value: 0
269:      Integer value: 0
270:  Literal    value: 0
270:      Integer value: 0
271:  Literal    value: (0, 0, 0)
271:  Tuple items: [0, 0, 0]
272:  Accessing
272:      Writing
273:  Accessing
273:   Reading
273:      Reading
274:  Control flow event
274:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>, <class 'PyPDFForm.middleware.checkbox.Checkbox'>) {}
274:  After function call, result:  True
282:  Control flow event
282:  Control-flow enter with condition True
282:     If True
275:  Accessing
275:   Reading
275:  Attribute:  CHECKBOX_TO_DRAW of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is ✓
276:  Accessing
276:      Writing
282:  Control flow event
282:  Control-flow exit
282:  If exit
283:  Accessing
283:   Reading
283:      Reading
44:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x111899b50>
45:  Accessing
45:      Writing
46:  Accessing
46:   Reading
46:  Attribute:  get_draw_checkbox_radio_coordinates of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function
47:  Accessing
47:   Reading
47:      Reading
48:  Accessing
48:   Reading
48:      Reading
49:  Control flow event
49:  Before function call: get_draw_checkbox_radio_coordinates ({'/Subtype': '/Widget', '/Rect': ['278', '520.587', '306.8', '548.667'], '/AP': {'/N': {'/Yes': (15, 0), '/Off': (16, 0)}, '/D': {'/Yes': (1
185:  Control flow event
186:  Accessing
186:   Reading
186:      Reading
187:  Accessing
187:   Reading
187:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x111899b50> is 21.32829107078204
188:  Literal    value: 96
188:      Integer value: 96
189:  Binary Operation 21.32829107078204 Multiply 96 -> 2047.5159427950757
189:  Binary Operation 21.32829107078204 96 -> 2047.5159427950757
190:  Literal    value: 72
190:      Integer value: 72
191:  Binary Operation 2047.5159427950757 Divide 72 -> 28.437721427709384
191:  Binary Operation 2047.5159427950757 72 -> 28.437721427709384
192:  Accessing
192:      Writing
193:  Accessing
193:   Reading
193:      Reading
194:  Accessing
194:   Reading
194:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
195:  Accessing
195:   Reading
195:  Slice ['/Rect']
196:  Literal    value: 0
196:      Integer value: 0
197:  Accessing
197:   Reading
197:  Slice [0]
198:  Control flow event
198:  Before function call: float ('278',) {}
198:  After function call, result:  278.0
199:  Accessing
199:   Reading
199:      Reading
200:  Accessing
200:   Reading
200:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
201:  Accessing
201:   Reading
201:  Slice ['/Rect']
202:  Literal    value: 2
202:      Integer value: 2
203:  Accessing
203:   Reading
203:  Slice [2]
204:  Control flow event
204:  Before function call: float ('306.8',) {}
204:  After function call, result:  306.8
205:  Binary Operation 278.0 Add 306.8 -> 584.8
205:  Binary Operation 278.0 306.8 -> 584.8
206:  Literal    value: 2
206:      Integer value: 2
207:  Binary Operation 584.8 Divide 2 -> 292.4
207:  Binary Operation 584.8 2 -> 292.4
208:  Accessing
208:      Writing
209:  Accessing
209:   Reading
209:      Reading
210:  Accessing
210:   Reading
210:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
211:  Accessing
211:   Reading
211:  Slice ['/Rect']
212:  Literal    value: 1
212:      Integer value: 1
213:  Accessing
213:   Reading
213:  Slice [1]
214:  Control flow event
214:  Before function call: float ('520.587',) {}
214:  After function call, result:  520.587
215:  Accessing
215:   Reading
215:      Reading
216:  Accessing
216:   Reading
216:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
217:  Accessing
217:   Reading
217:  Slice ['/Rect']
218:  Literal    value: 3
218:      Integer value: 3
219:  Accessing
219:   Reading
219:  Slice [3]
220:  Control flow event
220:  Before function call: float ('548.667',) {}
220:  After function call, result:  548.667
221:  Binary Operation 520.587 Add 548.667 -> 1069.254
221:  Binary Operation 520.587 548.667 -> 1069.254
222:  Literal    value: 2
222:      Integer value: 2
223:  Binary Operation 1069.254 Divide 2 -> 534.627
223:  Binary Operation 1069.254 2 -> 534.627
224:  Accessing
224:      Writing
225:  Accessing
225:   Reading
225:      Reading
226:  Accessing
226:   Reading
226:      Reading
227:  Accessing
227:   Reading
227:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x111899b50> is ✓
228:  Accessing
228:   Reading
228:      Reading
229:  Accessing
229:   Reading
229:  Attribute:  font of <PyPDFForm.middleware.text.Text object at 0x111899b50> is Helvetica
230:  Accessing
230:   Reading
230:      Reading
231:  Accessing
231:   Reading
231:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x111899b50> is 21.32829107078204
232:  Control flow event
232:  Before function call: stringWidth ('✓', 'Helvetica', 21.32829107078204) {}
232:  After function call, result:  16.10285975844044
233:  Literal    value: 2
233:      Integer value: 2
234:  Binary Operation 16.10285975844044 Divide 2 -> 8.05142987922022
234:  Binary Operation 16.10285975844044 2 -> 8.05142987922022
235:  Binary Operation 292.4 Subtract 8.05142987922022 -> 284.34857012077975
235:  Binary Operation 292.4 8.05142987922022 -> 284.34857012077975
236:  Accessing
236:   Reading
236:      Reading
237:  Accessing
237:   Reading
237:      Reading
238:  Literal    value: 2
238:      Integer value: 2
239:  Binary Operation 28.437721427709384 Divide 2 -> 14.218860713854692
239:  Binary Operation 28.437721427709384 2 -> 14.218860713854692
240:  Binary Operation 534.627 Subtract 14.218860713854692 -> 520.4081392861452
240:  Binary Operation 534.627 14.218860713854692 -> 520.4081392861452
241:  Accessing
241:   Reading
241:      Reading
242:  Binary Operation 520.4081392861452 Add 534.627 -> 1055.0351392861453
242:  Binary Operation 520.4081392861452 534.627 -> 1055.0351392861453
243:  Literal    value: 2
243:      Integer value: 2
244:  Binary Operation 1055.0351392861453 Divide 2 -> 527.5175696430726
244:  Binary Operation 1055.0351392861453 2 -> 527.5175696430726
245:  Literal    value: (284.34857012077975, 527.5175696430726)
245:  Tuple items: [284.34857012077975, 527.5175696430726]
49:  After function call, result:  (284.34857012077975, 527.5175696430726)
50:  Accessing
50:      Writing
51:  Accessing
51:   Reading
51:      Reading
52:  Accessing
52:   Reading
52:      Reading
53:  Accessing
53:   Reading
53:  Slice ['check_2']
54:  Control flow event
54:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10>, <class 'PyPDFForm.middleware.checkbox.Checkbox'>) {}
54:  After function call, result:  True
55:  Accessing
55:   Reading
55:      Reading
56:  Accessing
56:   Reading
56:      Reading
57:  Accessing
57:   Reading
57:  Slice ['check_2']
58:  Accessing
58:   Reading
58:  Attribute:  value of <PyPDFForm.middleware.checkbox.Checkbox object at 0x104527b10> is True
59:  Binary Operation True And True -> True
59:  Binary Operation True True -> True
91:  Control flow event
91:  Control-flow enter with condition True
91:     If True
60:  Literal    value: True
60:      Boolean value: True
61:  Accessing
61:      Writing
91:  Control flow event
91:  Control-flow exit
91:  If exit
112:  Control flow event
112:  Control-flow exit
112:  If exit
113:  Accessing
113:   Reading
113:      Reading
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
114:  Accessing
114:   Reading
114:      Reading
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:  Slice [1]
117:  Accessing
117:   Reading
117:  Attribute:  append of [[<PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307], [<PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973], [<PyPDFForm.middleware.tex
118:  Accessing
118:   Reading
118:      Reading
119:  Accessing
119:   Reading
119:      Reading
120:  Accessing
120:   Reading
120:      Reading
121:  Literal    value: [<PyPDFForm.middleware.text.Text object at 0x111899b50>, 284.34857012077975, 527.5175696430726]
121:  List [<PyPDFForm.middleware.text.Text object at 0x111899b50>, 284.34857012077975, 527.5175696430726]
122:  Control flow event
122:  Before function call: append ([<PyPDFForm.middleware.text.Text object at 0x111899b50>, 284.34857012077975, 527.5175696430726],) {}
122:  After function call, result:  None
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow enter with condition True
124:     For {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 Tf 0 g)', '/F'
24:  Accessing
24:   Reading
24:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
25:  Accessing
25:   Reading
25:      Reading
26:  Control flow event
26:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}},
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/O
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}, '/DA': '(/ZaDb 0 
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['278', '407.92', '306.8', '436']), ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}}), ('
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['278', '407.92', '306.8', '436'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (23, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(4)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_5_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(check_3)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1071fc180> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1071fc180> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (check_3) -> (check_3)
120:  Binary Operation True (check_3) -> (check_3)
122:  Control flow event
122:  Control-flow enter with condition (check_3)
122:     If (check_3)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (check_3)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (check_3)
144:     If (check_3)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
26:  After function call, result:  check_3
27:  Accessing
27:      Writing
28:  Literal    value: False
28:      Boolean value: False
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:  Slice ['check_3']
33:  Literal    value: (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)
33:  Tuple items: [<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>]
34:  Control flow event
34:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>, (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)) {}
34:  After function call, result:  True
112:  Control flow event
112:  Control-flow enter with condition True
112:     If True
35:  Accessing
35:   Reading
35:  Attribute:  checkbox_radio_font_size of <module 'PyPDFForm.core.font_size' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/font_size.py'> is <function checkbox
36:  Accessing
36:   Reading
36:      Reading
37:  Control flow event
37:  Before function call: checkbox_radio_font_size ({'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0), '/Off': (
25:  Control flow event
26:  Accessing
26:   Reading
26:      Reading
27:  Accessing
27:   Reading
27:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
28:  Accessing
28:   Reading
28:  Slice ['/Rect']
29:  Literal    value: 0
29:      Integer value: 0
30:  Accessing
30:   Reading
30:  Slice [0]
31:  Control flow event
31:  Before function call: float ('278',) {}
31:  After function call, result:  278.0
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
34:  Accessing
34:   Reading
34:  Slice ['/Rect']
35:  Literal    value: 2
35:      Integer value: 2
36:  Accessing
36:   Reading
36:  Slice [2]
37:  Control flow event
37:  Before function call: float ('306.8',) {}
37:  After function call, result:  306.8
38:  Binary Operation 278.0 Subtract 306.8 -> -28.80000000000001
38:  Binary Operation 278.0 306.8 -> -28.80000000000001
39:  Control flow event
39:  Before function call: abs (-28.80000000000001,) {}
39:  After function call, result:  28.80000000000001
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
42:  Accessing
42:   Reading
42:  Slice ['/Rect']
43:  Literal    value: 1
43:      Integer value: 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Control flow event
45:  Before function call: float ('407.92',) {}
45:  After function call, result:  407.92
46:  Accessing
46:   Reading
46:      Reading
47:  Accessing
47:   Reading
47:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
48:  Accessing
48:   Reading
48:  Slice ['/Rect']
49:  Literal    value: 3
49:      Integer value: 3
50:  Accessing
50:   Reading
50:  Slice [3]
51:  Control flow event
51:  Before function call: float ('436',) {}
51:  After function call, result:  436.0
52:  Binary Operation 407.92 Subtract 436.0 -> -28.079999999999984
52:  Binary Operation 407.92 436.0 -> -28.079999999999984
53:  Control flow event
53:  Before function call: abs (-28.079999999999984,) {}
53:  After function call, result:  28.079999999999984
54:  Binary Operation 28.80000000000001 Multiply 28.079999999999984 -> 808.7039999999998
54:  Binary Operation 28.80000000000001 28.079999999999984 -> 808.7039999999998
55:  Accessing
55:      Writing
56:  Accessing
56:   Reading
56:      Reading
57:  Control flow event
57:  Before function call: sqrt (808.7039999999998,) {}
57:  After function call, result:  28.437721427709356
58:  Literal    value: 72
58:      Integer value: 72
59:  Binary Operation 28.437721427709356 Multiply 72 -> 2047.5159427950737
59:  Binary Operation 28.437721427709356 72 -> 2047.5159427950737
60:  Literal    value: 96
60:      Integer value: 96
61:  Binary Operation 2047.5159427950737 Divide 96 -> 21.32829107078202
61:  Binary Operation 2047.5159427950737 96 -> 21.32829107078202
37:  After function call, result:  21.32829107078202
38:  Accessing
38:      Writing
39:  Accessing
39:   Reading
39:  Attribute:  checkbox_radio_to_draw of <module 'PyPDFForm.core.utils' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/utils.py'> is <function checkbox_radio_to_
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:  Slice ['check_3']
43:  Accessing
43:   Reading
43:      Reading
44:  Control flow event
44:  Before function call: checkbox_radio_to_draw (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>, 21.32829107078202) {}
258:  Control flow event
259:  Accessing
259:   Reading
259:      Reading
5:  Control flow event
6:  Accessing
6:   Reading
6:      Reading
7:  Accessing
7:   Reading
7:  Attribute:  _name of <PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010> is check_3
260:  Accessing
260:   Reading
260:  Attribute:  name of <PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010> is check_3
261:  Literal    value: 
261:      String value: 
262:  Control flow event
262:  Before function call: Text () {'element_name': 'check_3', 'element_value': ''}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Text'>, <Text object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Text'>, <Text object>> is <bound method Element.__init__ of <PyPDFForm.middleware.text.Text object at 0x104361b50>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('check_3', '') {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
6:  Accessing
6:      Writing
7:  Accessing
7:      Writing
8:  Accessing
8:      Writing
9:  Accessing
9:      Writing
10:  Accessing
10:      Writing
11:  Accessing
11:      Writing
12:  Accessing
12:      Writing
13:  Accessing
13:      Writing
14:  Accessing
14:      Writing
0:  Control flow event
0:  Exiting function
262:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x104361b50>
263:  Accessing
263:      Writing
264:  Literal    value: Helvetica
264:      String value: Helvetica
265:  Accessing
265:      Writing
266:  Accessing
266:   Reading
266:      Reading
267:  Accessing
267:      Writing
268:  Literal    value: 0
268:      Integer value: 0
269:  Literal    value: 0
269:      Integer value: 0
270:  Literal    value: 0
270:      Integer value: 0
271:  Literal    value: (0, 0, 0)
271:  Tuple items: [0, 0, 0]
272:  Accessing
272:      Writing
273:  Accessing
273:   Reading
273:      Reading
274:  Control flow event
274:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>, <class 'PyPDFForm.middleware.checkbox.Checkbox'>) {}
274:  After function call, result:  True
282:  Control flow event
282:  Control-flow enter with condition True
282:     If True
275:  Accessing
275:   Reading
275:  Attribute:  CHECKBOX_TO_DRAW of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is ✓
276:  Accessing
276:      Writing
282:  Control flow event
282:  Control-flow exit
282:  If exit
283:  Accessing
283:   Reading
283:      Reading
44:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x104361b50>
45:  Accessing
45:      Writing
46:  Accessing
46:   Reading
46:  Attribute:  get_draw_checkbox_radio_coordinates of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function
47:  Accessing
47:   Reading
47:      Reading
48:  Accessing
48:   Reading
48:      Reading
49:  Control flow event
49:  Before function call: get_draw_checkbox_radio_coordinates ({'/Subtype': '/Widget', '/Rect': ['278', '407.92', '306.8', '436'], '/AP': {'/N': {'/Yes': (20, 0), '/Off': (21, 0)}, '/D': {'/Yes': (22, 0)
185:  Control flow event
186:  Accessing
186:   Reading
186:      Reading
187:  Accessing
187:   Reading
187:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x104361b50> is 21.32829107078202
188:  Literal    value: 96
188:      Integer value: 96
189:  Binary Operation 21.32829107078202 Multiply 96 -> 2047.515942795074
189:  Binary Operation 21.32829107078202 96 -> 2047.515942795074
190:  Literal    value: 72
190:      Integer value: 72
191:  Binary Operation 2047.515942795074 Divide 72 -> 28.43772142770936
191:  Binary Operation 2047.515942795074 72 -> 28.43772142770936
192:  Accessing
192:      Writing
193:  Accessing
193:   Reading
193:      Reading
194:  Accessing
194:   Reading
194:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
195:  Accessing
195:   Reading
195:  Slice ['/Rect']
196:  Literal    value: 0
196:      Integer value: 0
197:  Accessing
197:   Reading
197:  Slice [0]
198:  Control flow event
198:  Before function call: float ('278',) {}
198:  After function call, result:  278.0
199:  Accessing
199:   Reading
199:      Reading
200:  Accessing
200:   Reading
200:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
201:  Accessing
201:   Reading
201:  Slice ['/Rect']
202:  Literal    value: 2
202:      Integer value: 2
203:  Accessing
203:   Reading
203:  Slice [2]
204:  Control flow event
204:  Before function call: float ('306.8',) {}
204:  After function call, result:  306.8
205:  Binary Operation 278.0 Add 306.8 -> 584.8
205:  Binary Operation 278.0 306.8 -> 584.8
206:  Literal    value: 2
206:      Integer value: 2
207:  Binary Operation 584.8 Divide 2 -> 292.4
207:  Binary Operation 584.8 2 -> 292.4
208:  Accessing
208:      Writing
209:  Accessing
209:   Reading
209:      Reading
210:  Accessing
210:   Reading
210:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
211:  Accessing
211:   Reading
211:  Slice ['/Rect']
212:  Literal    value: 1
212:      Integer value: 1
213:  Accessing
213:   Reading
213:  Slice [1]
214:  Control flow event
214:  Before function call: float ('407.92',) {}
214:  After function call, result:  407.92
215:  Accessing
215:   Reading
215:      Reading
216:  Accessing
216:   Reading
216:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
217:  Accessing
217:   Reading
217:  Slice ['/Rect']
218:  Literal    value: 3
218:      Integer value: 3
219:  Accessing
219:   Reading
219:  Slice [3]
220:  Control flow event
220:  Before function call: float ('436',) {}
220:  After function call, result:  436.0
221:  Binary Operation 407.92 Add 436.0 -> 843.9200000000001
221:  Binary Operation 407.92 436.0 -> 843.9200000000001
222:  Literal    value: 2
222:      Integer value: 2
223:  Binary Operation 843.9200000000001 Divide 2 -> 421.96000000000004
223:  Binary Operation 843.9200000000001 2 -> 421.96000000000004
224:  Accessing
224:      Writing
225:  Accessing
225:   Reading
225:      Reading
226:  Accessing
226:   Reading
226:      Reading
227:  Accessing
227:   Reading
227:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x104361b50> is ✓
228:  Accessing
228:   Reading
228:      Reading
229:  Accessing
229:   Reading
229:  Attribute:  font of <PyPDFForm.middleware.text.Text object at 0x104361b50> is Helvetica
230:  Accessing
230:   Reading
230:      Reading
231:  Accessing
231:   Reading
231:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x104361b50> is 21.32829107078202
232:  Control flow event
232:  Before function call: stringWidth ('✓', 'Helvetica', 21.32829107078202) {}
232:  After function call, result:  16.102859758440424
233:  Literal    value: 2
233:      Integer value: 2
234:  Binary Operation 16.102859758440424 Divide 2 -> 8.051429879220212
234:  Binary Operation 16.102859758440424 2 -> 8.051429879220212
235:  Binary Operation 292.4 Subtract 8.051429879220212 -> 284.34857012077975
235:  Binary Operation 292.4 8.051429879220212 -> 284.34857012077975
236:  Accessing
236:   Reading
236:      Reading
237:  Accessing
237:   Reading
237:      Reading
238:  Literal    value: 2
238:      Integer value: 2
239:  Binary Operation 28.43772142770936 Divide 2 -> 14.21886071385468
239:  Binary Operation 28.43772142770936 2 -> 14.21886071385468
240:  Binary Operation 421.96000000000004 Subtract 14.21886071385468 -> 407.74113928614537
240:  Binary Operation 421.96000000000004 14.21886071385468 -> 407.74113928614537
241:  Accessing
241:   Reading
241:      Reading
242:  Binary Operation 407.74113928614537 Add 421.96000000000004 -> 829.7011392861455
242:  Binary Operation 407.74113928614537 421.96000000000004 -> 829.7011392861455
243:  Literal    value: 2
243:      Integer value: 2
244:  Binary Operation 829.7011392861455 Divide 2 -> 414.85056964307273
244:  Binary Operation 829.7011392861455 2 -> 414.85056964307273
245:  Literal    value: (284.34857012077975, 414.85056964307273)
245:  Tuple items: [284.34857012077975, 414.85056964307273]
49:  After function call, result:  (284.34857012077975, 414.85056964307273)
50:  Accessing
50:      Writing
51:  Accessing
51:   Reading
51:      Reading
52:  Accessing
52:   Reading
52:      Reading
53:  Accessing
53:   Reading
53:  Slice ['check_3']
54:  Control flow event
54:  Before function call: isinstance (<PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010>, <class 'PyPDFForm.middleware.checkbox.Checkbox'>) {}
54:  After function call, result:  True
55:  Accessing
55:   Reading
55:      Reading
56:  Accessing
56:   Reading
56:      Reading
57:  Accessing
57:   Reading
57:  Slice ['check_3']
58:  Accessing
58:   Reading
58:  Attribute:  value of <PyPDFForm.middleware.checkbox.Checkbox object at 0x104563010> is True
59:  Binary Operation True And True -> True
59:  Binary Operation True True -> True
91:  Control flow event
91:  Control-flow enter with condition True
91:     If True
60:  Literal    value: True
60:      Boolean value: True
61:  Accessing
61:      Writing
91:  Control flow event
91:  Control-flow exit
91:  If exit
112:  Control flow event
112:  Control-flow exit
112:  If exit
113:  Accessing
113:   Reading
113:      Reading
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
114:  Accessing
114:   Reading
114:      Reading
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:  Slice [1]
117:  Accessing
117:   Reading
117:  Attribute:  append of [[<PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307], [<PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973], [<PyPDFForm.middleware.tex
118:  Accessing
118:   Reading
118:      Reading
119:  Accessing
119:   Reading
119:      Reading
120:  Accessing
120:   Reading
120:      Reading
121:  Literal    value: [<PyPDFForm.middleware.text.Text object at 0x104361b50>, 284.34857012077975, 414.85056964307273]
121:  List [<PyPDFForm.middleware.text.Text object at 0x104361b50>, 284.34857012077975, 414.85056964307273]
122:  Control flow event
122:  Before function call: append ([<PyPDFForm.middleware.text.Text object at 0x104361b50>, 284.34857012077975, 414.85056964307273],) {}
122:  After function call, result:  None
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow enter with condition True
124:     For {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
24:  Accessing
24:   Reading
24:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
25:  Accessing
25:   Reading
25:      Reading
26:  Control flow event
26:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0)
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/0': (26, 0), '/Off': (27, 0)}, '/D': {'/0': (28, 0), '/Off': (29, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(l)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_6_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AS', '/Off')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition False
128:     For 
128:  Control flow event
128:  Control-flow exit
128:  For exit
134:  After function call, result:  None
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition None
144:     If None
144:  Control flow event
144:  Control-flow exit
144:  If exit
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/Parent': {'/T': True}}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/Parent': {'/T': True}}, {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '636.587', '375.2', '664.667']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '636.587', '375.2', '664.667'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Parent']
103:  Control flow event
103:  Before function call: isinstance ({'/T': True}, <class 'dict'>) {}
103:  After function call, result:  True
104:  Accessing
104:   Reading
104:      Reading
105:  Accessing
105:   Reading
105:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
106:  Control flow event
106:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
106:  After function call, result:  True
107:  Binary Operation True And True -> True
107:  Binary Operation True True -> True
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
108:  Accessing
108:   Reading
108:      Reading
109:  Accessing
109:   Reading
109:      Reading
110:  Accessing
110:   Reading
110:      Reading
111:  Accessing
111:   Reading
111:  Slice ['/Parent']
112:  Accessing
112:   Reading
112:      Reading
113:  Control flow event
113:  Before function call: traverse_pattern ({'/T': True}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': 
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '49152')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_7_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(radio_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x1071ff9c0> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x1071ff9c0> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (radio_1) -> (radio_1)
120:  Binary Operation True (radio_1) -> (radio_1)
122:  Control flow event
122:  Control-flow enter with condition (radio_1)
122:     If (radio_1)
121:  Accessing
121:   Reading
121:      Reading
113:  After function call, result:  (radio_1)
114:  Accessing
114:      Writing
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition (radio_1)
127:     If (radio_1)
126:  Accessing
126:   Reading
126:      Reading
134:  After function call, result:  (radio_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (radio_1)
144:     If (radio_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
26:  After function call, result:  radio_1
27:  Accessing
27:      Writing
28:  Literal    value: False
28:      Boolean value: False
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:  Slice ['radio_1']
33:  Literal    value: (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)
33:  Tuple items: [<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>]
34:  Control flow event
34:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)) {}
34:  After function call, result:  True
112:  Control flow event
112:  Control-flow enter with condition True
112:     If True
35:  Accessing
35:   Reading
35:  Attribute:  checkbox_radio_font_size of <module 'PyPDFForm.core.font_size' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/font_size.py'> is <function checkbox
36:  Accessing
36:   Reading
36:      Reading
37:  Control flow event
37:  Before function call: checkbox_radio_font_size ({'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids':
25:  Control flow event
26:  Accessing
26:   Reading
26:      Reading
27:  Accessing
27:   Reading
27:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
28:  Accessing
28:   Reading
28:  Slice ['/Rect']
29:  Literal    value: 0
29:      Integer value: 0
30:  Accessing
30:   Reading
30:  Slice [0]
31:  Control flow event
31:  Before function call: float ('350',) {}
31:  After function call, result:  350.0
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
34:  Accessing
34:   Reading
34:  Slice ['/Rect']
35:  Literal    value: 2
35:      Integer value: 2
36:  Accessing
36:   Reading
36:  Slice [2]
37:  Control flow event
37:  Before function call: float ('375.2',) {}
37:  After function call, result:  375.2
38:  Binary Operation 350.0 Subtract 375.2 -> -25.19999999999999
38:  Binary Operation 350.0 375.2 -> -25.19999999999999
39:  Control flow event
39:  Before function call: abs (-25.19999999999999,) {}
39:  After function call, result:  25.19999999999999
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
42:  Accessing
42:   Reading
42:  Slice ['/Rect']
43:  Literal    value: 1
43:      Integer value: 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Control flow event
45:  Before function call: float ('636.587',) {}
45:  After function call, result:  636.587
46:  Accessing
46:   Reading
46:      Reading
47:  Accessing
47:   Reading
47:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
48:  Accessing
48:   Reading
48:  Slice ['/Rect']
49:  Literal    value: 3
49:      Integer value: 3
50:  Accessing
50:   Reading
50:  Slice [3]
51:  Control flow event
51:  Before function call: float ('664.667',) {}
51:  After function call, result:  664.667
52:  Binary Operation 636.587 Subtract 664.667 -> -28.08000000000004
52:  Binary Operation 636.587 664.667 -> -28.08000000000004
53:  Control flow event
53:  Before function call: abs (-28.08000000000004,) {}
53:  After function call, result:  28.08000000000004
54:  Binary Operation 25.19999999999999 Multiply 28.08000000000004 -> 707.6160000000007
54:  Binary Operation 25.19999999999999 28.08000000000004 -> 707.6160000000007
55:  Accessing
55:      Writing
56:  Accessing
56:   Reading
56:      Reading
57:  Control flow event
57:  Before function call: sqrt (707.6160000000007,) {}
57:  After function call, result:  26.60105261075209
58:  Literal    value: 72
58:      Integer value: 72
59:  Binary Operation 26.60105261075209 Multiply 72 -> 1915.2757879741507
59:  Binary Operation 26.60105261075209 72 -> 1915.2757879741507
60:  Literal    value: 96
60:      Integer value: 96
61:  Binary Operation 1915.2757879741507 Divide 96 -> 19.95078945806407
61:  Binary Operation 1915.2757879741507 96 -> 19.95078945806407
37:  After function call, result:  19.95078945806407
38:  Accessing
38:      Writing
39:  Accessing
39:   Reading
39:  Attribute:  checkbox_radio_to_draw of <module 'PyPDFForm.core.utils' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/utils.py'> is <function checkbox_radio_to_
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:  Slice ['radio_1']
43:  Accessing
43:   Reading
43:      Reading
44:  Control flow event
44:  Before function call: checkbox_radio_to_draw (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, 19.95078945806407) {}
258:  Control flow event
259:  Accessing
259:   Reading
259:      Reading
5:  Control flow event
6:  Accessing
6:   Reading
6:      Reading
7:  Accessing
7:   Reading
7:  Attribute:  _name of <PyPDFForm.middleware.radio.Radio object at 0x1047c1790> is radio_1
260:  Accessing
260:   Reading
260:  Attribute:  name of <PyPDFForm.middleware.radio.Radio object at 0x1047c1790> is radio_1
261:  Literal    value: 
261:      String value: 
262:  Control flow event
262:  Before function call: Text () {'element_name': 'radio_1', 'element_value': ''}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Text'>, <Text object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Text'>, <Text object>> is <bound method Element.__init__ of <PyPDFForm.middleware.text.Text object at 0x111eebb90>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('radio_1', '') {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
6:  Accessing
6:      Writing
7:  Accessing
7:      Writing
8:  Accessing
8:      Writing
9:  Accessing
9:      Writing
10:  Accessing
10:      Writing
11:  Accessing
11:      Writing
12:  Accessing
12:      Writing
13:  Accessing
13:      Writing
14:  Accessing
14:      Writing
0:  Control flow event
0:  Exiting function
262:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x111eebb90>
263:  Accessing
263:      Writing
264:  Literal    value: Helvetica
264:      String value: Helvetica
265:  Accessing
265:      Writing
266:  Accessing
266:   Reading
266:      Reading
267:  Accessing
267:      Writing
268:  Literal    value: 0
268:      Integer value: 0
269:  Literal    value: 0
269:      Integer value: 0
270:  Literal    value: 0
270:      Integer value: 0
271:  Literal    value: (0, 0, 0)
271:  Tuple items: [0, 0, 0]
272:  Accessing
272:      Writing
273:  Accessing
273:   Reading
273:      Reading
274:  Control flow event
274:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.checkbox.Checkbox'>) {}
274:  After function call, result:  False
282:  Control flow event
282:  Control-flow enter with condition False
282:     If False
279:  Accessing
279:   Reading
279:  Attribute:  RADIO_TO_DRAW of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is ●
280:  Accessing
280:      Writing
281:  Control flow event
281:  Control-flow exit
281:  If exit
282:  Control flow event
282:  Control-flow exit
282:  If exit
283:  Accessing
283:   Reading
283:      Reading
44:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x111eebb90>
45:  Accessing
45:      Writing
46:  Accessing
46:   Reading
46:  Attribute:  get_draw_checkbox_radio_coordinates of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function
47:  Accessing
47:   Reading
47:      Reading
48:  Accessing
48:   Reading
48:      Reading
49:  Control flow event
49:  Before function call: get_draw_checkbox_radio_coordinates ({'/Subtype': '/Widget', '/Rect': ['350', '636.587', '375.2', '664.667'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
185:  Control flow event
186:  Accessing
186:   Reading
186:      Reading
187:  Accessing
187:   Reading
187:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x111eebb90> is 19.95078945806407
188:  Literal    value: 96
188:      Integer value: 96
189:  Binary Operation 19.95078945806407 Multiply 96 -> 1915.2757879741507
189:  Binary Operation 19.95078945806407 96 -> 1915.2757879741507
190:  Literal    value: 72
190:      Integer value: 72
191:  Binary Operation 1915.2757879741507 Divide 72 -> 26.60105261075209
191:  Binary Operation 1915.2757879741507 72 -> 26.60105261075209
192:  Accessing
192:      Writing
193:  Accessing
193:   Reading
193:      Reading
194:  Accessing
194:   Reading
194:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
195:  Accessing
195:   Reading
195:  Slice ['/Rect']
196:  Literal    value: 0
196:      Integer value: 0
197:  Accessing
197:   Reading
197:  Slice [0]
198:  Control flow event
198:  Before function call: float ('350',) {}
198:  After function call, result:  350.0
199:  Accessing
199:   Reading
199:      Reading
200:  Accessing
200:   Reading
200:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
201:  Accessing
201:   Reading
201:  Slice ['/Rect']
202:  Literal    value: 2
202:      Integer value: 2
203:  Accessing
203:   Reading
203:  Slice [2]
204:  Control flow event
204:  Before function call: float ('375.2',) {}
204:  After function call, result:  375.2
205:  Binary Operation 350.0 Add 375.2 -> 725.2
205:  Binary Operation 350.0 375.2 -> 725.2
206:  Literal    value: 2
206:      Integer value: 2
207:  Binary Operation 725.2 Divide 2 -> 362.6
207:  Binary Operation 725.2 2 -> 362.6
208:  Accessing
208:      Writing
209:  Accessing
209:   Reading
209:      Reading
210:  Accessing
210:   Reading
210:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
211:  Accessing
211:   Reading
211:  Slice ['/Rect']
212:  Literal    value: 1
212:      Integer value: 1
213:  Accessing
213:   Reading
213:  Slice [1]
214:  Control flow event
214:  Before function call: float ('636.587',) {}
214:  After function call, result:  636.587
215:  Accessing
215:   Reading
215:      Reading
216:  Accessing
216:   Reading
216:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
217:  Accessing
217:   Reading
217:  Slice ['/Rect']
218:  Literal    value: 3
218:      Integer value: 3
219:  Accessing
219:   Reading
219:  Slice [3]
220:  Control flow event
220:  Before function call: float ('664.667',) {}
220:  After function call, result:  664.667
221:  Binary Operation 636.587 Add 664.667 -> 1301.254
221:  Binary Operation 636.587 664.667 -> 1301.254
222:  Literal    value: 2
222:      Integer value: 2
223:  Binary Operation 1301.254 Divide 2 -> 650.627
223:  Binary Operation 1301.254 2 -> 650.627
224:  Accessing
224:      Writing
225:  Accessing
225:   Reading
225:      Reading
226:  Accessing
226:   Reading
226:      Reading
227:  Accessing
227:   Reading
227:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x111eebb90> is ●
228:  Accessing
228:   Reading
228:      Reading
229:  Accessing
229:   Reading
229:  Attribute:  font of <PyPDFForm.middleware.text.Text object at 0x111eebb90> is Helvetica
230:  Accessing
230:   Reading
230:      Reading
231:  Accessing
231:   Reading
231:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x111eebb90> is 19.95078945806407
232:  Control flow event
232:  Before function call: stringWidth ('●', 'Helvetica', 19.95078945806407) {}
232:  After function call, result:  15.781074461328679
233:  Literal    value: 2
233:      Integer value: 2
234:  Binary Operation 15.781074461328679 Divide 2 -> 7.890537230664339
234:  Binary Operation 15.781074461328679 2 -> 7.890537230664339
235:  Binary Operation 362.6 Subtract 7.890537230664339 -> 354.7094627693357
235:  Binary Operation 362.6 7.890537230664339 -> 354.7094627693357
236:  Accessing
236:   Reading
236:      Reading
237:  Accessing
237:   Reading
237:      Reading
238:  Literal    value: 2
238:      Integer value: 2
239:  Binary Operation 26.60105261075209 Divide 2 -> 13.300526305376046
239:  Binary Operation 26.60105261075209 2 -> 13.300526305376046
240:  Binary Operation 650.627 Subtract 13.300526305376046 -> 637.3264736946239
240:  Binary Operation 650.627 13.300526305376046 -> 637.3264736946239
241:  Accessing
241:   Reading
241:      Reading
242:  Binary Operation 637.3264736946239 Add 650.627 -> 1287.9534736946239
242:  Binary Operation 637.3264736946239 650.627 -> 1287.9534736946239
243:  Literal    value: 2
243:      Integer value: 2
244:  Binary Operation 1287.9534736946239 Divide 2 -> 643.9767368473119
244:  Binary Operation 1287.9534736946239 2 -> 643.9767368473119
245:  Literal    value: (354.7094627693357, 643.9767368473119)
245:  Tuple items: [354.7094627693357, 643.9767368473119]
49:  After function call, result:  (354.7094627693357, 643.9767368473119)
50:  Accessing
50:      Writing
51:  Accessing
51:   Reading
51:      Reading
52:  Accessing
52:   Reading
52:      Reading
53:  Accessing
53:   Reading
53:  Slice ['radio_1']
54:  Control flow event
54:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.checkbox.Checkbox'>) {}
54:  After function call, result:  False
59:  Binary Operation False And <function fill.<locals>.<lambda> at 0x102d45e40> -> False
59:  Binary Operation False <function fill.<locals>.<lambda> at 0x102d45e40> -> False
91:  Control flow event
91:  Control-flow enter with condition False
91:     If False
66:  Accessing
66:   Reading
66:      Reading
67:  Accessing
67:   Reading
67:      Reading
68:  Comparison NotIn radio_1 {} -> True
68:  Comparison radio_1 {} -> True
71:  Control flow event
71:  Control-flow enter with condition True
71:     If True
69:  Literal    value: 0
69:      Integer value: 0
70:  Accessing
70:      Writing
71:  Control flow event
71:  Control-flow exit
71:  If exit
75:  Literal    value: 1
75:      Integer value: 1
76:  Binary Operation <function fill.<locals>.<lambda> at 0x102d45e40> Add 1 -> None
76:  Binary Operation <function fill.<locals>.<lambda> at 0x102d45e40> 1 -> None
76:  Accessing
76:      Writing
76:  Augmented assignment <function fill.<locals>.<lambda> at 0x102d45e40> AddAssign 1
76:  Augmented assignment <function fill.<locals>.<lambda> at 0x102d45e40> 1
77:  Accessing
77:   Reading
77:      Reading
78:  Accessing
78:   Reading
78:      Reading
79:  Accessing
79:   Reading
79:  Slice ['radio_1']
80:  Accessing
80:   Reading
80:  Attribute:  value of <PyPDFForm.middleware.radio.Radio object at 0x1047c1790> is 1
81:  Accessing
81:   Reading
81:      Reading
82:  Accessing
82:   Reading
82:      Reading
83:  Accessing
83:   Reading
83:  Slice ['radio_1']
84:  Literal    value: 1
84:      Integer value: 1
85:  Binary Operation 1 Subtract 1 -> 0
85:  Binary Operation 1 1 -> 0
86:  Comparison Equal 1 0 -> False
86:  Comparison 1 0 -> False
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow exit
90:  If exit
91:  Control flow event
91:  Control-flow exit
91:  If exit
112:  Control flow event
112:  Control-flow exit
112:  If exit
113:  Accessing
113:   Reading
113:      Reading
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow enter with condition True
124:     For {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
24:  Accessing
24:   Reading
24:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
25:  Accessing
25:   Reading
25:      Reading
26:  Control flow event
26:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0)
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/1': (31, 0), '/Off': (32, 0)}, '/D': {'/1': (33, 0), '/Off': (34, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(l)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_8_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AS', '/Off')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition False
128:     For 
128:  Control flow event
128:  Control-flow exit
128:  For exit
134:  After function call, result:  None
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition None
144:     If None
144:  Control flow event
144:  Control-flow exit
144:  If exit
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/Parent': {'/T': True}}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/Parent': {'/T': True}}, {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '520.507', '375.2', '548.587']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '520.507', '375.2', '548.587'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Parent']
103:  Control flow event
103:  Before function call: isinstance ({'/T': True}, <class 'dict'>) {}
103:  After function call, result:  True
104:  Accessing
104:   Reading
104:      Reading
105:  Accessing
105:   Reading
105:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
106:  Control flow event
106:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
106:  After function call, result:  True
107:  Binary Operation True And True -> True
107:  Binary Operation True True -> True
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
108:  Accessing
108:   Reading
108:      Reading
109:  Accessing
109:   Reading
109:      Reading
110:  Accessing
110:   Reading
110:      Reading
111:  Accessing
111:   Reading
111:  Slice ['/Parent']
112:  Accessing
112:   Reading
112:      Reading
113:  Control flow event
113:  Before function call: traverse_pattern ({'/T': True}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': 
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '49152')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_7_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(radio_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x102d47420> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x102d47420> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (radio_1) -> (radio_1)
120:  Binary Operation True (radio_1) -> (radio_1)
122:  Control flow event
122:  Control-flow enter with condition (radio_1)
122:     If (radio_1)
121:  Accessing
121:   Reading
121:      Reading
113:  After function call, result:  (radio_1)
114:  Accessing
114:      Writing
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition (radio_1)
127:     If (radio_1)
126:  Accessing
126:   Reading
126:      Reading
134:  After function call, result:  (radio_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (radio_1)
144:     If (radio_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
26:  After function call, result:  radio_1
27:  Accessing
27:      Writing
28:  Literal    value: False
28:      Boolean value: False
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:  Slice ['radio_1']
33:  Literal    value: (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)
33:  Tuple items: [<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>]
34:  Control flow event
34:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)) {}
34:  After function call, result:  True
112:  Control flow event
112:  Control-flow enter with condition True
112:     If True
35:  Accessing
35:   Reading
35:  Attribute:  checkbox_radio_font_size of <module 'PyPDFForm.core.font_size' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/font_size.py'> is <function checkbox
36:  Accessing
36:   Reading
36:      Reading
37:  Control flow event
37:  Before function call: checkbox_radio_font_size ({'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids':
25:  Control flow event
26:  Accessing
26:   Reading
26:      Reading
27:  Accessing
27:   Reading
27:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
28:  Accessing
28:   Reading
28:  Slice ['/Rect']
29:  Literal    value: 0
29:      Integer value: 0
30:  Accessing
30:   Reading
30:  Slice [0]
31:  Control flow event
31:  Before function call: float ('350',) {}
31:  After function call, result:  350.0
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
34:  Accessing
34:   Reading
34:  Slice ['/Rect']
35:  Literal    value: 2
35:      Integer value: 2
36:  Accessing
36:   Reading
36:  Slice [2]
37:  Control flow event
37:  Before function call: float ('375.2',) {}
37:  After function call, result:  375.2
38:  Binary Operation 350.0 Subtract 375.2 -> -25.19999999999999
38:  Binary Operation 350.0 375.2 -> -25.19999999999999
39:  Control flow event
39:  Before function call: abs (-25.19999999999999,) {}
39:  After function call, result:  25.19999999999999
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
42:  Accessing
42:   Reading
42:  Slice ['/Rect']
43:  Literal    value: 1
43:      Integer value: 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Control flow event
45:  Before function call: float ('520.507',) {}
45:  After function call, result:  520.507
46:  Accessing
46:   Reading
46:      Reading
47:  Accessing
47:   Reading
47:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
48:  Accessing
48:   Reading
48:  Slice ['/Rect']
49:  Literal    value: 3
49:      Integer value: 3
50:  Accessing
50:   Reading
50:  Slice [3]
51:  Control flow event
51:  Before function call: float ('548.587',) {}
51:  After function call, result:  548.587
52:  Binary Operation 520.507 Subtract 548.587 -> -28.08000000000004
52:  Binary Operation 520.507 548.587 -> -28.08000000000004
53:  Control flow event
53:  Before function call: abs (-28.08000000000004,) {}
53:  After function call, result:  28.08000000000004
54:  Binary Operation 25.19999999999999 Multiply 28.08000000000004 -> 707.6160000000007
54:  Binary Operation 25.19999999999999 28.08000000000004 -> 707.6160000000007
55:  Accessing
55:      Writing
56:  Accessing
56:   Reading
56:      Reading
57:  Control flow event
57:  Before function call: sqrt (707.6160000000007,) {}
57:  After function call, result:  26.60105261075209
58:  Literal    value: 72
58:      Integer value: 72
59:  Binary Operation 26.60105261075209 Multiply 72 -> 1915.2757879741507
59:  Binary Operation 26.60105261075209 72 -> 1915.2757879741507
60:  Literal    value: 96
60:      Integer value: 96
61:  Binary Operation 1915.2757879741507 Divide 96 -> 19.95078945806407
61:  Binary Operation 1915.2757879741507 96 -> 19.95078945806407
37:  After function call, result:  19.95078945806407
38:  Accessing
38:      Writing
39:  Accessing
39:   Reading
39:  Attribute:  checkbox_radio_to_draw of <module 'PyPDFForm.core.utils' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/utils.py'> is <function checkbox_radio_to_
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:  Slice ['radio_1']
43:  Accessing
43:   Reading
43:      Reading
44:  Control flow event
44:  Before function call: checkbox_radio_to_draw (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, 19.95078945806407) {}
258:  Control flow event
259:  Accessing
259:   Reading
259:      Reading
5:  Control flow event
6:  Accessing
6:   Reading
6:      Reading
7:  Accessing
7:   Reading
7:  Attribute:  _name of <PyPDFForm.middleware.radio.Radio object at 0x1047c1790> is radio_1
260:  Accessing
260:   Reading
260:  Attribute:  name of <PyPDFForm.middleware.radio.Radio object at 0x1047c1790> is radio_1
261:  Literal    value: 
261:      String value: 
262:  Control flow event
262:  Before function call: Text () {'element_name': 'radio_1', 'element_value': ''}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Text'>, <Text object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Text'>, <Text object>> is <bound method Element.__init__ of <PyPDFForm.middleware.text.Text object at 0x11228d590>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('radio_1', '') {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
6:  Accessing
6:      Writing
7:  Accessing
7:      Writing
8:  Accessing
8:      Writing
9:  Accessing
9:      Writing
10:  Accessing
10:      Writing
11:  Accessing
11:      Writing
12:  Accessing
12:      Writing
13:  Accessing
13:      Writing
14:  Accessing
14:      Writing
0:  Control flow event
0:  Exiting function
262:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x11228d590>
263:  Accessing
263:      Writing
264:  Literal    value: Helvetica
264:      String value: Helvetica
265:  Accessing
265:      Writing
266:  Accessing
266:   Reading
266:      Reading
267:  Accessing
267:      Writing
268:  Literal    value: 0
268:      Integer value: 0
269:  Literal    value: 0
269:      Integer value: 0
270:  Literal    value: 0
270:      Integer value: 0
271:  Literal    value: (0, 0, 0)
271:  Tuple items: [0, 0, 0]
272:  Accessing
272:      Writing
273:  Accessing
273:   Reading
273:      Reading
274:  Control flow event
274:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.checkbox.Checkbox'>) {}
274:  After function call, result:  False
282:  Control flow event
282:  Control-flow enter with condition False
282:     If False
279:  Accessing
279:   Reading
279:  Attribute:  RADIO_TO_DRAW of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is ●
280:  Accessing
280:      Writing
281:  Control flow event
281:  Control-flow exit
281:  If exit
282:  Control flow event
282:  Control-flow exit
282:  If exit
283:  Accessing
283:   Reading
283:      Reading
44:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x11228d590>
45:  Accessing
45:      Writing
46:  Accessing
46:   Reading
46:  Attribute:  get_draw_checkbox_radio_coordinates of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function
47:  Accessing
47:   Reading
47:      Reading
48:  Accessing
48:   Reading
48:      Reading
49:  Control flow event
49:  Before function call: get_draw_checkbox_radio_coordinates ({'/Subtype': '/Widget', '/Rect': ['350', '520.507', '375.2', '548.587'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
185:  Control flow event
186:  Accessing
186:   Reading
186:      Reading
187:  Accessing
187:   Reading
187:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x11228d590> is 19.95078945806407
188:  Literal    value: 96
188:      Integer value: 96
189:  Binary Operation 19.95078945806407 Multiply 96 -> 1915.2757879741507
189:  Binary Operation 19.95078945806407 96 -> 1915.2757879741507
190:  Literal    value: 72
190:      Integer value: 72
191:  Binary Operation 1915.2757879741507 Divide 72 -> 26.60105261075209
191:  Binary Operation 1915.2757879741507 72 -> 26.60105261075209
192:  Accessing
192:      Writing
193:  Accessing
193:   Reading
193:      Reading
194:  Accessing
194:   Reading
194:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
195:  Accessing
195:   Reading
195:  Slice ['/Rect']
196:  Literal    value: 0
196:      Integer value: 0
197:  Accessing
197:   Reading
197:  Slice [0]
198:  Control flow event
198:  Before function call: float ('350',) {}
198:  After function call, result:  350.0
199:  Accessing
199:   Reading
199:      Reading
200:  Accessing
200:   Reading
200:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
201:  Accessing
201:   Reading
201:  Slice ['/Rect']
202:  Literal    value: 2
202:      Integer value: 2
203:  Accessing
203:   Reading
203:  Slice [2]
204:  Control flow event
204:  Before function call: float ('375.2',) {}
204:  After function call, result:  375.2
205:  Binary Operation 350.0 Add 375.2 -> 725.2
205:  Binary Operation 350.0 375.2 -> 725.2
206:  Literal    value: 2
206:      Integer value: 2
207:  Binary Operation 725.2 Divide 2 -> 362.6
207:  Binary Operation 725.2 2 -> 362.6
208:  Accessing
208:      Writing
209:  Accessing
209:   Reading
209:      Reading
210:  Accessing
210:   Reading
210:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
211:  Accessing
211:   Reading
211:  Slice ['/Rect']
212:  Literal    value: 1
212:      Integer value: 1
213:  Accessing
213:   Reading
213:  Slice [1]
214:  Control flow event
214:  Before function call: float ('520.507',) {}
214:  After function call, result:  520.507
215:  Accessing
215:   Reading
215:      Reading
216:  Accessing
216:   Reading
216:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
217:  Accessing
217:   Reading
217:  Slice ['/Rect']
218:  Literal    value: 3
218:      Integer value: 3
219:  Accessing
219:   Reading
219:  Slice [3]
220:  Control flow event
220:  Before function call: float ('548.587',) {}
220:  After function call, result:  548.587
221:  Binary Operation 520.507 Add 548.587 -> 1069.094
221:  Binary Operation 520.507 548.587 -> 1069.094
222:  Literal    value: 2
222:      Integer value: 2
223:  Binary Operation 1069.094 Divide 2 -> 534.547
223:  Binary Operation 1069.094 2 -> 534.547
224:  Accessing
224:      Writing
225:  Accessing
225:   Reading
225:      Reading
226:  Accessing
226:   Reading
226:      Reading
227:  Accessing
227:   Reading
227:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x11228d590> is ●
228:  Accessing
228:   Reading
228:      Reading
229:  Accessing
229:   Reading
229:  Attribute:  font of <PyPDFForm.middleware.text.Text object at 0x11228d590> is Helvetica
230:  Accessing
230:   Reading
230:      Reading
231:  Accessing
231:   Reading
231:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x11228d590> is 19.95078945806407
232:  Control flow event
232:  Before function call: stringWidth ('●', 'Helvetica', 19.95078945806407) {}
232:  After function call, result:  15.781074461328679
233:  Literal    value: 2
233:      Integer value: 2
234:  Binary Operation 15.781074461328679 Divide 2 -> 7.890537230664339
234:  Binary Operation 15.781074461328679 2 -> 7.890537230664339
235:  Binary Operation 362.6 Subtract 7.890537230664339 -> 354.7094627693357
235:  Binary Operation 362.6 7.890537230664339 -> 354.7094627693357
236:  Accessing
236:   Reading
236:      Reading
237:  Accessing
237:   Reading
237:      Reading
238:  Literal    value: 2
238:      Integer value: 2
239:  Binary Operation 26.60105261075209 Divide 2 -> 13.300526305376046
239:  Binary Operation 26.60105261075209 2 -> 13.300526305376046
240:  Binary Operation 534.547 Subtract 13.300526305376046 -> 521.246473694624
240:  Binary Operation 534.547 13.300526305376046 -> 521.246473694624
241:  Accessing
241:   Reading
241:      Reading
242:  Binary Operation 521.246473694624 Add 534.547 -> 1055.793473694624
242:  Binary Operation 521.246473694624 534.547 -> 1055.793473694624
243:  Literal    value: 2
243:      Integer value: 2
244:  Binary Operation 1055.793473694624 Divide 2 -> 527.896736847312
244:  Binary Operation 1055.793473694624 2 -> 527.896736847312
245:  Literal    value: (354.7094627693357, 527.896736847312)
245:  Tuple items: [354.7094627693357, 527.896736847312]
49:  After function call, result:  (354.7094627693357, 527.896736847312)
50:  Accessing
50:      Writing
51:  Accessing
51:   Reading
51:      Reading
52:  Accessing
52:   Reading
52:      Reading
53:  Accessing
53:   Reading
53:  Slice ['radio_1']
54:  Control flow event
54:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.checkbox.Checkbox'>) {}
54:  After function call, result:  False
59:  Binary Operation False And <function fill.<locals>.<lambda> at 0x107e8d9e0> -> False
59:  Binary Operation False <function fill.<locals>.<lambda> at 0x107e8d9e0> -> False
91:  Control flow event
91:  Control-flow enter with condition False
91:     If False
66:  Accessing
66:   Reading
66:      Reading
67:  Accessing
67:   Reading
67:      Reading
68:  Comparison NotIn radio_1 {'radio_1': 1} -> False
68:  Comparison radio_1 {'radio_1': 1} -> False
71:  Control flow event
71:  Control-flow enter with condition False
71:     If False
71:  Control flow event
71:  Control-flow exit
71:  If exit
75:  Literal    value: 1
75:      Integer value: 1
76:  Binary Operation <function fill.<locals>.<lambda> at 0x102d46ca0> Add 1 -> None
76:  Binary Operation <function fill.<locals>.<lambda> at 0x102d46ca0> 1 -> None
76:  Accessing
76:      Writing
76:  Augmented assignment <function fill.<locals>.<lambda> at 0x102d46ca0> AddAssign 1
76:  Augmented assignment <function fill.<locals>.<lambda> at 0x102d46ca0> 1
77:  Accessing
77:   Reading
77:      Reading
78:  Accessing
78:   Reading
78:      Reading
79:  Accessing
79:   Reading
79:  Slice ['radio_1']
80:  Accessing
80:   Reading
80:  Attribute:  value of <PyPDFForm.middleware.radio.Radio object at 0x1047c1790> is 1
81:  Accessing
81:   Reading
81:      Reading
82:  Accessing
82:   Reading
82:      Reading
83:  Accessing
83:   Reading
83:  Slice ['radio_1']
84:  Literal    value: 1
84:      Integer value: 1
85:  Binary Operation 2 Subtract 1 -> 1
85:  Binary Operation 2 1 -> 1
86:  Comparison Equal 1 1 -> True
86:  Comparison 1 1 -> True
89:  Control flow event
89:  Control-flow enter with condition True
89:     If True
87:  Literal    value: True
87:      Boolean value: True
88:  Accessing
88:      Writing
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow exit
90:  If exit
91:  Control flow event
91:  Control-flow exit
91:  If exit
112:  Control flow event
112:  Control-flow exit
112:  If exit
113:  Accessing
113:   Reading
113:      Reading
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
114:  Accessing
114:   Reading
114:      Reading
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:  Slice [1]
117:  Accessing
117:   Reading
117:  Attribute:  append of [[<PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307], [<PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973], [<PyPDFForm.middleware.tex
118:  Accessing
118:   Reading
118:      Reading
119:  Accessing
119:   Reading
119:      Reading
120:  Accessing
120:   Reading
120:      Reading
121:  Literal    value: [<PyPDFForm.middleware.text.Text object at 0x11228d590>, 354.7094627693357, 527.896736847312]
121:  List [<PyPDFForm.middleware.text.Text object at 0x11228d590>, 354.7094627693357, 527.896736847312]
122:  Control flow event
122:  Before function call: append ([<PyPDFForm.middleware.text.Text object at 0x11228d590>, 354.7094627693357, 527.896736847312],) {}
122:  After function call, result:  None
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow enter with condition True
124:     For {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(fo
24:  Accessing
24:   Reading
24:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
25:  Accessing
25:   Reading
25:      Reading
26:  Control flow event
26:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0)
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': {'/2': (36, 0), '/Off': (37, 0)}, '/D': {'/2': (38, 0), '/Off': (39, 0)}})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {'/CA': '(l)'})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_9_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AS', '/Off')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition False
128:     For 
128:  Control flow event
128:  Control-flow exit
128:  For exit
134:  After function call, result:  None
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition None
144:     If None
144:  Control flow event
144:  Control-flow exit
144:  If exit
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/Parent': {'/T': True}}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/Parent': {'/T': True}}, {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['350', '407.093', '375.2', '435.173']), ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (3
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['350', '407.093', '375.2', '435.173'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Parent', {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choice
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Parent']
103:  Control flow event
103:  Before function call: isinstance ({'/T': True}, <class 'dict'>) {}
103:  After function call, result:  True
104:  Accessing
104:   Reading
104:      Reading
105:  Accessing
105:   Reading
105:  Attribute:  PdfDict of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.objects.pdfdict.PdfDict'>
106:  Control flow event
106:  Before function call: isinstance ({'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choi
106:  After function call, result:  True
107:  Binary Operation True And True -> True
107:  Binary Operation True True -> True
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
108:  Accessing
108:   Reading
108:      Reading
109:  Accessing
109:   Reading
109:      Reading
110:  Accessing
110:   Reading
110:      Reading
111:  Accessing
111:   Reading
111:  Slice ['/Parent']
112:  Accessing
112:   Reading
112:      Reading
113:  Control flow event
113:  Before function call: traverse_pattern ({'/T': True}, {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': 
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids': [(25, 0), (30, 0), (35, 0)], '/TM': '(form_7_0)', '/T': '(radio_1)', '/Opt': ['(Choice1)', '(Choice2)', '(Choi
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/DA', '(/ZaDb 0 Tf 0 g)'), ('/Ff', '49152'), ('/FT', '/Btn'), ('/Kids', [(25, 0), (30, 0), (35, 0)]), ('/TM', '(form_7_0)'), ('/T', '(radio_1)'), ('/Opt', ['(Choice1)
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/ZaDb 0 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '49152')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Btn')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Kids', [(25, 0), (30, 0), (35, 0)])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(form_7_0)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(radio_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x107e8e840> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x107e8e840> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (radio_1) -> (radio_1)
120:  Binary Operation True (radio_1) -> (radio_1)
122:  Control flow event
122:  Control-flow enter with condition (radio_1)
122:     If (radio_1)
121:  Accessing
121:   Reading
121:      Reading
113:  After function call, result:  (radio_1)
114:  Accessing
114:      Writing
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition (radio_1)
127:     If (radio_1)
126:  Accessing
126:   Reading
126:      Reading
134:  After function call, result:  (radio_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (radio_1)
144:     If (radio_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
26:  After function call, result:  radio_1
27:  Accessing
27:      Writing
28:  Literal    value: False
28:      Boolean value: False
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:  Slice ['radio_1']
33:  Literal    value: (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)
33:  Tuple items: [<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>]
34:  Control flow event
34:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)) {}
34:  After function call, result:  True
112:  Control flow event
112:  Control-flow enter with condition True
112:     If True
35:  Accessing
35:   Reading
35:  Attribute:  checkbox_radio_font_size of <module 'PyPDFForm.core.font_size' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/font_size.py'> is <function checkbox
36:  Accessing
36:   Reading
36:      Reading
37:  Control flow event
37:  Before function call: checkbox_radio_font_size ({'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn', '/Kids':
25:  Control flow event
26:  Accessing
26:   Reading
26:      Reading
27:  Accessing
27:   Reading
27:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
28:  Accessing
28:   Reading
28:  Slice ['/Rect']
29:  Literal    value: 0
29:      Integer value: 0
30:  Accessing
30:   Reading
30:  Slice [0]
31:  Control flow event
31:  Before function call: float ('350',) {}
31:  After function call, result:  350.0
32:  Accessing
32:   Reading
32:      Reading
33:  Accessing
33:   Reading
33:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
34:  Accessing
34:   Reading
34:  Slice ['/Rect']
35:  Literal    value: 2
35:      Integer value: 2
36:  Accessing
36:   Reading
36:  Slice [2]
37:  Control flow event
37:  Before function call: float ('375.2',) {}
37:  After function call, result:  375.2
38:  Binary Operation 350.0 Subtract 375.2 -> -25.19999999999999
38:  Binary Operation 350.0 375.2 -> -25.19999999999999
39:  Control flow event
39:  Before function call: abs (-25.19999999999999,) {}
39:  After function call, result:  25.19999999999999
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
42:  Accessing
42:   Reading
42:  Slice ['/Rect']
43:  Literal    value: 1
43:      Integer value: 1
44:  Accessing
44:   Reading
44:  Slice [1]
45:  Control flow event
45:  Before function call: float ('407.093',) {}
45:  After function call, result:  407.093
46:  Accessing
46:   Reading
46:      Reading
47:  Accessing
47:   Reading
47:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
48:  Accessing
48:   Reading
48:  Slice ['/Rect']
49:  Literal    value: 3
49:      Integer value: 3
50:  Accessing
50:   Reading
50:  Slice [3]
51:  Control flow event
51:  Before function call: float ('435.173',) {}
51:  After function call, result:  435.173
52:  Binary Operation 407.093 Subtract 435.173 -> -28.079999999999984
52:  Binary Operation 407.093 435.173 -> -28.079999999999984
53:  Control flow event
53:  Before function call: abs (-28.079999999999984,) {}
53:  After function call, result:  28.079999999999984
54:  Binary Operation 25.19999999999999 Multiply 28.079999999999984 -> 707.6159999999993
54:  Binary Operation 25.19999999999999 28.079999999999984 -> 707.6159999999993
55:  Accessing
55:      Writing
56:  Accessing
56:   Reading
56:      Reading
57:  Control flow event
57:  Before function call: sqrt (707.6159999999993,) {}
57:  After function call, result:  26.601052610752067
58:  Literal    value: 72
58:      Integer value: 72
59:  Binary Operation 26.601052610752067 Multiply 72 -> 1915.275787974149
59:  Binary Operation 26.601052610752067 72 -> 1915.275787974149
60:  Literal    value: 96
60:      Integer value: 96
61:  Binary Operation 1915.275787974149 Divide 96 -> 19.95078945806405
61:  Binary Operation 1915.275787974149 96 -> 19.95078945806405
37:  After function call, result:  19.95078945806405
38:  Accessing
38:      Writing
39:  Accessing
39:   Reading
39:  Attribute:  checkbox_radio_to_draw of <module 'PyPDFForm.core.utils' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/utils.py'> is <function checkbox_radio_to_
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:  Slice ['radio_1']
43:  Accessing
43:   Reading
43:      Reading
44:  Control flow event
44:  Before function call: checkbox_radio_to_draw (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, 19.95078945806405) {}
258:  Control flow event
259:  Accessing
259:   Reading
259:      Reading
5:  Control flow event
6:  Accessing
6:   Reading
6:      Reading
7:  Accessing
7:   Reading
7:  Attribute:  _name of <PyPDFForm.middleware.radio.Radio object at 0x1047c1790> is radio_1
260:  Accessing
260:   Reading
260:  Attribute:  name of <PyPDFForm.middleware.radio.Radio object at 0x1047c1790> is radio_1
261:  Literal    value: 
261:      String value: 
262:  Control flow event
262:  Before function call: Text () {'element_name': 'radio_1', 'element_value': ''}
0:  Control flow event
1:  Control flow event
1:  After function call, result:  <super: <class 'Text'>, <Text object>>
2:  Accessing
2:   Reading
2:  Attribute:  __init__ of <super: <class 'Text'>, <Text object>> is <bound method Element.__init__ of <PyPDFForm.middleware.text.Text object at 0x1045bf8d0>>
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:   Reading
4:      Reading
5:  Control flow event
5:  Before function call: __init__ ('radio_1', '') {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:      Reading
4:  Accessing
4:      Writing
0:  Control flow event
0:  Exiting function
5:  After function call, result:  None
6:  Accessing
6:      Writing
7:  Accessing
7:      Writing
8:  Accessing
8:      Writing
9:  Accessing
9:      Writing
10:  Accessing
10:      Writing
11:  Accessing
11:      Writing
12:  Accessing
12:      Writing
13:  Accessing
13:      Writing
14:  Accessing
14:      Writing
0:  Control flow event
0:  Exiting function
262:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x1045bf8d0>
263:  Accessing
263:      Writing
264:  Literal    value: Helvetica
264:      String value: Helvetica
265:  Accessing
265:      Writing
266:  Accessing
266:   Reading
266:      Reading
267:  Accessing
267:      Writing
268:  Literal    value: 0
268:      Integer value: 0
269:  Literal    value: 0
269:      Integer value: 0
270:  Literal    value: 0
270:      Integer value: 0
271:  Literal    value: (0, 0, 0)
271:  Tuple items: [0, 0, 0]
272:  Accessing
272:      Writing
273:  Accessing
273:   Reading
273:      Reading
274:  Control flow event
274:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.checkbox.Checkbox'>) {}
274:  After function call, result:  False
282:  Control flow event
282:  Control-flow enter with condition False
282:     If False
279:  Accessing
279:   Reading
279:  Attribute:  RADIO_TO_DRAW of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is ●
280:  Accessing
280:      Writing
281:  Control flow event
281:  Control-flow exit
281:  If exit
282:  Control flow event
282:  Control-flow exit
282:  If exit
283:  Accessing
283:   Reading
283:      Reading
44:  After function call, result:  <PyPDFForm.middleware.text.Text object at 0x1045bf8d0>
45:  Accessing
45:      Writing
46:  Accessing
46:   Reading
46:  Attribute:  get_draw_checkbox_radio_coordinates of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function
47:  Accessing
47:   Reading
47:      Reading
48:  Accessing
48:   Reading
48:      Reading
49:  Control flow event
49:  Before function call: get_draw_checkbox_radio_coordinates ({'/Subtype': '/Widget', '/Rect': ['350', '407.093', '375.2', '435.173'], '/Parent': {'/DA': '(/ZaDb 0 Tf 0 g)', '/Ff': '49152', '/FT': '/Btn
185:  Control flow event
186:  Accessing
186:   Reading
186:      Reading
187:  Accessing
187:   Reading
187:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x1045bf8d0> is 19.95078945806405
188:  Literal    value: 96
188:      Integer value: 96
189:  Binary Operation 19.95078945806405 Multiply 96 -> 1915.275787974149
189:  Binary Operation 19.95078945806405 96 -> 1915.275787974149
190:  Literal    value: 72
190:      Integer value: 72
191:  Binary Operation 1915.275787974149 Divide 72 -> 26.601052610752067
191:  Binary Operation 1915.275787974149 72 -> 26.601052610752067
192:  Accessing
192:      Writing
193:  Accessing
193:   Reading
193:      Reading
194:  Accessing
194:   Reading
194:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
195:  Accessing
195:   Reading
195:  Slice ['/Rect']
196:  Literal    value: 0
196:      Integer value: 0
197:  Accessing
197:   Reading
197:  Slice [0]
198:  Control flow event
198:  Before function call: float ('350',) {}
198:  After function call, result:  350.0
199:  Accessing
199:   Reading
199:      Reading
200:  Accessing
200:   Reading
200:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
201:  Accessing
201:   Reading
201:  Slice ['/Rect']
202:  Literal    value: 2
202:      Integer value: 2
203:  Accessing
203:   Reading
203:  Slice [2]
204:  Control flow event
204:  Before function call: float ('375.2',) {}
204:  After function call, result:  375.2
205:  Binary Operation 350.0 Add 375.2 -> 725.2
205:  Binary Operation 350.0 375.2 -> 725.2
206:  Literal    value: 2
206:      Integer value: 2
207:  Binary Operation 725.2 Divide 2 -> 362.6
207:  Binary Operation 725.2 2 -> 362.6
208:  Accessing
208:      Writing
209:  Accessing
209:   Reading
209:      Reading
210:  Accessing
210:   Reading
210:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
211:  Accessing
211:   Reading
211:  Slice ['/Rect']
212:  Literal    value: 1
212:      Integer value: 1
213:  Accessing
213:   Reading
213:  Slice [1]
214:  Control flow event
214:  Before function call: float ('407.093',) {}
214:  After function call, result:  407.093
215:  Accessing
215:   Reading
215:      Reading
216:  Accessing
216:   Reading
216:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
217:  Accessing
217:   Reading
217:  Slice ['/Rect']
218:  Literal    value: 3
218:      Integer value: 3
219:  Accessing
219:   Reading
219:  Slice [3]
220:  Control flow event
220:  Before function call: float ('435.173',) {}
220:  After function call, result:  435.173
221:  Binary Operation 407.093 Add 435.173 -> 842.2660000000001
221:  Binary Operation 407.093 435.173 -> 842.2660000000001
222:  Literal    value: 2
222:      Integer value: 2
223:  Binary Operation 842.2660000000001 Divide 2 -> 421.13300000000004
223:  Binary Operation 842.2660000000001 2 -> 421.13300000000004
224:  Accessing
224:      Writing
225:  Accessing
225:   Reading
225:      Reading
226:  Accessing
226:   Reading
226:      Reading
227:  Accessing
227:   Reading
227:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x1045bf8d0> is ●
228:  Accessing
228:   Reading
228:      Reading
229:  Accessing
229:   Reading
229:  Attribute:  font of <PyPDFForm.middleware.text.Text object at 0x1045bf8d0> is Helvetica
230:  Accessing
230:   Reading
230:      Reading
231:  Accessing
231:   Reading
231:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x1045bf8d0> is 19.95078945806405
232:  Control flow event
232:  Before function call: stringWidth ('●', 'Helvetica', 19.95078945806405) {}
232:  After function call, result:  15.781074461328664
233:  Literal    value: 2
233:      Integer value: 2
234:  Binary Operation 15.781074461328664 Divide 2 -> 7.890537230664332
234:  Binary Operation 15.781074461328664 2 -> 7.890537230664332
235:  Binary Operation 362.6 Subtract 7.890537230664332 -> 354.7094627693357
235:  Binary Operation 362.6 7.890537230664332 -> 354.7094627693357
236:  Accessing
236:   Reading
236:      Reading
237:  Accessing
237:   Reading
237:      Reading
238:  Literal    value: 2
238:      Integer value: 2
239:  Binary Operation 26.601052610752067 Divide 2 -> 13.300526305376033
239:  Binary Operation 26.601052610752067 2 -> 13.300526305376033
240:  Binary Operation 421.13300000000004 Subtract 13.300526305376033 -> 407.832473694624
240:  Binary Operation 421.13300000000004 13.300526305376033 -> 407.832473694624
241:  Accessing
241:   Reading
241:      Reading
242:  Binary Operation 407.832473694624 Add 421.13300000000004 -> 828.965473694624
242:  Binary Operation 407.832473694624 421.13300000000004 -> 828.965473694624
243:  Literal    value: 2
243:      Integer value: 2
244:  Binary Operation 828.965473694624 Divide 2 -> 414.482736847312
244:  Binary Operation 828.965473694624 2 -> 414.482736847312
245:  Literal    value: (354.7094627693357, 414.482736847312)
245:  Tuple items: [354.7094627693357, 414.482736847312]
49:  After function call, result:  (354.7094627693357, 414.482736847312)
50:  Accessing
50:      Writing
51:  Accessing
51:   Reading
51:      Reading
52:  Accessing
52:   Reading
52:      Reading
53:  Accessing
53:   Reading
53:  Slice ['radio_1']
54:  Control flow event
54:  Before function call: isinstance (<PyPDFForm.middleware.radio.Radio object at 0x1047c1790>, <class 'PyPDFForm.middleware.checkbox.Checkbox'>) {}
54:  After function call, result:  False
59:  Binary Operation False And <function fill.<locals>.<lambda> at 0x11067a0c0> -> False
59:  Binary Operation False <function fill.<locals>.<lambda> at 0x11067a0c0> -> False
91:  Control flow event
91:  Control-flow enter with condition False
91:     If False
66:  Accessing
66:   Reading
66:      Reading
67:  Accessing
67:   Reading
67:      Reading
68:  Comparison NotIn radio_1 {'radio_1': 2} -> False
68:  Comparison radio_1 {'radio_1': 2} -> False
71:  Control flow event
71:  Control-flow enter with condition False
71:     If False
71:  Control flow event
71:  Control-flow exit
71:  If exit
75:  Literal    value: 1
75:      Integer value: 1
76:  Binary Operation <function fill.<locals>.<lambda> at 0x107e8f2e0> Add 1 -> None
76:  Binary Operation <function fill.<locals>.<lambda> at 0x107e8f2e0> 1 -> None
76:  Accessing
76:      Writing
76:  Augmented assignment <function fill.<locals>.<lambda> at 0x107e8f2e0> AddAssign 1
76:  Augmented assignment <function fill.<locals>.<lambda> at 0x107e8f2e0> 1
77:  Accessing
77:   Reading
77:      Reading
78:  Accessing
78:   Reading
78:      Reading
79:  Accessing
79:   Reading
79:  Slice ['radio_1']
80:  Accessing
80:   Reading
80:  Attribute:  value of <PyPDFForm.middleware.radio.Radio object at 0x1047c1790> is 1
81:  Accessing
81:   Reading
81:      Reading
82:  Accessing
82:   Reading
82:      Reading
83:  Accessing
83:   Reading
83:  Slice ['radio_1']
84:  Literal    value: 1
84:      Integer value: 1
85:  Binary Operation 3 Subtract 1 -> 2
85:  Binary Operation 3 1 -> 2
86:  Comparison Equal 1 2 -> False
86:  Comparison 1 2 -> False
89:  Control flow event
89:  Control-flow enter with condition False
89:     If False
89:  Control flow event
89:  Control-flow exit
89:  If exit
90:  Control flow event
90:  Control-flow exit
90:  If exit
91:  Control flow event
91:  Control-flow exit
91:  If exit
112:  Control flow event
112:  Control-flow exit
112:  If exit
113:  Accessing
113:   Reading
113:      Reading
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow enter with condition True
124:     For {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '/MK': {}, '/P'
24:  Accessing
24:   Reading
24:  Attribute:  get_element_key of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_element_key at 
25:  Accessing
25:   Reading
25:      Reading
26:  Control flow event
26:  Before function call: get_element_key ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/
129:  Control flow event
130:  Accessing
130:      Writing
145:  Control flow event
145:  Control-flow enter with condition True
145:     For {'/T': True}
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Accessing
133:   Reading
133:      Reading
134:  Control flow event
134:  Before function call: traverse_pattern ({'/T': True}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['120.667', '301', '314.667', '326'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (41, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 14 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '131072')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Ch')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(glgg_oM95)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(dropdown_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/T']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x107e8de40> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x107e8de40> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/T']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And (dropdown_1) -> (dropdown_1)
120:  Binary Operation True (dropdown_1) -> (dropdown_1)
122:  Control flow event
122:  Control-flow enter with condition (dropdown_1)
122:     If (dropdown_1)
121:  Accessing
121:   Reading
121:      Reading
134:  After function call, result:  (dropdown_1)
135:  Accessing
135:      Writing
136:  Accessing
136:   Reading
136:      Reading
144:  Control flow event
144:  Control-flow enter with condition (dropdown_1)
144:     If (dropdown_1)
137:  Accessing
137:   Reading
137:      Reading
138:  Literal    value: 1
138:      Integer value: 1
139:  Literal    value: 1
139:      Integer value: 1
140:  Unary Operation 1 -> -1
140:  Unary Operation 1 -> -1
141:  Accessing
141:   Reading
141:  Slice [slice(1, -1, None)]
142:  Accessing
142:      Writing
143:  Control flow event
143:  Break
146:  Accessing
146:   Reading
146:      Reading
26:  After function call, result:  dropdown_1
27:  Accessing
27:      Writing
28:  Literal    value: False
28:      Boolean value: False
29:  Accessing
29:      Writing
30:  Accessing
30:   Reading
30:      Reading
31:  Accessing
31:   Reading
31:      Reading
32:  Accessing
32:   Reading
32:  Slice ['dropdown_1']
33:  Literal    value: (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)
33:  Tuple items: [<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>]
34:  Control flow event
34:  Before function call: isinstance (<PyPDFForm.middleware.text.Text object at 0x10782bcd0>, (<class 'PyPDFForm.middleware.checkbox.Checkbox'>, <class 'PyPDFForm.middleware.radio.Radio'>)) {}
34:  After function call, result:  False
112:  Control flow event
112:  Control-flow enter with condition False
112:     If False
92:  Accessing
92:   Reading
92:  Attribute:  get_text_line_x_coordinates of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_tex
93:  Accessing
93:   Reading
93:      Reading
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:      Reading
96:  Accessing
96:   Reading
96:  Slice ['dropdown_1']
97:  Control flow event
97:  Before function call: get_text_line_x_coordinates ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072
669:  Control flow event
670:  Accessing
670:   Reading
670:      Reading
671:  Accessing
671:   Reading
671:  Attribute:  text_wrap_length of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is None
672:  Comparison IsNot None None -> False
672:  Comparison None None -> False
676:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x11067bc40> -> False
676:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x11067bc40> -> False
680:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x11067b880> -> False
680:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda>.<locals>.<lambda> at 0x11067b880> -> False
684:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x11067aa20> -> False
684:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x11067aa20> -> False
691:  Binary Operation False And <function get_text_line_x_coordinates.<locals>.<lambda> at 0x11067ade0> -> False
691:  Binary Operation False <function get_text_line_x_coordinates.<locals>.<lambda> at 0x11067ade0> -> False
713:  Control flow event
713:  Control-flow enter with condition False
713:     If False
713:  Control flow event
713:  Control-flow exit
713:  If exit
97:  After function call, result:  None
98:  Accessing
98:      Writing
99:  Accessing
99:   Reading
99:  Attribute:  get_draw_text_coordinates of <module 'PyPDFForm.core.template' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/template.py'> is <function get_draw_
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:      Reading
103:  Accessing
103:   Reading
103:  Slice ['dropdown_1']
104:  Control flow event
104:  Before function call: get_draw_text_coordinates ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072',
424:  Control flow event
425:  Accessing
425:   Reading
425:      Reading
426:  Accessing
426:   Reading
426:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is None
427:  Literal    value: 
427:      String value: 
428:  Binary Operation None Or  -> 
428:  Binary Operation None  -> 
429:  Accessing
429:      Writing
435:  Accessing
435:   Reading
435:      Reading
436:  Accessing
436:   Reading
436:  Attribute:  max_length of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is None
437:  Comparison IsNot None None -> False
437:  Comparison None None -> False
440:  Control flow event
440:  Control-flow enter with condition False
440:     If False
438:  Accessing
438:   Reading
438:      Reading
439:  Control flow event
439:  Before function call: len ('',) {}
439:  After function call, result:  0
440:  Control flow event
440:  Control-flow exit
440:  If exit
441:  Accessing
441:      Writing
442:  Accessing
442:   Reading
442:      Reading
443:  Accessing
443:   Reading
443:      Reading
444:  Accessing
444:   Reading
444:  Slice [slice(None, 0, None)]
445:  Accessing
445:      Writing
446:  Accessing
446:   Reading
446:      Reading
447:  Accessing
447:   Reading
447:  Attribute:  text_wrap_length of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is None
448:  Comparison IsNot None None -> False
448:  Comparison None None -> False
454:  Control flow event
454:  Control-flow enter with condition False
454:     If False
454:  Control flow event
454:  Control-flow exit
454:  If exit
459:  Accessing
459:   Reading
459:      Reading
460:  Accessing
460:   Reading
460:  Attribute:  character_paddings of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is None
461:  Comparison IsNot None None -> False
461:  Comparison None None -> False
464:  Control flow event
464:  Control-flow enter with condition False
464:     If False
462:  Accessing
462:   Reading
462:      Reading
463:  Accessing
463:   Reading
463:  Attribute:  character_paddings of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is None
464:  Control flow event
464:  Control-flow exit
464:  If exit
465:  Accessing
465:      Writing
466:  Accessing
466:   Reading
466:      Reading
467:  Accessing
467:   Reading
467:      Reading
468:  Control flow event
468:  Before function call: get_element_alignment ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/F
147:  Control flow event
148:  Accessing
148:      Writing
159:  Control flow event
159:  Control-flow enter with condition True
159:     For {'/Q': True}
149:  Accessing
149:   Reading
149:      Reading
150:  Accessing
150:   Reading
150:      Reading
151:  Accessing
151:   Reading
151:      Reading
152:  Control flow event
152:  Before function call: traverse_pattern ({'/Q': True}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['120.667', '301', '314.667', '326'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (41, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 14 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '131072')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/FT', '/Ch')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/H', '/P')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/MK', {})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/P', {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [{'/Subtype': '/Widget', '/Rect': ['97.333', '617.707', '238.453', '666.66
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/TM', '(glgg_oM95)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/T', '(dropdown_1)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Opt', [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['(foobar)', '(foobar)'], '( )'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Q', '0')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Q']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x11067a520> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x11067a520> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/Q']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And 0 -> 0
120:  Binary Operation True 0 -> 0
122:  Control flow event
122:  Control-flow enter with condition 0
122:     If 0
121:  Accessing
121:   Reading
121:      Reading
152:  After function call, result:  0
153:  Accessing
153:      Writing
154:  Accessing
154:   Reading
154:      Reading
158:  Control flow event
158:  Control-flow enter with condition 0
158:     If 0
155:  Accessing
155:   Reading
155:      Reading
156:  Accessing
156:      Writing
157:  Control flow event
157:  Break
160:  Accessing
160:   Reading
160:      Reading
468:  After function call, result:  0
470:  Binary Operation 0 Or <function get_draw_text_coordinates.<locals>.<lambda> at 0x11067ade0> -> 0
470:  Binary Operation 0 <function get_draw_text_coordinates.<locals>.<lambda> at 0x11067ade0> -> 0
471:  Accessing
471:      Writing
472:  Accessing
472:   Reading
472:      Reading
473:  Accessing
473:   Reading
473:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
474:  Accessing
474:   Reading
474:  Slice ['/Rect']
475:  Literal    value: 0
475:      Integer value: 0
476:  Accessing
476:   Reading
476:  Slice [0]
477:  Control flow event
477:  Before function call: float ('120.667',) {}
477:  After function call, result:  120.667
478:  Accessing
478:      Writing
479:  Accessing
479:   Reading
479:      Reading
480:  Control flow event
480:  Before function call: int ('0',) {}
480:  After function call, result:  0
481:  Literal    value: 0
481:      Integer value: 0
482:  Comparison NotEqual 0 0 -> False
482:  Comparison 0 0 -> False
577:  Control flow event
577:  Control-flow enter with condition False
577:     If False
577:  Control flow event
577:  Control-flow exit
577:  If exit
578:  Accessing
578:   Reading
578:      Reading
579:  Accessing
579:   Reading
579:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is 14.0
580:  Literal    value: 96
580:      Integer value: 96
581:  Binary Operation 14.0 Multiply 96 -> 1344.0
581:  Binary Operation 14.0 96 -> 1344.0
582:  Literal    value: 72
582:      Integer value: 72
583:  Binary Operation 1344.0 Divide 72 -> 18.666666666666668
583:  Binary Operation 1344.0 72 -> 18.666666666666668
584:  Accessing
584:      Writing
585:  Accessing
585:   Reading
585:      Reading
586:  Accessing
586:   Reading
586:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
587:  Accessing
587:   Reading
587:  Slice ['/Rect']
588:  Literal    value: 1
588:      Integer value: 1
589:  Accessing
589:   Reading
589:  Slice [1]
590:  Control flow event
590:  Before function call: float ('301',) {}
590:  After function call, result:  301.0
591:  Accessing
591:   Reading
591:      Reading
592:  Accessing
592:   Reading
592:  Attribute:  ANNOTATION_RECTANGLE_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Rect
593:  Accessing
593:   Reading
593:  Slice ['/Rect']
594:  Literal    value: 3
594:      Integer value: 3
595:  Accessing
595:   Reading
595:  Slice [3]
596:  Control flow event
596:  Before function call: float ('326',) {}
596:  After function call, result:  326.0
597:  Binary Operation 301.0 Add 326.0 -> 627.0
597:  Binary Operation 301.0 326.0 -> 627.0
598:  Literal    value: 2
598:      Integer value: 2
599:  Binary Operation 627.0 Divide 2 -> 313.5
599:  Binary Operation 627.0 2 -> 313.5
600:  Accessing
600:      Writing
601:  Accessing
601:   Reading
601:      Reading
602:  Accessing
602:   Reading
602:      Reading
603:  Literal    value: 2
603:      Integer value: 2
604:  Binary Operation 18.666666666666668 Divide 2 -> 9.333333333333334
604:  Binary Operation 18.666666666666668 2 -> 9.333333333333334
605:  Binary Operation 313.5 Subtract 9.333333333333334 -> 304.1666666666667
605:  Binary Operation 313.5 9.333333333333334 -> 304.1666666666667
606:  Accessing
606:   Reading
606:      Reading
607:  Binary Operation 304.1666666666667 Add 313.5 -> 617.6666666666667
607:  Binary Operation 304.1666666666667 313.5 -> 617.6666666666667
608:  Literal    value: 2
608:      Integer value: 2
609:  Binary Operation 617.6666666666667 Divide 2 -> 308.83333333333337
609:  Binary Operation 617.6666666666667 2 -> 308.83333333333337
610:  Accessing
610:      Writing
611:  Accessing
611:   Reading
611:      Reading
612:  Accessing
612:   Reading
612:      Reading
613:  Control flow event
613:  Before function call: is_text_multiline ({'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': 
298:  Control flow event
299:  Accessing
299:      Writing
309:  Control flow event
309:  Control-flow enter with condition True
309:     For {'/Ff': True}
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:      Reading
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: traverse_pattern ({'/Ff': True}, {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '13
92:  Control flow event
94:  Accessing
94:   Reading
94:      Reading
95:  Accessing
95:   Reading
95:  Attribute:  items of {'/Subtype': '/Widget', '/Rect': ['120.667', '301', '314.667', '326'], '/AP': {'/N': (41, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/Ff': '131072', '/FT': '/Ch', '/H': '/P', '
96:  Control flow event
96:  Before function call: items () {}
96:  After function call, result:  [('/Subtype', '/Widget'), ('/Rect', ['120.667', '301', '314.667', '326']), ('/AP', {'/N': (41, 0)}), ('/DA', '(/Helv 14 Tf 0 g)'), ('/F', '4'), ('/Ff', '131072'), ('/FT'
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Subtype', '/Widget')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Rect', ['120.667', '301', '314.667', '326'])
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/AP', {'/N': (41, 0)})
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/DA', '(/Helv 14 Tf 0 g)')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/F', '4')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition False
124:     If False
124:  Control flow event
124:  Control-flow exit
124:  If exit
125:  Accessing
125:   Reading
125:      Reading
127:  Control flow event
127:  Control-flow enter with condition None
127:     If None
127:  Control flow event
127:  Control-flow exit
127:  If exit
128:  Control flow event
128:  Control-flow enter with condition True
128:     For ('/Ff', '131072')
97:  Accessing
97:      Writing
98:  Accessing
98:   Reading
98:      Reading
99:  Accessing
99:   Reading
99:      Reading
124:  Control flow event
124:  Control-flow enter with condition True
124:     If True
100:  Accessing
100:   Reading
100:      Reading
101:  Accessing
101:   Reading
101:      Reading
102:  Accessing
102:   Reading
102:  Slice ['/Ff']
103:  Control flow event
103:  Before function call: isinstance (True, <class 'dict'>) {}
103:  After function call, result:  False
107:  Binary Operation False And <function traverse_pattern.<locals>.<lambda> at 0x11067b420> -> False
107:  Binary Operation False <function traverse_pattern.<locals>.<lambda> at 0x11067b420> -> False
123:  Control flow event
123:  Control-flow enter with condition False
123:     If False
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:      Reading
117:  Accessing
117:   Reading
117:  Slice ['/Ff']
118:  Literal    value: True
118:      Boolean value: True
119:  Accessing
119:   Reading
119:      Reading
120:  Binary Operation True And 131072 -> 131072
120:  Binary Operation True 131072 -> 131072
122:  Control flow event
122:  Control-flow enter with condition 131072
122:     If 131072
121:  Accessing
121:   Reading
121:      Reading
303:  After function call, result:  131072
304:  Accessing
304:      Writing
305:  Accessing
305:   Reading
305:      Reading
306:  Comparison IsNot 131072 None -> True
306:  Comparison 131072 None -> True
308:  Control flow event
308:  Control-flow enter with condition True
308:     If True
307:  Control flow event
307:  Break
310:  Accessing
310:   Reading
310:      Reading
312:  Control flow event
312:  Control-flow enter with condition False
312:     If False
312:  Control flow event
312:  Control-flow exit
312:  If exit
314:  Accessing
314:   Reading
314:  Attribute:  format of {0:b} is <built-in method format of str object at 0x101f34cf0>
315:  Accessing
315:   Reading
315:      Reading
316:  Control flow event
316:  Before function call: int ('131072',) {}
316:  After function call, result:  131072
317:  Control flow event
317:  Before function call: format (131072,) {}
317:  After function call, result:  100000000000000000
318:  Literal    value: 1
318:      Integer value: 1
319:  Unary Operation 1 -> -1
319:  Unary Operation 1 -> -1
320:  Accessing
320:   Reading
320:  Slice [slice(None, None, -1)]
321:  Literal    value: 12
321:      Integer value: 12
322:  Accessing
322:   Reading
322:  Slice [12]
323:  Comparison Equal 0 1 -> False
323:  Comparison 0 1 -> False
613:  After function call, result:  False
625:  Control flow event
625:  Control-flow enter with condition False
625:     If False
625:  Control flow event
625:  Control-flow exit
625:  If exit
626:  Accessing
626:   Reading
626:      Reading
627:  Control flow event
627:  Before function call: int ('0',) {}
627:  After function call, result:  0
628:  Literal    value: 1
628:      Integer value: 1
629:  Comparison Equal 0 1 -> False
629:  Comparison 0 1 -> False
633:  Binary Operation False And <function get_draw_text_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x11067b9c0> -> False
633:  Binary Operation False <function get_draw_text_coordinates.<locals>.<lambda>.<locals>.<lambda> at 0x11067b9c0> -> False
637:  Binary Operation False And <function get_draw_text_coordinates.<locals>.<lambda> at 0x11067b420> -> False
637:  Binary Operation False <function get_draw_text_coordinates.<locals>.<lambda> at 0x11067b420> -> False
665:  Control flow event
665:  Control-flow enter with condition False
665:     If False
665:  Control flow event
665:  Control-flow exit
665:  If exit
666:  Accessing
666:   Reading
666:      Reading
667:  Accessing
667:   Reading
667:      Reading
668:  Literal    value: (120.667, 308.83333333333337)
668:  Tuple items: [120.667, 308.83333333333337]
104:  After function call, result:  (120.667, 308.83333333333337)
105:  Accessing
105:      Writing
106:  Accessing
106:   Reading
106:      Reading
107:  Accessing
107:   Reading
107:      Reading
108:  Accessing
108:   Reading
108:  Slice ['dropdown_1']
109:  Accessing
109:      Writing
110:  Literal    value: True
110:      Boolean value: True
111:  Accessing
111:      Writing
112:  Control flow event
112:  Control-flow exit
112:  If exit
113:  Accessing
113:   Reading
113:      Reading
123:  Control flow event
123:  Control-flow enter with condition True
123:     If True
114:  Accessing
114:   Reading
114:      Reading
115:  Accessing
115:   Reading
115:      Reading
116:  Accessing
116:   Reading
116:  Slice [1]
117:  Accessing
117:   Reading
117:  Attribute:  append of [[<PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307], [<PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973], [<PyPDFForm.middleware.tex
118:  Accessing
118:   Reading
118:      Reading
119:  Accessing
119:   Reading
119:      Reading
120:  Accessing
120:   Reading
120:      Reading
121:  Literal    value: [<PyPDFForm.middleware.text.Text object at 0x10782bcd0>, 120.667, 308.83333333333337]
121:  List [<PyPDFForm.middleware.text.Text object at 0x10782bcd0>, 120.667, 308.83333333333337]
122:  Control flow event
122:  Before function call: append ([<PyPDFForm.middleware.text.Text object at 0x10782bcd0>, 120.667, 308.83333333333337],) {}
122:  After function call, result:  None
123:  Control flow event
123:  Control-flow exit
123:  If exit
124:  Control flow event
124:  Control-flow enter with condition False
124:     For 
124:  Control flow event
124:  Control-flow exit
124:  For exit
125:  Control flow event
125:  Control-flow enter with condition False
125:     For 
125:  Control flow event
125:  Control-flow exit
125:  For exit
127:  Accessing
127:   Reading
127:      Reading
128:  Accessing
128:   Reading
128:  Attribute:  items of {1: [[<PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307], [<PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973], [<PyPDFForm.middleware.
129:  Control flow event
129:  Before function call: items () {}
129:  After function call, result:  dict_items([(1, [[<PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307], [<PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973], [<
145:  Control flow event
145:  Control-flow enter with condition True
145:     For (1, [[<PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307], [<PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973], [<PyPDFForm.middleware.text.Text obje
130:  Accessing
130:   Reading
130:  Attribute:  create_watermarks_and_draw of <module 'PyPDFForm.core.watermark' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/watermark.py'> is <function create
131:  Accessing
131:   Reading
131:      Reading
132:  Accessing
132:   Reading
132:      Reading
133:  Literal    value: text
133:      String value: text
134:  Accessing
134:   Reading
134:      Reading
135:  Control flow event
135:  Before function call: create_watermarks_and_draw (b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r
209:  Control flow event
210:  Accessing
210:   Reading
210:  Attribute:  PdfReader of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.pdfreader.PdfReader'>
211:  Accessing
211:   Reading
211:      Reading
212:  Control flow event
212:  Before function call: PdfReader () {'fdata': b'%PDF-1.5\r%\xe2\xe3\xcf\xd3\r\n3 0 obj\r<</Type/XObject/Subtype/Form/BBox[0 0 141.12 48.96002]/Length 0>>stream\r\n\nendstream\r\nendobj\r5 0 obj\r<</Ty
212:  After function call, result:  {'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0
213:  Accessing
213:      Writing
214:  Control flow event
214:  Before function call: BytesIO () {}
214:  After function call, result:  <_io.BytesIO object at 0x1116bf4c0>
215:  Accessing
215:      Writing
216:  Accessing
216:   Reading
216:  Attribute:  Canvas of <module 'reportlab.pdfgen.canvas' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/reportlab/pdfgen/canvas.py'> is <class 'reportlab.pdfgen.canvas.Canvas'>
217:  Accessing
217:   Reading
217:      Reading
218:  Accessing
218:   Reading
218:      Reading
219:  Accessing
219:   Reading
219:  Attribute:  pages of {'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612',
220:  Accessing
220:   Reading
220:      Reading
221:  Literal    value: 1
221:      Integer value: 1
222:  Binary Operation 1 Subtract 1 -> 0
222:  Binary Operation 1 1 -> 0
223:  Accessing
223:   Reading
223:  Slice [0]
224:  Accessing
224:   Reading
224:  Attribute:  MediaBox of {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25, 0), (30,
225:  Literal    value: 2
225:      Integer value: 2
226:  Accessing
226:   Reading
226:  Slice [2]
227:  Control flow event
227:  Before function call: float ('612',) {}
227:  After function call, result:  612.0
228:  Accessing
228:   Reading
228:      Reading
229:  Accessing
229:   Reading
229:  Attribute:  pages of {'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612',
230:  Accessing
230:   Reading
230:      Reading
231:  Literal    value: 1
231:      Integer value: 1
232:  Binary Operation 1 Subtract 1 -> 0
232:  Binary Operation 1 1 -> 0
233:  Accessing
233:   Reading
233:  Slice [0]
234:  Accessing
234:   Reading
234:  Attribute:  MediaBox of {'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25, 0), (30,
235:  Literal    value: 3
235:      Integer value: 3
236:  Accessing
236:   Reading
236:  Slice [3]
237:  Control flow event
237:  Before function call: float ('792',) {}
237:  After function call, result:  792.0
238:  Literal    value: (612.0, 792.0)
238:  Tuple items: [612.0, 792.0]
239:  Control flow event
239:  Before function call: Canvas (<_io.BytesIO object at 0x1116bf4c0>,) {'pagesize': (612.0, 792.0)}
239:  After function call, result:  <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>
240:  Accessing
240:      Writing
241:  Accessing
241:   Reading
241:      Reading
242:  Comparison Equal text image -> False
242:  Comparison text image -> False
260:  Control flow event
260:  Control-flow enter with condition False
260:     If False
252:  Accessing
252:   Reading
252:      Reading
258:  Control flow event
258:  Control-flow enter with condition True
258:     For [<PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307]
253:  Accessing
253:   Reading
253:      Reading
254:  Accessing
254:   Reading
254:      Reading
255:  Accessing
255:   Reading
255:      Reading
256:  Literal    value: [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307]
256:  List [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307]
257:  Control flow event
257:  Before function call: draw_text (<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x104046910>, 97.333, 639.307) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Literal    value: 0
2:      Integer value: 0
3:  Accessing
3:   Reading
3:  Slice [0]
4:  Accessing
4:      Writing
5:  Accessing
5:   Reading
5:      Reading
6:  Literal    value: 1
6:      Integer value: 1
7:  Accessing
7:   Reading
7:  Slice [1]
8:  Accessing
8:      Writing
9:  Accessing
9:   Reading
9:      Reading
10:  Literal    value: 2
10:      Integer value: 2
11:  Accessing
11:   Reading
11:  Slice [2]
12:  Accessing
12:      Writing
13:  Accessing
13:   Reading
13:      Reading
14:  Literal    value: 3
14:      Integer value: 3
15:  Accessing
15:   Reading
15:  Slice [3]
16:  Accessing
16:      Writing
17:  Accessing
17:   Reading
17:      Reading
18:  Accessing
18:   Reading
18:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x104046910> is test_1
19:  Accessing
19:      Writing
20:  Accessing
20:   Reading
20:      Reading
21:  Unary Operation test_1 -> False
21:  Unary Operation test_1 -> False
24:  Control flow event
24:  Control-flow enter with condition False
24:     If False
24:  Control flow event
24:  Control-flow exit
24:  If exit
25:  Accessing
25:   Reading
25:      Reading
26:  Accessing
26:   Reading
26:  Attribute:  max_length of <PyPDFForm.middleware.text.Text object at 0x104046910> is None
27:  Comparison IsNot None None -> False
27:  Comparison None None -> False
33:  Control flow event
33:  Control-flow enter with condition False
33:     If False
33:  Control flow event
33:  Control-flow exit
33:  If exit
34:  Accessing
34:   Reading
34:      Reading
35:  Accessing
35:   Reading
35:  Attribute:  setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
36:  Accessing
36:   Reading
36:      Reading
37:  Accessing
37:   Reading
37:  Attribute:  font of <PyPDFForm.middleware.text.Text object at 0x104046910> is Helvetica
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x104046910> is 8.64
40:  Control flow event
40:  Before function call: setFont ('Helvetica', 8.64) {}
40:  After function call, result:  None
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:  Attribute:  setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method _PDFColorSetter.setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
43:  Accessing
43:   Reading
43:      Reading
44:  Accessing
44:   Reading
44:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x104046910> is (0, 0, 0)
45:  Literal    value: 0
45:      Integer value: 0
46:  Accessing
46:   Reading
46:  Slice [0]
47:  Accessing
47:   Reading
47:      Reading
48:  Accessing
48:   Reading
48:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x104046910> is (0, 0, 0)
49:  Literal    value: 1
49:      Integer value: 1
50:  Accessing
50:   Reading
50:  Slice [1]
51:  Accessing
51:   Reading
51:      Reading
52:  Accessing
52:   Reading
52:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x104046910> is (0, 0, 0)
53:  Literal    value: 2
53:      Integer value: 2
54:  Accessing
54:   Reading
54:  Slice [2]
55:  Control flow event
55:  Before function call: setFillColorRGB (0, 0, 0) {}
55:  After function call, result:  None
56:  Accessing
56:   Reading
56:      Reading
57:  Accessing
57:   Reading
57:  Attribute:  comb of <PyPDFForm.middleware.text.Text object at 0x104046910> is None
58:  Literal    value: True
58:      Boolean value: True
161:  Control flow event
161:  Control-flow enter with condition False
161:     If False
82:  Accessing
82:   Reading
82:      Reading
83:  Accessing
83:   Reading
83:  Attribute:  drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
84:  Accessing
84:   Reading
84:      Reading
85:  Accessing
85:   Reading
85:      Reading
86:  Accessing
86:   Reading
86:      Reading
87:  Control flow event
87:  Before function call: drawString (97.333, 639.307, 'test_1') {}
87:  After function call, result:  None
160:  Control flow event
160:  Control-flow exit
160:  If exit
161:  Control flow event
161:  Control-flow exit
161:  If exit
0:  Control flow event
0:  Exiting function
257:  After function call, result:  None
258:  Control flow event
258:  Control-flow enter with condition True
258:     For [<PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973]
253:  Accessing
253:   Reading
253:      Reading
254:  Accessing
254:   Reading
254:      Reading
255:  Accessing
255:   Reading
255:      Reading
256:  Literal    value: [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973]
256:  List [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973]
257:  Control flow event
257:  Before function call: draw_text (<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x103f00390>, 97.333, 521.973) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Literal    value: 0
2:      Integer value: 0
3:  Accessing
3:   Reading
3:  Slice [0]
4:  Accessing
4:      Writing
5:  Accessing
5:   Reading
5:      Reading
6:  Literal    value: 1
6:      Integer value: 1
7:  Accessing
7:   Reading
7:  Slice [1]
8:  Accessing
8:      Writing
9:  Accessing
9:   Reading
9:      Reading
10:  Literal    value: 2
10:      Integer value: 2
11:  Accessing
11:   Reading
11:  Slice [2]
12:  Accessing
12:      Writing
13:  Accessing
13:   Reading
13:      Reading
14:  Literal    value: 3
14:      Integer value: 3
15:  Accessing
15:   Reading
15:  Slice [3]
16:  Accessing
16:      Writing
17:  Accessing
17:   Reading
17:      Reading
18:  Accessing
18:   Reading
18:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x103f00390> is test_2
19:  Accessing
19:      Writing
20:  Accessing
20:   Reading
20:      Reading
21:  Unary Operation test_2 -> False
21:  Unary Operation test_2 -> False
24:  Control flow event
24:  Control-flow enter with condition False
24:     If False
24:  Control flow event
24:  Control-flow exit
24:  If exit
25:  Accessing
25:   Reading
25:      Reading
26:  Accessing
26:   Reading
26:  Attribute:  max_length of <PyPDFForm.middleware.text.Text object at 0x103f00390> is None
27:  Comparison IsNot None None -> False
27:  Comparison None None -> False
33:  Control flow event
33:  Control-flow enter with condition False
33:     If False
33:  Control flow event
33:  Control-flow exit
33:  If exit
34:  Accessing
34:   Reading
34:      Reading
35:  Accessing
35:   Reading
35:  Attribute:  setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
36:  Accessing
36:   Reading
36:      Reading
37:  Accessing
37:   Reading
37:  Attribute:  font of <PyPDFForm.middleware.text.Text object at 0x103f00390> is Helvetica
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x103f00390> is 8.64
40:  Control flow event
40:  Before function call: setFont ('Helvetica', 8.64) {}
40:  After function call, result:  None
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:  Attribute:  setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method _PDFColorSetter.setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
43:  Accessing
43:   Reading
43:      Reading
44:  Accessing
44:   Reading
44:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x103f00390> is (0, 0, 0)
45:  Literal    value: 0
45:      Integer value: 0
46:  Accessing
46:   Reading
46:  Slice [0]
47:  Accessing
47:   Reading
47:      Reading
48:  Accessing
48:   Reading
48:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x103f00390> is (0, 0, 0)
49:  Literal    value: 1
49:      Integer value: 1
50:  Accessing
50:   Reading
50:  Slice [1]
51:  Accessing
51:   Reading
51:      Reading
52:  Accessing
52:   Reading
52:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x103f00390> is (0, 0, 0)
53:  Literal    value: 2
53:      Integer value: 2
54:  Accessing
54:   Reading
54:  Slice [2]
55:  Control flow event
55:  Before function call: setFillColorRGB (0, 0, 0) {}
55:  After function call, result:  None
56:  Accessing
56:   Reading
56:      Reading
57:  Accessing
57:   Reading
57:  Attribute:  comb of <PyPDFForm.middleware.text.Text object at 0x103f00390> is None
58:  Literal    value: True
58:      Boolean value: True
161:  Control flow event
161:  Control-flow enter with condition False
161:     If False
82:  Accessing
82:   Reading
82:      Reading
83:  Accessing
83:   Reading
83:  Attribute:  drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
84:  Accessing
84:   Reading
84:      Reading
85:  Accessing
85:   Reading
85:      Reading
86:  Accessing
86:   Reading
86:      Reading
87:  Control flow event
87:  Before function call: drawString (97.333, 521.973, 'test_2') {}
87:  After function call, result:  None
160:  Control flow event
160:  Control-flow exit
160:  If exit
161:  Control flow event
161:  Control-flow exit
161:  If exit
0:  Control flow event
0:  Exiting function
257:  After function call, result:  None
258:  Control flow event
258:  Control-flow enter with condition True
258:     For [<PyPDFForm.middleware.text.Text object at 0x10426e610>, 97.333, 409.307]
253:  Accessing
253:   Reading
253:      Reading
254:  Accessing
254:   Reading
254:      Reading
255:  Accessing
255:   Reading
255:      Reading
256:  Literal    value: [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x10426e610>, 97.333, 409.307]
256:  List [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x10426e610>, 97.333, 409.307]
257:  Control flow event
257:  Before function call: draw_text (<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x10426e610>, 97.333, 409.307) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Literal    value: 0
2:      Integer value: 0
3:  Accessing
3:   Reading
3:  Slice [0]
4:  Accessing
4:      Writing
5:  Accessing
5:   Reading
5:      Reading
6:  Literal    value: 1
6:      Integer value: 1
7:  Accessing
7:   Reading
7:  Slice [1]
8:  Accessing
8:      Writing
9:  Accessing
9:   Reading
9:      Reading
10:  Literal    value: 2
10:      Integer value: 2
11:  Accessing
11:   Reading
11:  Slice [2]
12:  Accessing
12:      Writing
13:  Accessing
13:   Reading
13:      Reading
14:  Literal    value: 3
14:      Integer value: 3
15:  Accessing
15:   Reading
15:  Slice [3]
16:  Accessing
16:      Writing
17:  Accessing
17:   Reading
17:      Reading
18:  Accessing
18:   Reading
18:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x10426e610> is test_3
19:  Accessing
19:      Writing
20:  Accessing
20:   Reading
20:      Reading
21:  Unary Operation test_3 -> False
21:  Unary Operation test_3 -> False
24:  Control flow event
24:  Control-flow enter with condition False
24:     If False
24:  Control flow event
24:  Control-flow exit
24:  If exit
25:  Accessing
25:   Reading
25:      Reading
26:  Accessing
26:   Reading
26:  Attribute:  max_length of <PyPDFForm.middleware.text.Text object at 0x10426e610> is None
27:  Comparison IsNot None None -> False
27:  Comparison None None -> False
33:  Control flow event
33:  Control-flow enter with condition False
33:     If False
33:  Control flow event
33:  Control-flow exit
33:  If exit
34:  Accessing
34:   Reading
34:      Reading
35:  Accessing
35:   Reading
35:  Attribute:  setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
36:  Accessing
36:   Reading
36:      Reading
37:  Accessing
37:   Reading
37:  Attribute:  font of <PyPDFForm.middleware.text.Text object at 0x10426e610> is Helvetica
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x10426e610> is 8.64
40:  Control flow event
40:  Before function call: setFont ('Helvetica', 8.64) {}
40:  After function call, result:  None
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:  Attribute:  setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method _PDFColorSetter.setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
43:  Accessing
43:   Reading
43:      Reading
44:  Accessing
44:   Reading
44:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x10426e610> is (0, 0, 0)
45:  Literal    value: 0
45:      Integer value: 0
46:  Accessing
46:   Reading
46:  Slice [0]
47:  Accessing
47:   Reading
47:      Reading
48:  Accessing
48:   Reading
48:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x10426e610> is (0, 0, 0)
49:  Literal    value: 1
49:      Integer value: 1
50:  Accessing
50:   Reading
50:  Slice [1]
51:  Accessing
51:   Reading
51:      Reading
52:  Accessing
52:   Reading
52:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x10426e610> is (0, 0, 0)
53:  Literal    value: 2
53:      Integer value: 2
54:  Accessing
54:   Reading
54:  Slice [2]
55:  Control flow event
55:  Before function call: setFillColorRGB (0, 0, 0) {}
55:  After function call, result:  None
56:  Accessing
56:   Reading
56:      Reading
57:  Accessing
57:   Reading
57:  Attribute:  comb of <PyPDFForm.middleware.text.Text object at 0x10426e610> is None
58:  Literal    value: True
58:      Boolean value: True
161:  Control flow event
161:  Control-flow enter with condition False
161:     If False
82:  Accessing
82:   Reading
82:      Reading
83:  Accessing
83:   Reading
83:  Attribute:  drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
84:  Accessing
84:   Reading
84:      Reading
85:  Accessing
85:   Reading
85:      Reading
86:  Accessing
86:   Reading
86:      Reading
87:  Control flow event
87:  Before function call: drawString (97.333, 409.307, 'test_3') {}
87:  After function call, result:  None
160:  Control flow event
160:  Control-flow exit
160:  If exit
161:  Control flow event
161:  Control-flow exit
161:  If exit
0:  Control flow event
0:  Exiting function
257:  After function call, result:  None
258:  Control flow event
258:  Control-flow enter with condition True
258:     For [<PyPDFForm.middleware.text.Text object at 0x110f3dd90>, 284.34857012077975, 644.1835696430727]
253:  Accessing
253:   Reading
253:      Reading
254:  Accessing
254:   Reading
254:      Reading
255:  Accessing
255:   Reading
255:      Reading
256:  Literal    value: [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x110f3dd90>, 284.34857012077975, 644.1835696430727]
256:  List [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x110f3dd90>, 284.34857012077975, 644.1835696430727]
257:  Control flow event
257:  Before function call: draw_text (<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x110f3dd90>, 284.34857012077975, 644.1835696430727) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Literal    value: 0
2:      Integer value: 0
3:  Accessing
3:   Reading
3:  Slice [0]
4:  Accessing
4:      Writing
5:  Accessing
5:   Reading
5:      Reading
6:  Literal    value: 1
6:      Integer value: 1
7:  Accessing
7:   Reading
7:  Slice [1]
8:  Accessing
8:      Writing
9:  Accessing
9:   Reading
9:      Reading
10:  Literal    value: 2
10:      Integer value: 2
11:  Accessing
11:   Reading
11:  Slice [2]
12:  Accessing
12:      Writing
13:  Accessing
13:   Reading
13:      Reading
14:  Literal    value: 3
14:      Integer value: 3
15:  Accessing
15:   Reading
15:  Slice [3]
16:  Accessing
16:      Writing
17:  Accessing
17:   Reading
17:      Reading
18:  Accessing
18:   Reading
18:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x110f3dd90> is ✓
19:  Accessing
19:      Writing
20:  Accessing
20:   Reading
20:      Reading
21:  Unary Operation ✓ -> False
21:  Unary Operation ✓ -> False
24:  Control flow event
24:  Control-flow enter with condition False
24:     If False
24:  Control flow event
24:  Control-flow exit
24:  If exit
25:  Accessing
25:   Reading
25:      Reading
26:  Accessing
26:   Reading
26:  Attribute:  max_length of <PyPDFForm.middleware.text.Text object at 0x110f3dd90> is None
27:  Comparison IsNot None None -> False
27:  Comparison None None -> False
33:  Control flow event
33:  Control-flow enter with condition False
33:     If False
33:  Control flow event
33:  Control-flow exit
33:  If exit
34:  Accessing
34:   Reading
34:      Reading
35:  Accessing
35:   Reading
35:  Attribute:  setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
36:  Accessing
36:   Reading
36:      Reading
37:  Accessing
37:   Reading
37:  Attribute:  font of <PyPDFForm.middleware.text.Text object at 0x110f3dd90> is Helvetica
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x110f3dd90> is 21.328291070781997
40:  Control flow event
40:  Before function call: setFont ('Helvetica', 21.328291070781997) {}
40:  After function call, result:  None
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:  Attribute:  setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method _PDFColorSetter.setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
43:  Accessing
43:   Reading
43:      Reading
44:  Accessing
44:   Reading
44:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x110f3dd90> is (0, 0, 0)
45:  Literal    value: 0
45:      Integer value: 0
46:  Accessing
46:   Reading
46:  Slice [0]
47:  Accessing
47:   Reading
47:      Reading
48:  Accessing
48:   Reading
48:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x110f3dd90> is (0, 0, 0)
49:  Literal    value: 1
49:      Integer value: 1
50:  Accessing
50:   Reading
50:  Slice [1]
51:  Accessing
51:   Reading
51:      Reading
52:  Accessing
52:   Reading
52:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x110f3dd90> is (0, 0, 0)
53:  Literal    value: 2
53:      Integer value: 2
54:  Accessing
54:   Reading
54:  Slice [2]
55:  Control flow event
55:  Before function call: setFillColorRGB (0, 0, 0) {}
55:  After function call, result:  None
56:  Accessing
56:   Reading
56:      Reading
57:  Accessing
57:   Reading
57:  Attribute:  comb of <PyPDFForm.middleware.text.Text object at 0x110f3dd90> is None
58:  Literal    value: True
58:      Boolean value: True
161:  Control flow event
161:  Control-flow enter with condition False
161:     If False
82:  Accessing
82:   Reading
82:      Reading
83:  Accessing
83:   Reading
83:  Attribute:  drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
84:  Accessing
84:   Reading
84:      Reading
85:  Accessing
85:   Reading
85:      Reading
86:  Accessing
86:   Reading
86:      Reading
87:  Control flow event
87:  Before function call: drawString (284.34857012077975, 644.1835696430727, '✓') {}
87:  After function call, result:  None
160:  Control flow event
160:  Control-flow exit
160:  If exit
161:  Control flow event
161:  Control-flow exit
161:  If exit
0:  Control flow event
0:  Exiting function
257:  After function call, result:  None
258:  Control flow event
258:  Control-flow enter with condition True
258:     For [<PyPDFForm.middleware.text.Text object at 0x111899b50>, 284.34857012077975, 527.5175696430726]
253:  Accessing
253:   Reading
253:      Reading
254:  Accessing
254:   Reading
254:      Reading
255:  Accessing
255:   Reading
255:      Reading
256:  Literal    value: [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x111899b50>, 284.34857012077975, 527.5175696430726]
256:  List [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x111899b50>, 284.34857012077975, 527.5175696430726]
257:  Control flow event
257:  Before function call: draw_text (<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x111899b50>, 284.34857012077975, 527.5175696430726) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Literal    value: 0
2:      Integer value: 0
3:  Accessing
3:   Reading
3:  Slice [0]
4:  Accessing
4:      Writing
5:  Accessing
5:   Reading
5:      Reading
6:  Literal    value: 1
6:      Integer value: 1
7:  Accessing
7:   Reading
7:  Slice [1]
8:  Accessing
8:      Writing
9:  Accessing
9:   Reading
9:      Reading
10:  Literal    value: 2
10:      Integer value: 2
11:  Accessing
11:   Reading
11:  Slice [2]
12:  Accessing
12:      Writing
13:  Accessing
13:   Reading
13:      Reading
14:  Literal    value: 3
14:      Integer value: 3
15:  Accessing
15:   Reading
15:  Slice [3]
16:  Accessing
16:      Writing
17:  Accessing
17:   Reading
17:      Reading
18:  Accessing
18:   Reading
18:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x111899b50> is ✓
19:  Accessing
19:      Writing
20:  Accessing
20:   Reading
20:      Reading
21:  Unary Operation ✓ -> False
21:  Unary Operation ✓ -> False
24:  Control flow event
24:  Control-flow enter with condition False
24:     If False
24:  Control flow event
24:  Control-flow exit
24:  If exit
25:  Accessing
25:   Reading
25:      Reading
26:  Accessing
26:   Reading
26:  Attribute:  max_length of <PyPDFForm.middleware.text.Text object at 0x111899b50> is None
27:  Comparison IsNot None None -> False
27:  Comparison None None -> False
33:  Control flow event
33:  Control-flow enter with condition False
33:     If False
33:  Control flow event
33:  Control-flow exit
33:  If exit
34:  Accessing
34:   Reading
34:      Reading
35:  Accessing
35:   Reading
35:  Attribute:  setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
36:  Accessing
36:   Reading
36:      Reading
37:  Accessing
37:   Reading
37:  Attribute:  font of <PyPDFForm.middleware.text.Text object at 0x111899b50> is Helvetica
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x111899b50> is 21.32829107078204
40:  Control flow event
40:  Before function call: setFont ('Helvetica', 21.32829107078204) {}
40:  After function call, result:  None
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:  Attribute:  setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method _PDFColorSetter.setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
43:  Accessing
43:   Reading
43:      Reading
44:  Accessing
44:   Reading
44:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x111899b50> is (0, 0, 0)
45:  Literal    value: 0
45:      Integer value: 0
46:  Accessing
46:   Reading
46:  Slice [0]
47:  Accessing
47:   Reading
47:      Reading
48:  Accessing
48:   Reading
48:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x111899b50> is (0, 0, 0)
49:  Literal    value: 1
49:      Integer value: 1
50:  Accessing
50:   Reading
50:  Slice [1]
51:  Accessing
51:   Reading
51:      Reading
52:  Accessing
52:   Reading
52:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x111899b50> is (0, 0, 0)
53:  Literal    value: 2
53:      Integer value: 2
54:  Accessing
54:   Reading
54:  Slice [2]
55:  Control flow event
55:  Before function call: setFillColorRGB (0, 0, 0) {}
55:  After function call, result:  None
56:  Accessing
56:   Reading
56:      Reading
57:  Accessing
57:   Reading
57:  Attribute:  comb of <PyPDFForm.middleware.text.Text object at 0x111899b50> is None
58:  Literal    value: True
58:      Boolean value: True
161:  Control flow event
161:  Control-flow enter with condition False
161:     If False
82:  Accessing
82:   Reading
82:      Reading
83:  Accessing
83:   Reading
83:  Attribute:  drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
84:  Accessing
84:   Reading
84:      Reading
85:  Accessing
85:   Reading
85:      Reading
86:  Accessing
86:   Reading
86:      Reading
87:  Control flow event
87:  Before function call: drawString (284.34857012077975, 527.5175696430726, '✓') {}
87:  After function call, result:  None
160:  Control flow event
160:  Control-flow exit
160:  If exit
161:  Control flow event
161:  Control-flow exit
161:  If exit
0:  Control flow event
0:  Exiting function
257:  After function call, result:  None
258:  Control flow event
258:  Control-flow enter with condition True
258:     For [<PyPDFForm.middleware.text.Text object at 0x104361b50>, 284.34857012077975, 414.85056964307273]
253:  Accessing
253:   Reading
253:      Reading
254:  Accessing
254:   Reading
254:      Reading
255:  Accessing
255:   Reading
255:      Reading
256:  Literal    value: [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x104361b50>, 284.34857012077975, 414.85056964307273]
256:  List [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x104361b50>, 284.34857012077975, 414.85056964307273]
257:  Control flow event
257:  Before function call: draw_text (<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x104361b50>, 284.34857012077975, 414.85056964307273) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Literal    value: 0
2:      Integer value: 0
3:  Accessing
3:   Reading
3:  Slice [0]
4:  Accessing
4:      Writing
5:  Accessing
5:   Reading
5:      Reading
6:  Literal    value: 1
6:      Integer value: 1
7:  Accessing
7:   Reading
7:  Slice [1]
8:  Accessing
8:      Writing
9:  Accessing
9:   Reading
9:      Reading
10:  Literal    value: 2
10:      Integer value: 2
11:  Accessing
11:   Reading
11:  Slice [2]
12:  Accessing
12:      Writing
13:  Accessing
13:   Reading
13:      Reading
14:  Literal    value: 3
14:      Integer value: 3
15:  Accessing
15:   Reading
15:  Slice [3]
16:  Accessing
16:      Writing
17:  Accessing
17:   Reading
17:      Reading
18:  Accessing
18:   Reading
18:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x104361b50> is ✓
19:  Accessing
19:      Writing
20:  Accessing
20:   Reading
20:      Reading
21:  Unary Operation ✓ -> False
21:  Unary Operation ✓ -> False
24:  Control flow event
24:  Control-flow enter with condition False
24:     If False
24:  Control flow event
24:  Control-flow exit
24:  If exit
25:  Accessing
25:   Reading
25:      Reading
26:  Accessing
26:   Reading
26:  Attribute:  max_length of <PyPDFForm.middleware.text.Text object at 0x104361b50> is None
27:  Comparison IsNot None None -> False
27:  Comparison None None -> False
33:  Control flow event
33:  Control-flow enter with condition False
33:     If False
33:  Control flow event
33:  Control-flow exit
33:  If exit
34:  Accessing
34:   Reading
34:      Reading
35:  Accessing
35:   Reading
35:  Attribute:  setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
36:  Accessing
36:   Reading
36:      Reading
37:  Accessing
37:   Reading
37:  Attribute:  font of <PyPDFForm.middleware.text.Text object at 0x104361b50> is Helvetica
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x104361b50> is 21.32829107078202
40:  Control flow event
40:  Before function call: setFont ('Helvetica', 21.32829107078202) {}
40:  After function call, result:  None
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:  Attribute:  setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method _PDFColorSetter.setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
43:  Accessing
43:   Reading
43:      Reading
44:  Accessing
44:   Reading
44:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x104361b50> is (0, 0, 0)
45:  Literal    value: 0
45:      Integer value: 0
46:  Accessing
46:   Reading
46:  Slice [0]
47:  Accessing
47:   Reading
47:      Reading
48:  Accessing
48:   Reading
48:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x104361b50> is (0, 0, 0)
49:  Literal    value: 1
49:      Integer value: 1
50:  Accessing
50:   Reading
50:  Slice [1]
51:  Accessing
51:   Reading
51:      Reading
52:  Accessing
52:   Reading
52:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x104361b50> is (0, 0, 0)
53:  Literal    value: 2
53:      Integer value: 2
54:  Accessing
54:   Reading
54:  Slice [2]
55:  Control flow event
55:  Before function call: setFillColorRGB (0, 0, 0) {}
55:  After function call, result:  None
56:  Accessing
56:   Reading
56:      Reading
57:  Accessing
57:   Reading
57:  Attribute:  comb of <PyPDFForm.middleware.text.Text object at 0x104361b50> is None
58:  Literal    value: True
58:      Boolean value: True
161:  Control flow event
161:  Control-flow enter with condition False
161:     If False
82:  Accessing
82:   Reading
82:      Reading
83:  Accessing
83:   Reading
83:  Attribute:  drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
84:  Accessing
84:   Reading
84:      Reading
85:  Accessing
85:   Reading
85:      Reading
86:  Accessing
86:   Reading
86:      Reading
87:  Control flow event
87:  Before function call: drawString (284.34857012077975, 414.85056964307273, '✓') {}
87:  After function call, result:  None
160:  Control flow event
160:  Control-flow exit
160:  If exit
161:  Control flow event
161:  Control-flow exit
161:  If exit
0:  Control flow event
0:  Exiting function
257:  After function call, result:  None
258:  Control flow event
258:  Control-flow enter with condition True
258:     For [<PyPDFForm.middleware.text.Text object at 0x11228d590>, 354.7094627693357, 527.896736847312]
253:  Accessing
253:   Reading
253:      Reading
254:  Accessing
254:   Reading
254:      Reading
255:  Accessing
255:   Reading
255:      Reading
256:  Literal    value: [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x11228d590>, 354.7094627693357, 527.896736847312]
256:  List [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x11228d590>, 354.7094627693357, 527.896736847312]
257:  Control flow event
257:  Before function call: draw_text (<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x11228d590>, 354.7094627693357, 527.896736847312) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Literal    value: 0
2:      Integer value: 0
3:  Accessing
3:   Reading
3:  Slice [0]
4:  Accessing
4:      Writing
5:  Accessing
5:   Reading
5:      Reading
6:  Literal    value: 1
6:      Integer value: 1
7:  Accessing
7:   Reading
7:  Slice [1]
8:  Accessing
8:      Writing
9:  Accessing
9:   Reading
9:      Reading
10:  Literal    value: 2
10:      Integer value: 2
11:  Accessing
11:   Reading
11:  Slice [2]
12:  Accessing
12:      Writing
13:  Accessing
13:   Reading
13:      Reading
14:  Literal    value: 3
14:      Integer value: 3
15:  Accessing
15:   Reading
15:  Slice [3]
16:  Accessing
16:      Writing
17:  Accessing
17:   Reading
17:      Reading
18:  Accessing
18:   Reading
18:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x11228d590> is ●
19:  Accessing
19:      Writing
20:  Accessing
20:   Reading
20:      Reading
21:  Unary Operation ● -> False
21:  Unary Operation ● -> False
24:  Control flow event
24:  Control-flow enter with condition False
24:     If False
24:  Control flow event
24:  Control-flow exit
24:  If exit
25:  Accessing
25:   Reading
25:      Reading
26:  Accessing
26:   Reading
26:  Attribute:  max_length of <PyPDFForm.middleware.text.Text object at 0x11228d590> is None
27:  Comparison IsNot None None -> False
27:  Comparison None None -> False
33:  Control flow event
33:  Control-flow enter with condition False
33:     If False
33:  Control flow event
33:  Control-flow exit
33:  If exit
34:  Accessing
34:   Reading
34:      Reading
35:  Accessing
35:   Reading
35:  Attribute:  setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
36:  Accessing
36:   Reading
36:      Reading
37:  Accessing
37:   Reading
37:  Attribute:  font of <PyPDFForm.middleware.text.Text object at 0x11228d590> is Helvetica
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x11228d590> is 19.95078945806407
40:  Control flow event
40:  Before function call: setFont ('Helvetica', 19.95078945806407) {}
40:  After function call, result:  None
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:  Attribute:  setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method _PDFColorSetter.setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
43:  Accessing
43:   Reading
43:      Reading
44:  Accessing
44:   Reading
44:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x11228d590> is (0, 0, 0)
45:  Literal    value: 0
45:      Integer value: 0
46:  Accessing
46:   Reading
46:  Slice [0]
47:  Accessing
47:   Reading
47:      Reading
48:  Accessing
48:   Reading
48:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x11228d590> is (0, 0, 0)
49:  Literal    value: 1
49:      Integer value: 1
50:  Accessing
50:   Reading
50:  Slice [1]
51:  Accessing
51:   Reading
51:      Reading
52:  Accessing
52:   Reading
52:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x11228d590> is (0, 0, 0)
53:  Literal    value: 2
53:      Integer value: 2
54:  Accessing
54:   Reading
54:  Slice [2]
55:  Control flow event
55:  Before function call: setFillColorRGB (0, 0, 0) {}
55:  After function call, result:  None
56:  Accessing
56:   Reading
56:      Reading
57:  Accessing
57:   Reading
57:  Attribute:  comb of <PyPDFForm.middleware.text.Text object at 0x11228d590> is None
58:  Literal    value: True
58:      Boolean value: True
161:  Control flow event
161:  Control-flow enter with condition False
161:     If False
82:  Accessing
82:   Reading
82:      Reading
83:  Accessing
83:   Reading
83:  Attribute:  drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
84:  Accessing
84:   Reading
84:      Reading
85:  Accessing
85:   Reading
85:      Reading
86:  Accessing
86:   Reading
86:      Reading
87:  Control flow event
87:  Before function call: drawString (354.7094627693357, 527.896736847312, '●') {}
87:  After function call, result:  None
160:  Control flow event
160:  Control-flow exit
160:  If exit
161:  Control flow event
161:  Control-flow exit
161:  If exit
0:  Control flow event
0:  Exiting function
257:  After function call, result:  None
258:  Control flow event
258:  Control-flow enter with condition True
258:     For [<PyPDFForm.middleware.text.Text object at 0x10782bcd0>, 120.667, 308.83333333333337]
253:  Accessing
253:   Reading
253:      Reading
254:  Accessing
254:   Reading
254:      Reading
255:  Accessing
255:   Reading
255:      Reading
256:  Literal    value: [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x10782bcd0>, 120.667, 308.83333333333337]
256:  List [<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x10782bcd0>, 120.667, 308.83333333333337]
257:  Control flow event
257:  Before function call: draw_text (<reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>, <PyPDFForm.middleware.text.Text object at 0x10782bcd0>, 120.667, 308.83333333333337) {}
0:  Control flow event
1:  Accessing
1:   Reading
1:      Reading
2:  Literal    value: 0
2:      Integer value: 0
3:  Accessing
3:   Reading
3:  Slice [0]
4:  Accessing
4:      Writing
5:  Accessing
5:   Reading
5:      Reading
6:  Literal    value: 1
6:      Integer value: 1
7:  Accessing
7:   Reading
7:  Slice [1]
8:  Accessing
8:      Writing
9:  Accessing
9:   Reading
9:      Reading
10:  Literal    value: 2
10:      Integer value: 2
11:  Accessing
11:   Reading
11:  Slice [2]
12:  Accessing
12:      Writing
13:  Accessing
13:   Reading
13:      Reading
14:  Literal    value: 3
14:      Integer value: 3
15:  Accessing
15:   Reading
15:  Slice [3]
16:  Accessing
16:      Writing
17:  Accessing
17:   Reading
17:      Reading
18:  Accessing
18:   Reading
18:  Attribute:  value of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is None
19:  Accessing
19:      Writing
20:  Accessing
20:   Reading
20:      Reading
21:  Unary Operation None -> True
21:  Unary Operation None -> True
24:  Control flow event
24:  Control-flow enter with condition True
24:     If True
22:  Literal    value: 
22:      String value: 
23:  Accessing
23:      Writing
24:  Control flow event
24:  Control-flow exit
24:  If exit
25:  Accessing
25:   Reading
25:      Reading
26:  Accessing
26:   Reading
26:  Attribute:  max_length of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is None
27:  Comparison IsNot None None -> False
27:  Comparison None None -> False
33:  Control flow event
33:  Control-flow enter with condition False
33:     If False
33:  Control flow event
33:  Control-flow exit
33:  If exit
34:  Accessing
34:   Reading
34:      Reading
35:  Accessing
35:   Reading
35:  Attribute:  setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.setFont of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
36:  Accessing
36:   Reading
36:      Reading
37:  Accessing
37:   Reading
37:  Attribute:  font of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is Helvetica
38:  Accessing
38:   Reading
38:      Reading
39:  Accessing
39:   Reading
39:  Attribute:  font_size of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is 14.0
40:  Control flow event
40:  Before function call: setFont ('Helvetica', 14.0) {}
40:  After function call, result:  None
41:  Accessing
41:   Reading
41:      Reading
42:  Accessing
42:   Reading
42:  Attribute:  setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method _PDFColorSetter.setFillColorRGB of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
43:  Accessing
43:   Reading
43:      Reading
44:  Accessing
44:   Reading
44:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is (0, 0, 0)
45:  Literal    value: 0
45:      Integer value: 0
46:  Accessing
46:   Reading
46:  Slice [0]
47:  Accessing
47:   Reading
47:      Reading
48:  Accessing
48:   Reading
48:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is (0, 0, 0)
49:  Literal    value: 1
49:      Integer value: 1
50:  Accessing
50:   Reading
50:  Slice [1]
51:  Accessing
51:   Reading
51:      Reading
52:  Accessing
52:   Reading
52:  Attribute:  font_color of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is (0, 0, 0)
53:  Literal    value: 2
53:      Integer value: 2
54:  Accessing
54:   Reading
54:  Slice [2]
55:  Control flow event
55:  Before function call: setFillColorRGB (0, 0, 0) {}
55:  After function call, result:  None
56:  Accessing
56:   Reading
56:      Reading
57:  Accessing
57:   Reading
57:  Attribute:  comb of <PyPDFForm.middleware.text.Text object at 0x10782bcd0> is None
58:  Literal    value: True
58:      Boolean value: True
161:  Control flow event
161:  Control-flow enter with condition False
161:     If False
82:  Accessing
82:   Reading
82:      Reading
83:  Accessing
83:   Reading
83:  Attribute:  drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.drawString of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
84:  Accessing
84:   Reading
84:      Reading
85:  Accessing
85:   Reading
85:      Reading
86:  Accessing
86:   Reading
86:      Reading
87:  Control flow event
87:  Before function call: drawString (120.667, 308.83333333333337, '') {}
87:  After function call, result:  None
160:  Control flow event
160:  Control-flow exit
160:  If exit
161:  Control flow event
161:  Control-flow exit
161:  If exit
0:  Control flow event
0:  Exiting function
257:  After function call, result:  None
258:  Control flow event
258:  Control-flow enter with condition False
258:     For 
258:  Control flow event
258:  Control-flow exit
258:  For exit
259:  Control flow event
259:  Control-flow exit
259:  If exit
260:  Control flow event
260:  Control-flow exit
260:  If exit
261:  Accessing
261:   Reading
261:      Reading
262:  Accessing
262:   Reading
262:  Attribute:  save of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0> is <bound method Canvas.save of <reportlab.pdfgen.canvas.Canvas object at 0x110ac15d0>>
263:  Control flow event
263:  Before function call: save () {}
263:  After function call, result:  None
264:  Accessing
264:   Reading
264:      Reading
265:  Accessing
265:   Reading
265:  Attribute:  seek of <_io.BytesIO object at 0x1116bf4c0> is <built-in method seek of _io.BytesIO object at 0x1116bf4c0>
266:  Literal    value: 0
266:      Integer value: 0
267:  Control flow event
267:  Before function call: seek (0,) {}
267:  After function call, result:  0
268:  Accessing
268:   Reading
268:      Reading
269:  Accessing
269:   Reading
269:  Attribute:  read of <_io.BytesIO object at 0x1116bf4c0> is <built-in method read of _io.BytesIO object at 0x1116bf4c0>
270:  Control flow event
270:  Before function call: read () {}
270:  After function call, result:  b'%PDF-1.3\n%\x93\x8c\x8b\x9e ReportLab Generated PDF document http://www.reportlab.com\n1 0 obj\n<<\n/F1 2 0 R /F2 3 0 R\n>>\nendobj\n2 0 obj\n<<\n/BaseFont /Helvetica 
271:  Accessing
271:      Writing
272:  Accessing
272:   Reading
272:      Reading
273:  Accessing
273:   Reading
273:  Attribute:  close of <_io.BytesIO object at 0x1116bf4c0> is <built-in method close of _io.BytesIO object at 0x1116bf4c0>
274:  Control flow event
274:  Before function call: close () {}
274:  After function call, result:  None
275:  Literal    value: []
275:  List []
276:  Accessing
276:      Writing
277:  Accessing
277:   Reading
277:      Reading
278:  Accessing
278:   Reading
278:  Attribute:  pages of {'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612',
279:  Control flow event
279:  Before function call: len ([{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox': ['0', '0', '612', '792'], '/Annots': [(2, 0), (4, 0), (6, 0), (8, 0), (14, 0), (19, 0), (25, 0), 
279:  After function call, result:  1
280:  Control flow event
280:  Before function call: range (1,) {}
280:  After function call, result:  range(0, 1)
292:  Control flow event
292:  Control-flow enter with condition True
292:     For 0
281:  Accessing
281:   Reading
281:      Reading
282:  Accessing
282:   Reading
282:  Attribute:  append of [] is <built-in method append of list object at 0x104378b00>
284:  Accessing
284:   Reading
284:      Reading
285:  Accessing
285:   Reading
285:      Reading
286:  Literal    value: 1
286:      Integer value: 1
287:  Binary Operation 1 Subtract 1 -> 0
287:  Binary Operation 1 1 -> 0
288:  Comparison Equal 0 0 -> True
288:  Comparison 0 0 -> True
290:  Control flow event
290:  Control-flow enter with condition True
290:     If True
283:  Accessing
283:   Reading
283:      Reading
290:  Control flow event
290:  Control-flow exit
290:  If exit
291:  Control flow event
291:  Before function call: append (b'%PDF-1.3\n%\x93\x8c\x8b\x9e ReportLab Generated PDF document http://www.reportlab.com\n1 0 obj\n<<\n/F1 2 0 R /F2 3 0 R\n>>\nendobj\n2 0 obj\n<<\n/BaseFont /Helvetica 
291:  After function call, result:  None
292:  Control flow event
292:  Control-flow enter with condition False
292:     For 
292:  Control flow event
292:  Control-flow exit
292:  For exit
293:  Accessing
293:   Reading
293:      Reading
135:  After function call, result:  [b'%PDF-1.3\n%\x93\x8c\x8b\x9e ReportLab Generated PDF document http://www.reportlab.com\n1 0 obj\n<<\n/F1 2 0 R /F2 3 0 R\n>>\nendobj\n2 0 obj\n<<\n/BaseFont /Helvetica
136:  Accessing
136:      Writing
138:  Accessing
138:   Reading
138:      Reading
139:  Control flow event
139:  Before function call: enumerate ([b'%PDF-1.3\n%\x93\x8c\x8b\x9e ReportLab Generated PDF document http://www.reportlab.com\n1 0 obj\n<<\n/F1 2 0 R /F2 3 0 R\n>>\nendobj\n2 0 obj\n<<\n/BaseFont /Helvet
139:  After function call, result:  <enumerate object at 0x1116bf4c0>
144:  Control flow event
144:  Control-flow enter with condition True
144:     For (0, b'%PDF-1.3\n%\x93\x8c\x8b\x9e ReportLab Generated PDF document http://www.reportlab.com\n1 0 obj\n<<\n/F1 2 0 R /F2 3 0 R\n>>\nendobj\n2 0 obj\n<<\n/BaseFont /Helvetica /Encoding /WinAnsiE
140:  Accessing
140:   Reading
140:      Reading
143:  Control flow event
143:  Control-flow enter with condition b'%PDF-1.3\n%\x93\x8c\x8b\x9e ReportLab Generated PDF document http://www.reportlab.com\n1 0 obj\n<<\n/F1 2 0 R /F2 3 0 R\n>>\nendobj\n2 0 obj\n<<\n/BaseFont /Helvet
143:     If b'%PDF-1.3\n%\x93\x8c\x8b\x9e ReportLab Generated PDF document http://www.reportlab.com\n1 0 obj\n<<\n/F1 2 0 R /F2 3 0 R\n>>\nendobj\n2 0 obj\n<<\n/BaseFont /Helvetica /Encoding /WinAnsiEncodi
141:  Accessing
141:   Reading
141:      Reading
142:  Accessing
142:      Writing
143:  Control flow event
143:  Control-flow exit
143:  If exit
144:  Control flow event
144:  Control-flow enter with condition False
144:     For 
144:  Control flow event
144:  Control-flow exit
144:  For exit
145:  Control flow event
145:  Control-flow enter with condition False
145:     For 
145:  Control flow event
145:  Control-flow exit
145:  For exit
146:  Accessing
146:   Reading
146:  Attribute:  merge_watermarks_with_pdf of <module 'PyPDFForm.core.watermark' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/watermark.py'> is <function merge_w
147:  Accessing
147:   Reading
147:  Attribute:  generate_stream of <module 'PyPDFForm.core.utils' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/utils.py'> is <function generate_stream at 0x1029
148:  Accessing
148:   Reading
148:      Reading
149:  Control flow event
149:  Before function call: generate_stream ({'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Contents': (44, 0), '/MediaBox':
0:  Control flow event
1:  Control flow event
1:  Before function call: BytesIO () {}
1:  After function call, result:  <_io.BytesIO object at 0x10474a200>
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:  Attribute:  PdfWriter of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.pdfwriter.PdfWriter'>
4:  Control flow event
4:  Before function call: PdfWriter () {}
4:  After function call, result:  <pdfrw.pdfwriter.PdfWriter object at 0x104190810>
5:  Accessing
5:   Reading
5:  Attribute:  write of <pdfrw.pdfwriter.PdfWriter object at 0x104190810> is <bound method PdfWriter.write of <pdfrw.pdfwriter.PdfWriter object at 0x104190810>>
6:  Accessing
6:   Reading
6:      Reading
7:  Accessing
7:   Reading
7:      Reading
8:  Control flow event
8:  Before function call: write (<_io.BytesIO object at 0x10474a200>, {'/Root': {'/Type': '/Catalog', '/Pages': {'/Type': '/Pages', '/Count': '1', '/Kids': [{'/Type': '/Page', '/Parent': (47, 0), '/Conte
8:  After function call, result:  None
9:  Accessing
9:   Reading
9:      Reading
10:  Accessing
10:   Reading
10:  Attribute:  seek of <_io.BytesIO object at 0x10474a200> is <built-in method seek of _io.BytesIO object at 0x10474a200>
11:  Literal    value: 0
11:      Integer value: 0
12:  Control flow event
12:  Before function call: seek (0,) {}
12:  After function call, result:  0
13:  Accessing
13:   Reading
13:      Reading
14:  Accessing
14:   Reading
14:  Attribute:  read of <_io.BytesIO object at 0x10474a200> is <built-in method read of _io.BytesIO object at 0x10474a200>
15:  Control flow event
15:  Before function call: read () {}
15:  After function call, result:  b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfescape.com) /ModDate\n  (D:20230115224737Z) /P
16:  Accessing
16:      Writing
17:  Accessing
17:   Reading
17:      Reading
18:  Accessing
18:   Reading
18:  Attribute:  close of <_io.BytesIO object at 0x10474a200> is <built-in method close of _io.BytesIO object at 0x10474a200>
19:  Control flow event
19:  Before function call: close () {}
19:  After function call, result:  None
20:  Accessing
20:   Reading
20:      Reading
149:  After function call, result:  b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfescape.com) /ModDate\n  (D:20230115224737Z) /P
150:  Accessing
150:   Reading
150:      Reading
151:  Control flow event
151:  Before function call: merge_watermarks_with_pdf (b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfescape.com) /ModDate\n  (D:
294:  Control flow event
295:  Accessing
295:   Reading
295:  Attribute:  PdfReader of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.pdfreader.PdfReader'>
296:  Accessing
296:   Reading
296:      Reading
297:  Control flow event
297:  Before function call: PdfReader () {'fdata': b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfescape.com) /ModDate\n  (D:2023
297:  After function call, result:  {'/ID': ['<DA414108682C095B0F50F5EE3FC0EA63>', '<DA414108682C095B0F50F5EE3FC0EA63>'], '/Info': {'/CreationDate': '(D:20211114200504Z)', '/Creator': '(PDFescape Online - 
298:  Accessing
298:      Writing
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:  Attribute:  pages of {'/ID': ['<DA414108682C095B0F50F5EE3FC0EA63>', '<DA414108682C095B0F50F5EE3FC0EA63>'], '/Info': {'/CreationDate': '(D:20211114200504Z)', '/Creator': '(PDFescape Online - https://w
302:  Control flow event
302:  Before function call: enumerate ([{'/Annots': [(7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)], '/Contents': (17, 0), '/MediaBox': ['0', '0', '612', '792'], '/P
302:  After function call, result:  <enumerate object at 0x10381bd80>
329:  Control flow event
329:  Control-flow enter with condition True
329:     For (0, {'/Annots': [(7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)], '/Contents': (17, 0), '/MediaBox': ['0', '0', '612', '792'], '/Parent': {'/Count': '1',
303:  Accessing
303:   Reading
303:      Reading
304:  Accessing
304:   Reading
304:      Reading
305:  Accessing
305:   Reading
305:  Slice [0]
328:  Control flow event
328:  Control-flow enter with condition b'%PDF-1.3\n%\x93\x8c\x8b\x9e ReportLab Generated PDF document http://www.reportlab.com\n1 0 obj\n<<\n/F1 2 0 R /F2 3 0 R\n>>\nendobj\n2 0 obj\n<<\n/BaseFont /Helvet
328:     If b'%PDF-1.3\n%\x93\x8c\x8b\x9e ReportLab Generated PDF document http://www.reportlab.com\n1 0 obj\n<<\n/F1 2 0 R /F2 3 0 R\n>>\nendobj\n2 0 obj\n<<\n/BaseFont /Helvetica /Encoding /WinAnsiEncodi
306:  Accessing
306:   Reading
306:  Attribute:  PdfReader of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.pdfreader.PdfReader'>
307:  Accessing
307:   Reading
307:      Reading
308:  Accessing
308:   Reading
308:      Reading
309:  Accessing
309:   Reading
309:  Slice [0]
310:  Control flow event
310:  Before function call: PdfReader () {'fdata': b'%PDF-1.3\n%\x93\x8c\x8b\x9e ReportLab Generated PDF document http://www.reportlab.com\n1 0 obj\n<<\n/F1 2 0 R /F2 3 0 R\n>>\nendobj\n2 0 obj\n<<\n/BaseF
310:  After function call, result:  {'/ID': ['<bd6eacd523018cfdd951e2f9079e720d>', '<bd6eacd523018cfdd951e2f9079e720d>'], '/Info': {'/Author': '(anonymous)', '/CreationDate': "(D:20230911225956-08'00')", '
311:  Accessing
311:      Writing
312:  Accessing
312:   Reading
312:      Reading
313:  Accessing
313:   Reading
313:  Attribute:  pages of {'/ID': ['<bd6eacd523018cfdd951e2f9079e720d>', '<bd6eacd523018cfdd951e2f9079e720d>'], '/Info': {'/Author': '(anonymous)', '/CreationDate': "(D:20230911225956-08'00')", '/Creator'
327:  Control flow event
327:  Control-flow enter with condition [{'/Contents': (8, 0), '/MediaBox': ['0', '0', '612', '792'], '/Parent': {'/Count': '1', '/Kids': [{...}], '/Type': '/Pages'}, '/Resources': {'/Font': (1, 0), '/Proc
327:     If [{'/Contents': (8, 0), '/MediaBox': ['0', '0', '612', '792'], '/Parent': {'/Count': '1', '/Kids': [{...}], '/Type': '/Pages'}, '/Resources': {'/Font': (1, 0), '/ProcSet': ['/PDF', '/Text', '/Im
314:  Accessing
314:   Reading
314:  Attribute:  PageMerge of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.pagemerge.PageMerge'>
315:  Accessing
315:   Reading
315:      Reading
316:  Control flow event
316:  Before function call: PageMerge ({'/Annots': [(7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)], '/Contents': (17, 0), '/MediaBox': ['0', '0', '612', '792'], '/Pa
316:  After function call, result:  [None]
317:  Accessing
317:      Writing
318:  Accessing
318:   Reading
318:      Reading
319:  Accessing
319:   Reading
319:  Attribute:  add of [None] is <bound method PageMerge.add of [None]>
320:  Accessing
320:   Reading
320:      Reading
321:  Accessing
321:   Reading
321:  Attribute:  pages of {'/ID': ['<bd6eacd523018cfdd951e2f9079e720d>', '<bd6eacd523018cfdd951e2f9079e720d>'], '/Info': {'/Author': '(anonymous)', '/CreationDate': "(D:20230911225956-08'00')", '/Creator'
322:  Literal    value: 0
322:      Integer value: 0
323:  Accessing
323:   Reading
323:  Slice [0]
324:  Control flow event
324:  Before function call: add ({'/Contents': (8, 0), '/MediaBox': ['0', '0', '612', '792'], '/Parent': {'/Count': '1', '/Kids': [{...}], '/Type': '/Pages'}, '/Resources': {'/Font': (1, 0), '/ProcSet': ['
324:  After function call, result:  [None, {'/Length': '13', '/Resources': {'/XObject': {'/FullPage': {'/Filter': ['/ASCII85Decode', '/FlateDecode'], '/Length': '290', '/Resources': {'/Font': (1, 0), '/Pro
325:  Accessing
325:   Reading
325:  Attribute:  render of [None, {'/Length': '13', '/Resources': {'/XObject': {'/FullPage': {'/Filter': ['/ASCII85Decode', '/FlateDecode'], '/Length': '290', '/Resources': {'/Font': (1, 0), '/ProcSet': [
326:  Control flow event
326:  Before function call: render () {}
326:  After function call, result:  {'/Annots': [(7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)], '/Contents': [{'/Length': '1'}, {'/Filter': '/FlateDecode', '/Length
327:  Control flow event
327:  Control-flow exit
327:  If exit
328:  Control flow event
328:  Control-flow exit
328:  If exit
329:  Control flow event
329:  Control-flow enter with condition False
329:     For 
329:  Control flow event
329:  Control-flow exit
329:  For exit
330:  Accessing
330:   Reading
330:  Attribute:  generate_stream of <module 'PyPDFForm.core.utils' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/utils.py'> is <function generate_stream at 0x1029
331:  Accessing
331:   Reading
331:      Reading
332:  Control flow event
332:  Before function call: generate_stream ({'/ID': ['<DA414108682C095B0F50F5EE3FC0EA63>', '<DA414108682C095B0F50F5EE3FC0EA63>'], '/Info': {'/CreationDate': '(D:20211114200504Z)', '/Creator': '(PDFescape 
0:  Control flow event
1:  Control flow event
1:  Before function call: BytesIO () {}
1:  After function call, result:  <_io.BytesIO object at 0x1110ed850>
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:  Attribute:  PdfWriter of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.pdfwriter.PdfWriter'>
4:  Control flow event
4:  Before function call: PdfWriter () {}
4:  After function call, result:  <pdfrw.pdfwriter.PdfWriter object at 0x1120c2510>
5:  Accessing
5:   Reading
5:  Attribute:  write of <pdfrw.pdfwriter.PdfWriter object at 0x1120c2510> is <bound method PdfWriter.write of <pdfrw.pdfwriter.PdfWriter object at 0x1120c2510>>
6:  Accessing
6:   Reading
6:      Reading
7:  Accessing
7:   Reading
7:      Reading
8:  Control flow event
8:  Before function call: write (<_io.BytesIO object at 0x1110ed850>, {'/ID': ['<DA414108682C095B0F50F5EE3FC0EA63>', '<DA414108682C095B0F50F5EE3FC0EA63>'], '/Info': {'/CreationDate': '(D:20211114200504Z)
8:  After function call, result:  None
9:  Accessing
9:   Reading
9:      Reading
10:  Accessing
10:   Reading
10:  Attribute:  seek of <_io.BytesIO object at 0x1110ed850> is <built-in method seek of _io.BytesIO object at 0x1110ed850>
11:  Literal    value: 0
11:      Integer value: 0
12:  Control flow event
12:  Before function call: seek (0,) {}
12:  After function call, result:  0
13:  Accessing
13:   Reading
13:      Reading
14:  Accessing
14:   Reading
14:  Attribute:  read of <_io.BytesIO object at 0x1110ed850> is <built-in method read of _io.BytesIO object at 0x1110ed850>
15:  Control flow event
15:  Before function call: read () {}
15:  After function call, result:  b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfescape.com) /ModDate\n  (D:20230115224737Z) /P
16:  Accessing
16:      Writing
17:  Accessing
17:   Reading
17:      Reading
18:  Accessing
18:   Reading
18:  Attribute:  close of <_io.BytesIO object at 0x1110ed850> is <built-in method close of _io.BytesIO object at 0x1110ed850>
19:  Control flow event
19:  Before function call: close () {}
19:  After function call, result:  None
20:  Accessing
20:   Reading
20:      Reading
332:  After function call, result:  b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfescape.com) /ModDate\n  (D:20230115224737Z) /P
151:  After function call, result:  b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfescape.com) /ModDate\n  (D:20230115224737Z) /P
113:  After function call, result:  b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfescape.com) /ModDate\n  (D:20230115224737Z) /P
114:  Control flow event
114:  Before function call: remove_all_elements (b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfescape.com) /ModDate\n  (D:202301
284:  Control flow event
285:  Accessing
285:   Reading
285:  Attribute:  PdfReader of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.pdfreader.PdfReader'>
286:  Accessing
286:   Reading
286:      Reading
287:  Control flow event
287:  Before function call: PdfReader () {'fdata': b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfescape.com) /ModDate\n  (D:2023
287:  After function call, result:  {'/ID': ['<DA414108682C095B0F50F5EE3FC0EA63>', '<DA414108682C095B0F50F5EE3FC0EA63>'], '/Info': {'/CreationDate': '(D:20211114200504Z)', '/Creator': '(PDFescape Online - 
288:  Accessing
288:      Writing
289:  Accessing
289:   Reading
289:      Reading
290:  Accessing
290:   Reading
290:  Attribute:  pages of {'/ID': ['<DA414108682C095B0F50F5EE3FC0EA63>', '<DA414108682C095B0F50F5EE3FC0EA63>'], '/Info': {'/CreationDate': '(D:20211114200504Z)', '/Creator': '(PDFescape Online - https://w
306:  Control flow event
306:  Control-flow enter with condition True
306:     For {'/Annots': [(7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)], '/Contents': [(17, 0), (18, 0), (19, 0)], '/MediaBox': ['0', '0', '612', '792'], '/Parent':
291:  Accessing
291:   Reading
291:      Reading
292:  Accessing
292:   Reading
292:  Attribute:  ANNOTATION_KEY of <module 'PyPDFForm.core.constants' from '/Users/keita/projects/DynaPyt/experiments/experiment_004/PyPDFForm/PyPDFForm/core/constants.py'> is /Annots
293:  Accessing
293:   Reading
293:  Slice ['/Annots']
294:  Accessing
294:      Writing
295:  Accessing
295:   Reading
295:      Reading
305:  Control flow event
305:  Control-flow enter with condition [(7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)]
305:     If [(7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)]
296:  Accessing
296:   Reading
296:      Reading
297:  Control flow event
297:  Before function call: len ([(7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)],) {}
297:  After function call, result:  10
298:  Control flow event
298:  Before function call: range (10,) {}
298:  After function call, result:  range(0, 10)
299:  Control flow event
299:  Before function call: reversed (range(0, 10),) {}
299:  After function call, result:  <range_iterator object at 0x102d364c0>
304:  Control flow event
304:  Control-flow enter with condition True
304:     For 9
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:  Attribute:  pop of [(7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0), (16, 0)] is <bound method PdfArray.pop of [(7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0)
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: pop (9,) {}
303:  After function call, result:  {'/AP': {'/N': (27, 0)}, '/DA': '(/Helv 14 Tf 0 g)', '/F': '4', '/FT': '/Ch', '/Ff': '131072', '/H': '/P', '/MK': {}, '/Opt': [['(foo)', '(foo)'], ['(bar)', '(bar)'], ['
304:  Control flow event
304:  Control-flow enter with condition True
304:     For 8
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:  Attribute:  pop of [{'/AP': {'/N': (56, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/FT': '/Tx', '/Ff': '4194304', '/MK': {}, '/P': {'/Annots': [...], '/Contents': [(17, 0), (18, 0), (19, 0)], '/M
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: pop (8,) {}
303:  After function call, result:  {'/AP': {'/D': {'/2': (28, 0), '/Off': (29, 0)}, '/N': {'/2': (30, 0), '/Off': (31, 0)}}, '/AS': '/Off', '/DA': '(/ZaDb 0 Tf 0 g)', '/F': '4', '/H': '/P', '/MK': {'/CA':
304:  Control flow event
304:  Control-flow enter with condition True
304:     For 7
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:  Attribute:  pop of [{'/AP': {'/N': (56, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/FT': '/Tx', '/Ff': '4194304', '/MK': {}, '/P': {'/Annots': [...], '/Contents': [(17, 0), (18, 0), (19, 0)], '/M
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: pop (7,) {}
303:  After function call, result:  {'/AP': {'/D': {'/1': (34, 0), '/Off': (35, 0)}, '/N': {'/1': (36, 0), '/Off': (37, 0)}}, '/AS': '/Off', '/DA': '(/ZaDb 0 Tf 0 g)', '/F': '4', '/H': '/P', '/MK': {'/CA':
304:  Control flow event
304:  Control-flow enter with condition True
304:     For 6
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:  Attribute:  pop of [{'/AP': {'/N': (56, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/FT': '/Tx', '/Ff': '4194304', '/MK': {}, '/P': {'/Annots': [...], '/Contents': [(17, 0), (18, 0), (19, 0)], '/M
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: pop (6,) {}
303:  After function call, result:  {'/AP': {'/D': {'/0': (38, 0), '/Off': (39, 0)}, '/N': {'/0': (40, 0), '/Off': (41, 0)}}, '/AS': '/Off', '/DA': '(/ZaDb 0 Tf 0 g)', '/F': '4', '/H': '/P', '/MK': {'/CA':
304:  Control flow event
304:  Control-flow enter with condition True
304:     For 5
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:  Attribute:  pop of [{'/AP': {'/N': (56, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/FT': '/Tx', '/Ff': '4194304', '/MK': {}, '/P': {'/Annots': [...], '/Contents': [(17, 0), (18, 0), (19, 0)], '/M
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: pop (5,) {}
303:  After function call, result:  {'/AP': {'/D': {'/Off': (42, 0), '/Yes': (43, 0)}, '/N': {'/Off': (44, 0), '/Yes': (45, 0)}}, '/AS': '/Off', '/DA': '(/ZaDb 0 Tf 0 g)', '/F': '4', '/FT': '/Btn', '/H': '
304:  Control flow event
304:  Control-flow enter with condition True
304:     For 4
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:  Attribute:  pop of [{'/AP': {'/N': (56, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/FT': '/Tx', '/Ff': '4194304', '/MK': {}, '/P': {'/Annots': [...], '/Contents': [(17, 0), (18, 0), (19, 0)], '/M
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: pop (4,) {}
303:  After function call, result:  {'/AP': {'/D': {'/Off': (46, 0), '/Yes': (47, 0)}, '/N': {'/Off': (48, 0), '/Yes': (49, 0)}}, '/AS': '/Off', '/DA': '(/ZaDb 0 Tf 0 g)', '/F': '4', '/FT': '/Btn', '/H': '
304:  Control flow event
304:  Control-flow enter with condition True
304:     For 3
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:  Attribute:  pop of [{'/AP': {'/N': (56, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/FT': '/Tx', '/Ff': '4194304', '/MK': {}, '/P': {'/Annots': [...], '/Contents': [(17, 0), (18, 0), (19, 0)], '/M
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: pop (3,) {}
303:  After function call, result:  {'/AP': {'/D': {'/Off': (50, 0), '/Yes': (51, 0)}, '/N': {'/Off': (52, 0), '/Yes': (53, 0)}}, '/AS': '/Off', '/DA': '(/ZaDb 0 Tf 0 g)', '/F': '4', '/FT': '/Btn', '/H': '
304:  Control flow event
304:  Control-flow enter with condition True
304:     For 2
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:  Attribute:  pop of [{'/AP': {'/N': (56, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/FT': '/Tx', '/Ff': '4194304', '/MK': {}, '/P': {'/Annots': [...], '/Contents': [(17, 0), (18, 0), (19, 0)], '/M
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: pop (2,) {}
303:  After function call, result:  {'/AP': {'/N': (54, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/FT': '/Tx', '/Ff': '4194304', '/MK': {}, '/P': {'/Annots': [{'/AP': {'/N': (56, 0)}, '/DA': '(/Helv 8
304:  Control flow event
304:  Control-flow enter with condition True
304:     For 1
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:  Attribute:  pop of [{'/AP': {'/N': (56, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/FT': '/Tx', '/Ff': '4194304', '/MK': {}, '/P': {'/Annots': [...], '/Contents': [(17, 0), (18, 0), (19, 0)], '/M
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: pop (1,) {}
303:  After function call, result:  {'/AP': {'/N': (55, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/FT': '/Tx', '/Ff': '4194304', '/MK': {}, '/P': {'/Annots': [{'/AP': {'/N': (56, 0)}, '/DA': '(/Helv 8
304:  Control flow event
304:  Control-flow enter with condition True
304:     For 0
300:  Accessing
300:   Reading
300:      Reading
301:  Accessing
301:   Reading
301:  Attribute:  pop of [{'/AP': {'/N': (56, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/FT': '/Tx', '/Ff': '4194304', '/MK': {}, '/P': {'/Annots': [...], '/Contents': [(17, 0), (18, 0), (19, 0)], '/M
302:  Accessing
302:   Reading
302:      Reading
303:  Control flow event
303:  Before function call: pop (0,) {}
303:  After function call, result:  {'/AP': {'/N': (56, 0)}, '/DA': '(/Helv 8.64 Tf 0 g)', '/F': '4', '/FT': '/Tx', '/Ff': '4194304', '/MK': {}, '/P': {'/Annots': [], '/Contents': [(17, 0), (18, 0), (19, 0
304:  Control flow event
304:  Control-flow enter with condition False
304:     For 
304:  Control flow event
304:  Control-flow exit
304:  For exit
305:  Control flow event
305:  Control-flow exit
305:  If exit
306:  Control flow event
306:  Control-flow enter with condition False
306:     For 
306:  Control flow event
306:  Control-flow exit
306:  For exit
307:  Accessing
307:   Reading
307:      Reading
308:  Accessing
308:   Reading
308:      Reading
309:  Control flow event
309:  Before function call: generate_stream ({'/ID': ['<DA414108682C095B0F50F5EE3FC0EA63>', '<DA414108682C095B0F50F5EE3FC0EA63>'], '/Info': {'/CreationDate': '(D:20211114200504Z)', '/Creator': '(PDFescape 
0:  Control flow event
1:  Control flow event
1:  Before function call: BytesIO () {}
1:  After function call, result:  <_io.BytesIO object at 0x112fd2390>
2:  Accessing
2:      Writing
3:  Accessing
3:   Reading
3:  Attribute:  PdfWriter of <module 'pdfrw' from '/Users/keita/.pyenv/versions/3.11.0/lib/python3.11/site-packages/pdfrw/__init__.py'> is <class 'pdfrw.pdfwriter.PdfWriter'>
4:  Control flow event
4:  Before function call: PdfWriter () {}
4:  After function call, result:  <pdfrw.pdfwriter.PdfWriter object at 0x1120e9f90>
5:  Accessing
5:   Reading
5:  Attribute:  write of <pdfrw.pdfwriter.PdfWriter object at 0x1120e9f90> is <bound method PdfWriter.write of <pdfrw.pdfwriter.PdfWriter object at 0x1120e9f90>>
6:  Accessing
6:   Reading
6:      Reading
7:  Accessing
7:   Reading
7:      Reading
8:  Control flow event
8:  Before function call: write (<_io.BytesIO object at 0x112fd2390>, {'/ID': ['<DA414108682C095B0F50F5EE3FC0EA63>', '<DA414108682C095B0F50F5EE3FC0EA63>'], '/Info': {'/CreationDate': '(D:20211114200504Z)
8:  After function call, result:  None
9:  Accessing
9:   Reading
9:      Reading
10:  Accessing
10:   Reading
10:  Attribute:  seek of <_io.BytesIO object at 0x112fd2390> is <built-in method seek of _io.BytesIO object at 0x112fd2390>
11:  Literal    value: 0
11:      Integer value: 0
12:  Control flow event
12:  Before function call: seek (0,) {}
12:  After function call, result:  0
13:  Accessing
13:   Reading
13:      Reading
14:  Accessing
14:   Reading
14:  Attribute:  read of <_io.BytesIO object at 0x112fd2390> is <built-in method read of _io.BytesIO object at 0x112fd2390>
15:  Control flow event
15:  Before function call: read () {}
15:  After function call, result:  b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfescape.com) /ModDate\n  (D:20230115224737Z) /P
16:  Accessing
16:      Writing
17:  Accessing
17:   Reading
17:      Reading
18:  Accessing
18:   Reading
18:  Attribute:  close of <_io.BytesIO object at 0x112fd2390> is <built-in method close of _io.BytesIO object at 0x112fd2390>
19:  Control flow event
19:  Before function call: close () {}
19:  After function call, result:  None
20:  Accessing
20:   Reading
20:      Reading
309:  After function call, result:  b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfescape.com) /ModDate\n  (D:20230115224737Z) /P
114:  After function call, result:  b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfescape.com) /ModDate\n  (D:20230115224737Z) /P
115:  Accessing
115:      Writing
116:  Accessing
116:   Reading
116:      Reading
19:  After function call, result:  <PyPDFForm.wrapper.Wrapper object at 0x102c4b390>
20:  Accessing
20:   Reading
20:  Attribute:  read of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is <bound method Wrapper.read of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390>>
21:  Control flow event
21:  Before function call: read () {}
39:  Control flow event
40:  Accessing
40:   Reading
40:      Reading
41:  Accessing
41:   Reading
41:  Attribute:  stream of <PyPDFForm.wrapper.Wrapper object at 0x102c4b390> is b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfe
21:  After function call, result:  b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfescape.com) /ModDate\n  (D:20230115224737Z) /P
22:  Control flow event
22:  Asserting b'%PDF-1.3\n%\xe2\xe3\xcf\xd3\n1 0 obj\n<</CreationDate (D:20211114200504Z) /Creator\n  (PDFescape Online - https://www.pdfescape.com) /ModDate\n  (D:20230115224737Z) /Producer (DocFly)>>\n
0:  Control flow event
0:  Exiting function
13:  Accessing
13:   Reading
13:      Reading
14:  Accessing
14:   Reading
14:  Attribute:  config of <SubRequest 'generate_new_pdf_samples' for <Function test_dropdown_not_specified>> is <_pytest.config.Config object at 0x102a88c10>
15:  Accessing
15:   Reading
15:  Attribute:  getoption of <_pytest.config.Config object at 0x102a88c10> is <bound method Config.getoption of <_pytest.config.Config object at 0x102a88c10>>
16:  Literal    value: --regenerate
16:      String value: --regenerate
17:  Control flow event
17:  Before function call: getoption ('--regenerate',) {}
17:  After function call, result:  0
18:  Comparison Equal 0 1 -> False
18:  Comparison 0 1 -> False
38:  Control flow event
38:  Control-flow enter with condition False
38:     If False
38:  Control flow event
38:  Control-flow exit
38:  If exit
10:  Control flow event
10:  Exiting function
26:  After function call, result:  0
27:  Control flow event
27:  Control-flow exit
27:  If exit
-1:  Execution ended
